[
    {
        "id": "4dc5ddec.703f44",
        "type": "tab",
        "label": "Setup",
        "disabled": true,
        "info": ""
    },
    {
        "id": "e83b2318.6f5c6",
        "type": "tab",
        "label": "Globals",
        "disabled": false,
        "info": ""
    },
    {
        "id": "53028f3b.590b5",
        "type": "tab",
        "label": "Wallet",
        "disabled": false,
        "info": ""
    },
    {
        "id": "42c07592.8d970c",
        "type": "tab",
        "label": "Feed",
        "disabled": false,
        "info": ""
    },
    {
        "id": "613e85c9.c6210c",
        "type": "tab",
        "label": "Minting",
        "disabled": false,
        "info": ""
    },
    {
        "id": "f7442446.0c97f8",
        "type": "tab",
        "label": "Assets",
        "disabled": false,
        "info": ""
    },
    {
        "id": "354f3ac2.1ff636",
        "type": "tab",
        "label": "Fungible Tokens",
        "disabled": false,
        "info": ""
    },
    {
        "id": "88cec2c0.c8804",
        "type": "tab",
        "label": "History",
        "disabled": false,
        "info": ""
    },
    {
        "id": "725ce57a.a25e4c",
        "type": "tab",
        "label": "Registrar",
        "disabled": false,
        "info": "Used to Register Names and Potentially Namespaces"
    },
    {
        "id": "de33bfc8.0ee0f",
        "type": "tab",
        "label": "Clarity Debug",
        "disabled": false,
        "info": ""
    },
    {
        "id": "552dd682.f93918",
        "type": "tab",
        "label": "Deploy Derp",
        "disabled": false,
        "info": ""
    },
    {
        "id": "39deae2a.464912",
        "type": "tab",
        "label": "Derupt Setup",
        "disabled": true,
        "info": ""
    },
    {
        "id": "d9ba26fa.6d2b18",
        "type": "ui_base",
        "theme": {
            "name": "theme-custom",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#ffffff",
                "baseFont": "Copperplate,Copperplate Gothic Light,fantasy",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#000000",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Derupt",
                "default": "#4B7930",
                "baseColor": "#34af07",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "reset": false
            },
            "themeState": {
                "base-color": {
                    "default": "#23262f",
                    "value": "#34af07",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#34af07",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#131313",
                    "edited": true
                },
                "page-sidebar-backgroundColor": {
                    "value": "#131313",
                    "edited": true
                },
                "group-textColor": {
                    "value": "#34af07",
                    "edited": true
                },
                "group-borderColor": {
                    "value": "#131313",
                    "edited": true
                },
                "group-backgroundColor": {
                    "value": "#131313",
                    "edited": true
                },
                "widget-textColor": {
                    "value": "#ffffff",
                    "edited": true
                },
                "widget-backgroundColor": {
                    "value": "#34af07",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#131313",
                    "edited": true
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey"
            }
        },
        "site": {
            "name": "Derupt",
            "hideToolbar": "true",
            "allowSwipe": "false",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            },
            "lockMenu": "icon",
            "allowTempTheme": "true"
        }
    },
    {
        "id": "a0d42798.ab3f38",
        "type": "ui_tab",
        "name": "Wallet",
        "icon": "mi-account_balance_wallet",
        "order": 5,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "bec9f54e.163bf8",
        "type": "ui_group",
        "name": "ImportGen",
        "tab": "a0d42798.ab3f38",
        "order": 1,
        "disp": false,
        "width": 13,
        "collapse": false
    },
    {
        "id": "a0be6719.4b0e38",
        "type": "ui_group",
        "name": "Send",
        "tab": "a0d42798.ab3f38",
        "order": 5,
        "disp": false,
        "width": 13,
        "collapse": false
    },
    {
        "id": "34217460.577dac",
        "type": "ui_tab",
        "d": true,
        "name": "Minting",
        "icon": "fa-leaf",
        "order": 7,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "3348dd5e.728a92",
        "type": "ui_group",
        "name": "Receive",
        "tab": "a0d42798.ab3f38",
        "order": 6,
        "disp": false,
        "width": 13,
        "collapse": false
    },
    {
        "id": "93f1cccf.344e5",
        "type": "ui_group",
        "name": "MintFT Trait",
        "tab": "34217460.577dac",
        "order": 2,
        "disp": false,
        "width": "13",
        "collapse": false
    },
    {
        "id": "c2eb85a6.be5128",
        "type": "ui_tab",
        "name": "Assets",
        "icon": "fa-bank",
        "order": 8,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "583ee0bf.fe5c5",
        "type": "ui_group",
        "name": "STX Hodl",
        "tab": "c2eb85a6.be5128",
        "order": 2,
        "disp": false,
        "width": 13,
        "collapse": false
    },
    {
        "id": "2e2fb22f.78448e",
        "type": "ui_group",
        "name": "Token Hodl",
        "tab": "c2eb85a6.be5128",
        "order": 3,
        "disp": false,
        "width": 13,
        "collapse": false
    },
    {
        "id": "4079dee5.d84aa",
        "type": "ui_group",
        "name": "NFT Hodl",
        "tab": "c2eb85a6.be5128",
        "order": 4,
        "disp": false,
        "width": 13,
        "collapse": false
    },
    {
        "id": "8a056a57.4af708",
        "type": "ui_tab",
        "name": "Feed",
        "icon": "fa-rss",
        "order": 6,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "eaf2cbdd.546078",
        "type": "ui_group",
        "name": "Feed",
        "tab": "8a056a57.4af708",
        "order": 2,
        "disp": false,
        "width": 13,
        "collapse": false
    },
    {
        "id": "e5d0847b.1daa38",
        "type": "ui_group",
        "name": "Profile",
        "tab": "8a056a57.4af708",
        "order": 4,
        "disp": false,
        "width": "13",
        "collapse": false
    },
    {
        "id": "69d70456.083fac",
        "type": "ui_group",
        "name": "WalletNav",
        "tab": "a0d42798.ab3f38",
        "order": 3,
        "disp": false,
        "width": "13",
        "collapse": false
    },
    {
        "id": "433bfb40.a488a4",
        "type": "ui_group",
        "name": "Keys",
        "tab": "a0d42798.ab3f38",
        "order": 4,
        "disp": false,
        "width": "13",
        "collapse": false
    },
    {
        "id": "d506506a.83f12",
        "type": "ui_group",
        "name": "Header",
        "tab": "8a056a57.4af708",
        "order": 1,
        "disp": false,
        "width": 13,
        "collapse": false
    },
    {
        "id": "be1bffc8.e254c",
        "type": "ui_group",
        "name": "byName",
        "tab": "8a056a57.4af708",
        "order": 5,
        "disp": false,
        "width": "13",
        "collapse": false
    },
    {
        "id": "6744e75c.f19528",
        "type": "ui_link",
        "d": true,
        "name": "Editor",
        "link": "/red",
        "icon": "fa-gears",
        "target": "newtab",
        "order": 12
    },
    {
        "id": "b2fc7e5b.7dc7c",
        "type": "ui_group",
        "name": "MintNav",
        "tab": "34217460.577dac",
        "order": 1,
        "disp": false,
        "width": 13,
        "collapse": false
    },
    {
        "id": "a336bc7c.eda43",
        "type": "ui_group",
        "name": "AssetsNav",
        "tab": "c2eb85a6.be5128",
        "order": 1,
        "disp": false,
        "width": 13,
        "collapse": false
    },
    {
        "id": "9407fa4c.7f63d8",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "a336bc7c.eda43",
        "order": 4,
        "width": "1",
        "height": 1
    },
    {
        "id": "f5ae9cfe.e2927",
        "type": "ui_group",
        "name": "byContractName",
        "tab": "8a056a57.4af708",
        "order": 6,
        "disp": false,
        "width": "13",
        "collapse": false
    },
    {
        "id": "b8ecbd79.b0666",
        "type": "ui_group",
        "name": "byTokenName",
        "tab": "8a056a57.4af708",
        "order": 7,
        "disp": false,
        "width": "13",
        "collapse": false
    },
    {
        "id": "40325bc7.69df84",
        "type": "ui_group",
        "name": "byPrincipleAddress",
        "tab": "8a056a57.4af708",
        "order": 8,
        "disp": false,
        "width": "13",
        "collapse": false
    },
    {
        "id": "3134e5b0.37b9ba",
        "type": "ui_group",
        "name": "byTransactionID",
        "tab": "8a056a57.4af708",
        "order": 9,
        "disp": false,
        "width": "13",
        "collapse": false
    },
    {
        "id": "51640c7f.5ee354",
        "type": "ui_group",
        "name": "NewPost",
        "tab": "8a056a57.4af708",
        "order": 10,
        "disp": false,
        "width": "13",
        "collapse": false
    },
    {
        "id": "f086e156.9d17b",
        "type": "ui_group",
        "name": "Mainnet Confirmed Transactions",
        "tab": "12ca92d1.ac993d",
        "order": 4,
        "disp": true,
        "width": "13",
        "collapse": true
    },
    {
        "id": "cd33bbcb.590158",
        "type": "ui_group",
        "name": "Testnet Confirmed Transactions",
        "tab": "12ca92d1.ac993d",
        "order": 2,
        "disp": true,
        "width": "13",
        "collapse": true
    },
    {
        "id": "12ca92d1.ac993d",
        "type": "ui_tab",
        "name": "History",
        "icon": "fa-history",
        "order": 11,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "5986cff4.85067",
        "type": "ui_tab",
        "name": "Registrar",
        "icon": "mi-verified_user",
        "order": 10,
        "disabled": false,
        "hidden": true
    },
    {
        "id": "4169470.fb991b8",
        "type": "ui_group",
        "name": "RegistrarNav",
        "tab": "5986cff4.85067",
        "order": 1,
        "disp": false,
        "width": "13",
        "collapse": false
    },
    {
        "id": "b8de1f8f.ccd29",
        "type": "ui_group",
        "name": "RegYes",
        "tab": "5986cff4.85067",
        "order": 2,
        "disp": false,
        "width": "13",
        "collapse": false
    },
    {
        "id": "2433119.0a997ee",
        "type": "ui_group",
        "name": "RegNo",
        "tab": "5986cff4.85067",
        "order": 3,
        "disp": false,
        "width": "13",
        "collapse": false
    },
    {
        "id": "79c53eca.29302",
        "type": "ui_group",
        "name": "RegWTF",
        "tab": "5986cff4.85067",
        "order": 4,
        "disp": false,
        "width": "13",
        "collapse": false
    },
    {
        "id": "ffd631ab.0ac03",
        "type": "ui_group",
        "name": "RegDefault",
        "tab": "5986cff4.85067",
        "order": 5,
        "disp": false,
        "width": "13",
        "collapse": false
    },
    {
        "id": "46da4633.73efe8",
        "type": "ui_group",
        "name": "RegAttempt",
        "tab": "5986cff4.85067",
        "order": 6,
        "disp": false,
        "width": "13",
        "collapse": false
    },
    {
        "id": "29b10f64.f52cf",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "f086e156.9d17b",
        "order": 2,
        "width": 2,
        "height": 1
    },
    {
        "id": "fab77431.c4cd98",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "f086e156.9d17b",
        "order": 4,
        "width": 1,
        "height": 1
    },
    {
        "id": "204f6be7.72a2a4",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "cd33bbcb.590158",
        "order": 2,
        "width": 2,
        "height": 1
    },
    {
        "id": "9745cc9b.e436a",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "cd33bbcb.590158",
        "order": 4,
        "width": 1,
        "height": 1
    },
    {
        "id": "ae1844b2.235ae8",
        "type": "ui_group",
        "name": "Auth",
        "tab": "",
        "order": 1,
        "disp": false,
        "width": "6",
        "collapse": false
    },
    {
        "id": "9bb60872.f72c68",
        "type": "ui_group",
        "name": "RegisterName",
        "tab": "8a056a57.4af708",
        "order": 3,
        "disp": false,
        "width": "13",
        "collapse": false
    },
    {
        "id": "13304427.8cb59c",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "9bb60872.f72c68",
        "order": 10,
        "width": 1,
        "height": 1
    },
    {
        "id": "ac860007.b69aa",
        "type": "ui_group",
        "name": "Balance",
        "tab": "a0d42798.ab3f38",
        "order": 2,
        "disp": false,
        "width": "13",
        "collapse": false
    },
    {
        "id": "40b29c84.e02da4",
        "type": "ui_group",
        "name": "Warning",
        "tab": "34217460.577dac",
        "order": 7,
        "disp": false,
        "width": "13",
        "collapse": false
    },
    {
        "id": "c75785b2.7363d8",
        "type": "ui_group",
        "name": "History Mainnet",
        "tab": "a0d42798.ab3f38",
        "order": 8,
        "disp": true,
        "width": "13",
        "collapse": true
    },
    {
        "id": "20a23299.1e38be",
        "type": "ui_group",
        "name": "History Testnet",
        "tab": "a0d42798.ab3f38",
        "order": 7,
        "disp": true,
        "width": "13",
        "collapse": true
    },
    {
        "id": "7e7643fd.e4b96c",
        "type": "ui_group",
        "name": "MintFT Form",
        "tab": "34217460.577dac",
        "order": 4,
        "disp": false,
        "width": "13",
        "collapse": false
    },
    {
        "id": "91c07e82.a5ad1",
        "type": "ui_group",
        "name": "MintNFT Form",
        "tab": "34217460.577dac",
        "order": 6,
        "disp": false,
        "width": "13",
        "collapse": false
    },
    {
        "id": "de35938.a16f97",
        "type": "ui_group",
        "name": "MintNFT Trait",
        "tab": "34217460.577dac",
        "order": 5,
        "disp": false,
        "width": "13",
        "collapse": false
    },
    {
        "id": "aac5ef5.a75f71",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "b2fc7e5b.7dc7c",
        "order": 2,
        "width": 1,
        "height": 1
    },
    {
        "id": "1d399ac6.504645",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "433bfb40.a488a4",
        "order": 5,
        "width": 11,
        "height": 1
    },
    {
        "id": "59585219.08696c",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "3348dd5e.728a92",
        "order": 4,
        "width": 3,
        "height": 1
    },
    {
        "id": "e58d4143.f3ca3",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "3348dd5e.728a92",
        "order": 5,
        "width": 4,
        "height": 1
    },
    {
        "id": "8cad6c61.63956",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "3348dd5e.728a92",
        "order": 9,
        "width": 2,
        "height": 1
    },
    {
        "id": "e855ad0.3c0155",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "3348dd5e.728a92",
        "order": 10,
        "width": 4,
        "height": 1
    },
    {
        "id": "fe7f6a58.a34e48",
        "type": "ui_group",
        "name": "Testnet Pending Transactions",
        "tab": "12ca92d1.ac993d",
        "order": 1,
        "disp": true,
        "width": "13",
        "collapse": true
    },
    {
        "id": "6fb981cf.21b23",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "69d70456.083fac",
        "order": 5,
        "width": "1",
        "height": 1
    },
    {
        "id": "92bbe7cb.24b5d8",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "ac860007.b69aa",
        "order": 2,
        "width": 1,
        "height": 1
    },
    {
        "id": "b408577a.3e0508",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "93f1cccf.344e5",
        "order": 6,
        "width": 1,
        "height": 1
    },
    {
        "id": "983babaa.5192c8",
        "type": "ui_group",
        "name": "Mainnet Pending Transactions",
        "tab": "12ca92d1.ac993d",
        "order": 3,
        "disp": true,
        "width": "13",
        "collapse": true
    },
    {
        "id": "93894c51.e61b",
        "type": "ui_group",
        "name": "Send",
        "tab": "8c09096f.ba7b78",
        "order": 9,
        "disp": false,
        "width": "13",
        "collapse": false
    },
    {
        "id": "8c09096f.ba7b78",
        "type": "ui_tab",
        "name": "FungibleTokens",
        "icon": "fa-fire",
        "order": 9,
        "disabled": false,
        "hidden": true
    },
    {
        "id": "17428c06.60ee94",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "be1bffc8.e254c",
        "order": 2,
        "width": "7",
        "height": "1"
    },
    {
        "id": "f694fb51.052ac8",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "e5d0847b.1daa38",
        "order": 2,
        "width": "7",
        "height": "2"
    },
    {
        "id": "895cda92.de6dd8",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "de35938.a16f97",
        "order": 3,
        "width": 1,
        "height": 1
    },
    {
        "id": "c6bb1eb5.edd3d",
        "type": "websocket-listener",
        "path": "/ws/publish",
        "wholemsg": "true"
    },
    {
        "id": "a5db9e65.7dd36",
        "type": "websocket-listener",
        "path": "/ws/receive",
        "wholemsg": "true"
    },
    {
        "id": "9c87c795.828e98",
        "type": "ui_tab",
        "d": true,
        "name": "Setup",
        "icon": "mi-settings_applications",
        "order": 1,
        "disabled": false,
        "hidden": true
    },
    {
        "id": "8720d2fe.9f3dd",
        "type": "ui_group",
        "name": "Default",
        "tab": "9c87c795.828e98",
        "order": 1,
        "disp": false,
        "width": "13",
        "collapse": false
    },
    {
        "id": "7355c581.62669c",
        "type": "ui_group",
        "name": "Import",
        "tab": "9c87c795.828e98",
        "order": 3,
        "disp": false,
        "width": "13",
        "collapse": false
    },
    {
        "id": "5cbf4d91.159b54",
        "type": "ui_group",
        "name": "Generate",
        "tab": "9c87c795.828e98",
        "order": 2,
        "disp": false,
        "width": "13",
        "collapse": false
    },
    {
        "id": "f5175a88.b9ffd8",
        "type": "ui_group",
        "name": "Keys",
        "tab": "9c87c795.828e98",
        "order": 4,
        "disp": false,
        "width": "13",
        "collapse": false
    },
    {
        "id": "5b3b110d.6e9d4",
        "type": "ui_group",
        "name": "DefaultBTN",
        "tab": "9c87c795.828e98",
        "order": 5,
        "disp": false,
        "width": "13",
        "collapse": false
    },
    {
        "id": "b40dea74.c10a58",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "5b3b110d.6e9d4",
        "order": 1,
        "width": "11",
        "height": 1
    },
    {
        "id": "c14a5964.b1c868",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "8720d2fe.9f3dd",
        "order": 5,
        "width": "3",
        "height": 1
    },
    {
        "id": "df62b2a0.423f6",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "8720d2fe.9f3dd",
        "order": 3,
        "width": "3",
        "height": 1
    },
    {
        "id": "6c17de78.fd6c4",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "8720d2fe.9f3dd",
        "order": 1,
        "width": "13",
        "height": 1
    },
    {
        "id": "67706d15.b809f4",
        "type": "websocket-client",
        "path": "ws://localhost:30020/remote/object/property",
        "tls": "",
        "wholemsg": "false"
    },
    {
        "id": "9cb2406a.8026b",
        "type": "websocket-listener",
        "path": "/ws/request",
        "wholemsg": "false"
    },
    {
        "id": "8dc250c2.cad34",
        "type": "ui_group",
        "name": "Unreal",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "13",
        "collapse": false
    },
    {
        "id": "a7e634c0.3645d8",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "8720d2fe.9f3dd",
        "order": 6,
        "width": "13",
        "height": 1
    },
    {
        "id": "58ef82a0.ff7bac",
        "type": "ui_group",
        "name": "Default",
        "tab": "9c87c795.828e98",
        "order": 6,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "c8a18e02.7cf15",
        "type": "ui_group",
        "name": "Test Group",
        "tab": "2759ddf1.f3e4c2",
        "order": 1,
        "disp": true,
        "width": "13",
        "collapse": false
    },
    {
        "id": "f3587a4e.056308",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "93f1cccf.344e5",
        "order": 4,
        "width": 1,
        "height": 1
    },
    {
        "id": "a1b48177.63b91",
        "type": "ui_group",
        "name": "Default",
        "tab": "c122ecdc.526d7",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "c122ecdc.526d7",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "order": 4,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "c7ce017b.3c361",
        "type": "ui_group",
        "name": "byChimeDeruptar",
        "tab": "8a056a57.4af708",
        "order": 11,
        "disp": false,
        "width": "13",
        "collapse": false
    },
    {
        "id": "b693f4f5.e40d38",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "c7ce017b.3c361",
        "order": 2,
        "width": "7",
        "height": 1
    },
    {
        "id": "38df3c44.bbde44",
        "type": "ui_tab",
        "name": "DeruptSetup",
        "icon": "dashboard",
        "order": 2,
        "disabled": true,
        "hidden": true
    },
    {
        "id": "13446cb.eebd393",
        "type": "ui_group",
        "name": "Default",
        "tab": "38df3c44.bbde44",
        "order": 1,
        "disp": false,
        "width": "13",
        "collapse": false
    },
    {
        "id": "33213756.e14ba8",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "13446cb.eebd393",
        "order": 1,
        "width": "13",
        "height": 1
    },
    {
        "id": "af31ce51.fc4c3",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "13446cb.eebd393",
        "order": 3,
        "width": 1,
        "height": 1
    },
    {
        "id": "44fcd8f4.358148",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "13446cb.eebd393",
        "order": 5,
        "width": 1,
        "height": 1
    },
    {
        "id": "5e148d81.1a2604",
        "type": "ui_group",
        "name": "Keys",
        "tab": "38df3c44.bbde44",
        "order": 2,
        "disp": false,
        "width": "13",
        "collapse": false
    },
    {
        "id": "89f9ce0b.6d567",
        "type": "ui_tab",
        "name": "DeruptKeys",
        "icon": "dashboard",
        "order": 3,
        "disabled": false,
        "hidden": true
    },
    {
        "id": "74c7f0f9.45b14",
        "type": "ui_group",
        "name": "Warning",
        "tab": "89f9ce0b.6d567",
        "order": 1,
        "disp": false,
        "width": "13",
        "collapse": false
    },
    {
        "id": "1faecc61.c61714",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "bec9f54e.163bf8",
        "order": 1,
        "width": "12",
        "height": 1
    },
    {
        "id": "2759ddf1.f3e4c2",
        "type": "ui_tab",
        "name": "Test Tab",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "8ff35ce4.a1acd",
        "type": "ui_form",
        "z": "53028f3b.590b5",
        "name": "",
        "label": "Import or Generate Wallet",
        "group": "bec9f54e.163bf8",
        "order": 3,
        "width": 13,
        "height": 1,
        "options": [
            {
                "label": "Password (Leave empty if Importing)",
                "value": "password",
                "type": "password",
                "required": false,
                "rows": null
            },
            {
                "label": "Secret Keys (Leave empty if Generating)",
                "value": "secretKey",
                "type": "text",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "password": "",
            "secretKey": ""
        },
        "payload": "",
        "submit": "Import / Generate Wallet",
        "cancel": "",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "x": 170,
        "y": 480,
        "wires": [
            [
                "11ea4e07.ace522"
            ]
        ]
    },
    {
        "id": "fef21303.5661",
        "type": "ui_template",
        "z": "53028f3b.590b5",
        "group": "433bfb40.a488a4",
        "name": "Keys",
        "order": 1,
        "width": 13,
        "height": 2,
        "format": "<h4>Secret Key:</h4>\n<small><small><small>{{msg.payload}}</small></small></small>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 510,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "e7b1f77f.e43e28",
        "type": "ui_template",
        "z": "613e85c9.c6210c",
        "d": true,
        "group": "93f1cccf.344e5",
        "name": "TX Info (Testnet)",
        "order": 7,
        "width": 0,
        "height": 0,
        "format": "{{msg.blockchain}} (Testnet)",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 4660,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "82a2dcd7.0af3c",
        "type": "ui_template",
        "z": "613e85c9.c6210c",
        "group": "de35938.a16f97",
        "name": "TX Info",
        "order": 5,
        "width": 0,
        "height": 0,
        "format": "{{msg.blockchain}}",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 4840,
        "y": 1460,
        "wires": [
            []
        ]
    },
    {
        "id": "5d42e5f8.acbdbc",
        "type": "ui_form",
        "z": "613e85c9.c6210c",
        "name": "",
        "label": "Mint Tokens Form (Mainnet)",
        "group": "7e7643fd.e4b96c",
        "order": 2,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Name",
                "value": "ftname",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Symbol",
                "value": "ftsymbol",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Max Supply",
                "value": "ftmax",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Description",
                "value": "ftinfo",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Token URI",
                "value": "fturi",
                "type": "text",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "ftname": "",
            "ftsymbol": "",
            "ftmax": "",
            "ftinfo": "",
            "fturi": ""
        },
        "payload": "",
        "submit": "Mint",
        "cancel": "",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "x": 140,
        "y": 780,
        "wires": [
            [
                "91c1de09.7f63f",
                "de6ca16a.965d9",
                "e2ab2101.1c932"
            ]
        ]
    },
    {
        "id": "36c18ccc.c68334",
        "type": "ui_form",
        "z": "613e85c9.c6210c",
        "name": "",
        "label": "Mint NFT Form (testnet)",
        "group": "91c07e82.a5ad1",
        "order": 2,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "NFT Name",
                "value": "nftname",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "NFT Description",
                "value": "nftinfo",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "NFT URI",
                "value": "nfturi",
                "type": "text",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "nftname": "",
            "nftinfo": "",
            "nfturi": ""
        },
        "payload": "",
        "submit": "Mint",
        "cancel": "",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "x": 130,
        "y": 1260,
        "wires": [
            [
                "dc7aeb7a.41c8d8"
            ]
        ]
    },
    {
        "id": "e20bf7bd.b8d768",
        "type": "ui_template",
        "z": "f7442446.0c97f8",
        "d": true,
        "group": "583ee0bf.fe5c5",
        "name": "STX List",
        "order": 2,
        "width": 0,
        "height": 0,
        "format": "<h3>STX List</h3>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 700,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "3ec0ff84.583e8",
        "type": "ui_template",
        "z": "f7442446.0c97f8",
        "group": "4079dee5.d84aa",
        "name": "NFT List",
        "order": 2,
        "width": "13",
        "height": "11",
        "format": "<h3>{{msg.payload.total}} Other Asset(s) Owned</h3>\n<table>\n    <tr>\n        <th></th>\n        <th>Asset ID</th>\n        <th>Block</th>        \n        <th></th>\n        <th></th>\n    </tr>\n\n\t<tr ng-if=\"msg.payload.nft_events[0].asset_identifier !== undefined\">\n        <td><img src=\"{{msg.payload.image0}}\" width=\"32\" height=\"32\"> </td>\n        <td><small>{{msg.payload.nft_events[0].asset_identifier}}</small></td>\n        <td>{{msg.payload.nft_events[0].block_height}}</td>     \n        <td>\n            <md-button \n                class=\"md-button\" \n                ng-click=\"send({topic:'transfer', payload:msg.payload.nft_events[0].asset_identifier})\">Transfer\n            </md-button>\n        </td>\n        <td>\n            <md-button \n                class=\"md-button\" \n                ng-click=\"send({topic:'inspect', payload:msg.payload.nft_events[0].asset_identifier})\">Inspect\n            </md-button>\n        </td>\n    </tr>\n\n\t<tr ng-if=\"msg.payload.nft_events[1].asset_identifier !== undefined\">\n        <td><img src=\"{{msg.payload.image1}}\" width=\"32\" height=\"32\"></td>\n        <td><small>{{msg.payload.nft_events[1].asset_identifier}}</small></td>\n        <td>{{msg.payload.nft_events[1].block_height}}</td>     \n        <td>\n            <md-button \n                class=\"md-button\" \n                ng-click=\"send({topic:'transfer', payload:msg.payload.nft_events[1].asset_identifier})\">Transfer\n            </md-button>\n        </td>\n        <td>\n            <md-button \n                class=\"md-button\" \n                ng-click=\"send({topic:'inspect', payload:msg.payload.nft_events[1].asset_identifier})\">Inspect\n            </md-button>\n        </td>        \n    </tr>\n    \n    <tr ng-if=\"msg.payload.nft_events[2].asset_identifier !== undefined\">\n        <td><img src=\"{{msg.payload.image2}}\" width=\"32\" height=\"32\"></td>\n        <td><small>{{msg.payload.nft_events[2].asset_identifier}}</small></td>\n        <td>{{msg.payload.nft_events[2].block_height}}</td>     \n        <td>\n            <md-button \n                class=\"md-button\" \n                ng-click=\"send({topic:'transfer', payload:msg.payload.nft_events[2].asset_identifier})\">Transfer\n            </md-button>\n        </td>\n        <td>\n            <md-button \n                class=\"md-button\" \n                ng-click=\"send({topic:'inspect', payload:msg.payload.nft_events[2].asset_identifier})\">Inspect\n            </md-button>\n        </td>        \n    </tr>\n    \n    <tr ng-if=\"msg.payload.nft_events[3].asset_identifier !== undefined\">\n        <td><img src=\"{{msg.payload.image3}}\" width=\"32\" height=\"32\"></td>\n        <td><small>{{msg.payload.nft_events[3].asset_identifier}}</small></td>\n        <td>{{msg.payload.nft_events[3].block_height}}</td>     \n        <td>\n            <md-button \n                class=\"md-button\" \n                ng-click=\"send({topic:'transfer', payload:msg.payload.nft_events[3].asset_identifier})\">Transfer\n            </md-button>\n        </td>\n        <td>\n            <md-button \n                class=\"md-button\" \n                ng-click=\"send({topic:'inspect', payload:msg.payload.nft_events[3].asset_identifier})\">Inspect\n            </md-button>\n        </td>        \n    </tr>\n    \n    <tr ng-if=\"msg.payload.nft_events[4].asset_identifier !== undefined\">\n        <td><img src=\"{{msg.payload.image4}}\" width=\"32\" height=\"32\"></td>\n        <td><small>{{msg.payload.nft_events[4].asset_identifier}}</small></td>\n        <td>{{msg.payload.nft_events[4].block_height}}</td>     \n        <td>\n            <md-button \n                class=\"md-button\" \n                ng-click=\"send({topic:'transfer', payload:msg.payload.nft_events[4].asset_identifier})\">Transfer\n            </md-button>\n        </td>\n        <td>\n            <md-button \n                class=\"md-button\" \n                ng-click=\"send({topic:'inspect', payload:msg.payload.nft_events[4].asset_identifier})\">Inspect\n            </md-button>\n        </td>        \n    </tr>\n    \n    <tr ng-if=\"msg.payload.nft_events[5].asset_identifier !== undefined\">\n        <td><img src=\"{{msg.payload.image5}}\" width=\"32\" height=\"32\"></td>\n        <td><small>{{msg.payload.nft_events[5].asset_identifier}}</small></td>\n        <td>{{msg.payload.nft_events[5].block_height}}</td>     \n        <td>\n            <md-button \n                class=\"md-button\" \n                ng-click=\"send({topic:'transfer', payload:msg.payload.nft_events[5].asset_identifier})\">Transfer\n            </md-button>\n        </td>\n        <td>\n            <md-button \n                class=\"md-button\" \n                ng-click=\"send({topic:'inspect', payload:msg.payload.nft_events[5].asset_identifier})\">Inspect\n            </md-button>\n        </td>       \n    </tr>\n\n    <tr ng-if=\"msg.payload.nft_events[6].asset_identifier !== undefined\">\n        <td><img src=\"{{msg.payload.image6}}\" width=\"32\" height=\"32\"></td>\n        <td><small>{{msg.payload.nft_events[6].asset_identifier}}</small></td>\n        <td>{{msg.payload.nft_events[6].block_height}}</td>     \n        <td>\n            <md-button \n                class=\"md-button\" \n                ng-click=\"send({topic:'transfer', payload:msg.payload.nft_events[6].asset_identifier})\">Transfer\n            </md-button>\n        </td>\n        <td>\n            <md-button \n                class=\"md-button\" \n                ng-click=\"send({topic:'inspect', payload:msg.payload.nft_events[6].asset_identifier})\">Inspect\n            </md-button>\n        </td>       \n    </tr>\n    <tr ng-if=\"msg.payload.nft_events[7].asset_identifier !== undefined\">\n        <td><img src=\"{{msg.payload.image7}}\" width=\"32\" height=\"32\"></td>\n        <td><small>{{msg.payload.nft_events[7].asset_identifier}}</small></td>\n        <td>{{msg.payload.nft_events[7].block_height}}</td>     \n        <td>\n            <md-button \n                class=\"md-button\" \n                ng-click=\"send({topic:'transfer', payload:msg.payload.nft_events[7].asset_identifier})\">Transfer\n            </md-button>\n        </td>\n        <td>\n            <md-button \n                class=\"md-button\" \n                ng-click=\"send({topic:'inspect', payload:msg.payload.nft_events[7].asset_identifier})\">Inspect\n            </md-button>\n        </td>        \n    </tr>\n    <tr ng-if=\"msg.payload.nft_events[8].asset_identifier !== undefined\">\n        <td><img src=\"{{msg.payload.image8}}\" width=\"32\" height=\"32\"></td>\n        <td><small>{{msg.payload.nft_events[8].asset_identifier}}</small></td>\n        <td>{{msg.payload.nft_events[8].block_height}}</td>     \n        <td>\n            <md-button \n                class=\"md-button\" \n                ng-click=\"send({topic:'transfer', payload:msg.payload.nft_events[8].asset_identifier})\">Transfer\n            </md-button>\n        </td>\n        <td>\n            <md-button \n                class=\"md-button\" \n                ng-click=\"send({topic:'inspect', payload:msg.payload.nft_events[8].asset_identifier})\">Inspect\n            </md-button>\n        </td>       \n    </tr>\n    <tr ng-if=\"msg.payload.nft_events[9].asset_identifier !== undefined\">\n        <td><img src=\"{{msg.payload.image9}}\" width=\"32\" height=\"32\"></td>\n        <td><small>{{msg.payload.nft_events[9].asset_identifier}}</small></td>\n        <td>{{msg.payload.nft_events[9].block_height}}</td>     \n        <td>\n            <md-button \n                class=\"md-button\" \n                ng-click=\"send({topic:'transfer', payload:msg.payload.nft_events[9].asset_identifier})\">Transfer\n            </md-button>\n        </td>\n        <td>\n            <md-button \n                class=\"md-button\" \n                ng-click=\"send({topic:'inspect', payload:msg.payload.nft_events[9].asset_identifier})\">Inspect\n            </md-button>\n        </td>      \n    </tr>\n\n</table>\n\n<small><small>Disclaimer: Max 10 Asset Contracts Listed</small></small>\n\n\n\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 1380,
        "y": 460,
        "wires": [
            [
                "9d1dbe2e.9ce11",
                "230ea4cc.2ff1dc"
            ]
        ]
    },
    {
        "id": "bf0e5775.a2a2c8",
        "type": "ui_button",
        "z": "613e85c9.c6210c",
        "d": true,
        "name": "",
        "group": "93f1cccf.344e5",
        "order": 2,
        "width": "6",
        "height": "1",
        "passthru": false,
        "label": "Deploy FT Interface Contract (Testnet)",
        "tooltip": "THIS IS REQUIRED ONCE (for Fungible Tokens Minting)",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 2650,
        "y": 380,
        "wires": [
            [
                "24c58f0c.4ac51"
            ]
        ]
    },
    {
        "id": "b2f80a6.f1c84f8",
        "type": "ui_button",
        "z": "613e85c9.c6210c",
        "name": "",
        "group": "de35938.a16f97",
        "order": 2,
        "width": "6",
        "height": "1",
        "passthru": false,
        "label": "Deploy NFT Interface Contract (testnet)",
        "tooltip": "THIS IS REQUIRED ONCE (for NFT Minting)",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 2660,
        "y": 1520,
        "wires": [
            [
                "f65c0e25.9c82d"
            ]
        ]
    },
    {
        "id": "3e8bca44.35d1d6",
        "type": "ui_ui_control",
        "z": "53028f3b.590b5",
        "name": "ui change",
        "events": "change",
        "x": 1840,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "ba1e514f.aa131",
        "type": "comment",
        "z": "53028f3b.590b5",
        "name": "Relative to Import / Generate Group",
        "info": "A wallet needs to be instantiated.\nThis basically just means:\n\nSituation A) \n1) Enter a Password\n2) Back up Secret Key (currently displaying)\n\nOR\n\nSituation B)\n1) Enter Secret Key (unencrypted version)\n2) Confirm you have a Backup\n\n\nTodo: Download Buttons for \n1) Unencrypted Keys (w/ warning)\n2) Encrypted Keys Button (w/ warning)\n\n\n* if you only back up an encrypted copy of your secret key, YOU BETTER NOT FORGET YOUR PASSWORD!",
        "x": 200,
        "y": 440,
        "wires": []
    },
    {
        "id": "5064b9ae.d4c998",
        "type": "comment",
        "z": "53028f3b.590b5",
        "name": "Relative to Receive Group",
        "info": "",
        "x": 170,
        "y": 2100,
        "wires": []
    },
    {
        "id": "f23536ee.f30cc8",
        "type": "comment",
        "z": "53028f3b.590b5",
        "name": "Relative to Wallet Navigation Group",
        "info": "",
        "x": 1240,
        "y": 20,
        "wires": []
    },
    {
        "id": "8be75b2d.4c8308",
        "type": "ui_button",
        "z": "53028f3b.590b5",
        "name": "Reveal Send Group",
        "group": "69d70456.083fac",
        "order": 1,
        "width": "5",
        "height": "1",
        "passthru": false,
        "label": "Send",
        "tooltip": "Navigate to Send",
        "color": "",
        "bgcolor": "",
        "icon": "fa-arrow-up",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 1190,
        "y": 60,
        "wires": [
            [
                "599fb6ef.c2dcd8"
            ]
        ]
    },
    {
        "id": "cc90dbd.872e028",
        "type": "ui_button",
        "z": "53028f3b.590b5",
        "name": "Reveal Receive Group",
        "group": "69d70456.083fac",
        "order": 4,
        "width": "5",
        "height": "1",
        "passthru": false,
        "label": "Receive",
        "tooltip": "Navigate to Receive",
        "color": "",
        "bgcolor": "",
        "icon": "fa-arrow-down",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 1180,
        "y": 100,
        "wires": [
            [
                "d35e73d8.237f"
            ]
        ]
    },
    {
        "id": "b22caa0f.5ca9e8",
        "type": "ui_button",
        "z": "53028f3b.590b5",
        "name": "Reveal Keys Group",
        "group": "69d70456.083fac",
        "order": 6,
        "width": 1,
        "height": 1,
        "passthru": false,
        "label": "",
        "tooltip": "Navigate to Keys",
        "color": "",
        "bgcolor": "orange",
        "icon": "fa-key",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 1190,
        "y": 140,
        "wires": [
            [
                "d5980233.7abec"
            ]
        ]
    },
    {
        "id": "d4b0ee44.dbde",
        "type": "comment",
        "z": "53028f3b.590b5",
        "name": "Relative to Keys Group",
        "info": "",
        "x": 160,
        "y": 820,
        "wires": []
    },
    {
        "id": "2d7039.df9b8fc8",
        "type": "ui_button",
        "z": "53028f3b.590b5",
        "d": true,
        "name": "Download Backup",
        "group": "433bfb40.a488a4",
        "order": 2,
        "width": 2,
        "height": 1,
        "passthru": false,
        "label": "",
        "tooltip": "Warning: This downloads an unencrypted copy of your keys to this current machine.",
        "color": "",
        "bgcolor": "",
        "icon": "fa-download",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 150,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "8776d946.30be38",
        "type": "ui_ui_control",
        "z": "53028f3b.590b5",
        "name": "ui change",
        "events": "change",
        "x": 920,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "c83da5a0.82f8f8",
        "type": "ui_form",
        "z": "53028f3b.590b5",
        "name": "Send STX Form",
        "label": "",
        "group": "a0be6719.4b0e38",
        "order": 2,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Send To",
                "value": "stxdestination",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Amount",
                "value": "stxamount",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Memo",
                "value": "stxmemo",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Mainnet TX",
                "value": "stxnetwork",
                "type": "checkbox",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "stxdestination": "",
            "stxamount": "",
            "stxmemo": "",
            "stxnetwork": false
        },
        "payload": "",
        "submit": "Send",
        "cancel": "Clear",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "x": 140,
        "y": 1740,
        "wires": [
            [
                "64c740c.17d6fc"
            ]
        ]
    },
    {
        "id": "75902f2d.392ba",
        "type": "comment",
        "z": "53028f3b.590b5",
        "name": "Relative to Send Group",
        "info": "",
        "x": 160,
        "y": 1660,
        "wires": []
    },
    {
        "id": "dbe51251.9596a",
        "type": "ui_ui_control",
        "z": "53028f3b.590b5",
        "name": "ui change",
        "events": "change",
        "x": 1660,
        "y": 1660,
        "wires": [
            []
        ]
    },
    {
        "id": "303d1f77.b3aa",
        "type": "ui_toast",
        "z": "53028f3b.590b5",
        "position": "top right",
        "displayTime": "3",
        "highlight": "green",
        "sendall": true,
        "outputs": 0,
        "ok": "Acknowledged",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "Upon Funds Received Notification",
        "x": 360,
        "y": 2680,
        "wires": []
    },
    {
        "id": "75e4c65c.98eba8",
        "type": "function",
        "z": "53028f3b.590b5",
        "name": "show Keys group",
        "func": "msg.payload = {\n  \"group\": {\n    \"hide\": [\n      \"Wallet_ImportGen\",\n      \"Wallet_WalletNav\",\n      \"Wallet_Balance\",\n      \"Wallet_Send\",\n      \"Wallet_Receive\",\n      \"Wallet_History_Mainnet\",\n      \"Wallet_History_Testnet\"\n    ],\n    \"show\": [\n      \"Wallet_Keys\"\n    ],\n    \"focus\": true\n  }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 520,
        "wires": [
            [
                "8776d946.30be38"
            ]
        ]
    },
    {
        "id": "b95d61cf.d0dc",
        "type": "function",
        "z": "53028f3b.590b5",
        "name": "show all wallet groups",
        "func": "msg.payload = {\n  \"group\": {\n    \"hide\": [\n      \"\"\n    ],\n    \"show\": [\n      \"Wallet_ImportGen\",\n      \"Wallet_WalletNav\",\n      \"Wallet_Balance\",      \n      \"Wallet_Keys\",\n      \"Wallet_Send\",\n      \"Wallet_Receive\",\n      \"Wallet_History_Mainnet\",\n      \"Wallet_History_Testnet\"\n    ],\n    \"focus\": true\n  }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 140,
        "wires": [
            [
                "6dbe7d70.aa1854"
            ]
        ]
    },
    {
        "id": "599fb6ef.c2dcd8",
        "type": "function",
        "z": "53028f3b.590b5",
        "name": "show Send STX group",
        "func": "msg.payload = {\n  \"group\": {\n    \"hide\": [\n      \"Wallet_ImportGen\",\n      \"Wallet_Keys\",\n      \"Wallet_WalletNav\",\n      \"Wallet_Receive\"\n    ],\n    \"show\": [\n      \"Wallet_Send\",\n      \"Wallet_Balance\",\n      \"Wallet_History_Mainnet\",\n      \"Wallet_History_Testnet\"\n    ],\n    \"focus\": true\n  }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1420,
        "y": 60,
        "wires": [
            [
                "3e8bca44.35d1d6"
            ]
        ]
    },
    {
        "id": "d35e73d8.237f",
        "type": "function",
        "z": "53028f3b.590b5",
        "name": "show Receive group",
        "func": "msg.payload = {\n  \"group\": {\n    \"hide\": [\n      \"Wallet_ImportGen\",\n      \"Wallet_Keys\",\n      \"Wallet_WalletNav\",\n      \"Wallet_Send\"\n    ],\n    \"show\": [\n      \"Wallet_Receive\",\n      \"Wallet_Balance\",\n      \"Wallet_History_Mainnet\",\n      \"Wallet_History_Testnet\"\n    ],\n    \"focus\": true\n  }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1420,
        "y": 100,
        "wires": [
            [
                "3e8bca44.35d1d6",
                "9ae8d2b0.46094"
            ]
        ]
    },
    {
        "id": "d5980233.7abec",
        "type": "function",
        "z": "53028f3b.590b5",
        "name": "show Keys group",
        "func": "msg.payload = {\n  \"group\": {\n    \"hide\": [\n      \"Wallet_ImportGen\",\n      \"Wallet_Receive\",\n      \"Wallet_WalletNav\",\n      \"Wallet_Send\",\n      \"Wallet_History_Mainnet\",\n      \"Wallet_History_Testnet\"\n    ],\n    \"show\": [\n      \"Wallet_Keys\"\n    ],\n    \"focus\": true\n  }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1410,
        "y": 140,
        "wires": [
            [
                "3e8bca44.35d1d6"
            ]
        ]
    },
    {
        "id": "3e7fd97b.e3c436",
        "type": "function",
        "z": "53028f3b.590b5",
        "name": "hide all wallet groups",
        "func": "msg.payload = {\n  \"group\": {\n    \"hide\": [\n      \"Wallet_ImportGen\",\n      \"Wallet_WalletNav\",\n      \"Wallet_Balance\",\n      \"Wallet_Keys\",\n      \"Wallet_Send\",\n      \"Wallet_Receive\",\n      \"Wallet_History_Mainnet\",\n      \"Wallet_History_Testnet\"\n    ],\n    \"show\": [\n      \"\"\n    ],\n    \"focus\": true\n  }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 180,
        "wires": [
            [
                "6dbe7d70.aa1854"
            ]
        ]
    },
    {
        "id": "41c98019.533a3",
        "type": "function",
        "z": "53028f3b.590b5",
        "name": "show default import generate group",
        "func": "msg.payload = {\n  \"group\": {\n    \"hide\": [\n      \"Wallet_WalletNav\",\n      \"Wallet_Balance\",\n      \"Wallet_Keys\",\n      \"Wallet_Send\",\n      \"Wallet_Receive\",\n      \"Wallet_History_Mainnet\",\n      \"Wallet_History_Testnet\"\n    ],\n    \"show\": [\n      \"Wallet_ImportGen\"\n    ],\n    \"focus\": true\n  }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 60,
        "wires": [
            [
                "6dbe7d70.aa1854"
            ]
        ]
    },
    {
        "id": "619bcc3f.160834",
        "type": "inject",
        "z": "53028f3b.590b5",
        "name": "show wallet all",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 140,
        "wires": [
            [
                "b95d61cf.d0dc"
            ]
        ]
    },
    {
        "id": "c363a8e2.a03df8",
        "type": "inject",
        "z": "53028f3b.590b5",
        "name": "hide wallet all",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 180,
        "wires": [
            [
                "3e7fd97b.e3c436"
            ]
        ]
    },
    {
        "id": "6dbe7d70.aa1854",
        "type": "ui_ui_control",
        "z": "53028f3b.590b5",
        "name": "debug ui changer",
        "events": "change",
        "x": 870,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "aa76ef29.88857",
        "type": "function",
        "z": "53028f3b.590b5",
        "name": "show Wallet Nav",
        "func": "msg.payload = {\n  \"group\": {\n    \"hide\": [\n      \"Wallet_ImportGen\",\n      \"Wallet_Keys\",\n      \"Wallet_Send\",\n      \"Wallet_Receive\"\n    ],\n    \"show\": [\n      \"Wallet_WalletNav\",\n      \"Wallet_Balance\",\n      \"Wallet_History_Mainnet\",\n      \"Wallet_History_Testnet\"\n    ],\n    \"focus\": true\n  }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 220,
        "wires": [
            [
                "6dbe7d70.aa1854"
            ]
        ]
    },
    {
        "id": "fec4c334.41bb7",
        "type": "inject",
        "z": "53028f3b.590b5",
        "name": "show wallet nav",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 220,
        "wires": [
            [
                "aa76ef29.88857"
            ]
        ]
    },
    {
        "id": "ab1da12a.d30f4",
        "type": "link in",
        "z": "53028f3b.590b5",
        "name": "Back to WalletNav",
        "links": [
            "5a906687.b83398",
            "7f288c7.b333674"
        ],
        "x": 1235,
        "y": 180,
        "wires": [
            [
                "c2bce8bc.c88598"
            ]
        ]
    },
    {
        "id": "5a906687.b83398",
        "type": "link out",
        "z": "53028f3b.590b5",
        "name": "Back to WalletNav (Send)",
        "links": [
            "ab1da12a.d30f4"
        ],
        "x": 295,
        "y": 1700,
        "wires": []
    },
    {
        "id": "a32ccd5c.cb02b",
        "type": "ui_button",
        "z": "53028f3b.590b5",
        "name": "Back Button",
        "group": "a0be6719.4b0e38",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Back",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "fa-back",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 130,
        "y": 1700,
        "wires": [
            [
                "5a906687.b83398"
            ]
        ]
    },
    {
        "id": "92aa6c86.c6a3",
        "type": "ui_button",
        "z": "53028f3b.590b5",
        "name": "",
        "group": "433bfb40.a488a4",
        "order": 3,
        "width": 11,
        "height": 1,
        "passthru": false,
        "label": "YES, I HAVE MADE A BACK UP, AND I AM READY TO PROCEED",
        "tooltip": "WARNING: DO NOT LOSE YOUR SECRET KEYS OR FORGET YOUR PASSWORD",
        "color": "",
        "bgcolor": "orange",
        "icon": "fa-warning",
        "payload": "WARNING: DO NOT LOSE YOUR SECRET KEYS OR FORGET YOUR PASSWORD!",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 300,
        "y": 960,
        "wires": [
            [
                "aab38fff.766ac",
                "ef111e21.a6a",
                "4aad4ee9.9d408"
            ]
        ]
    },
    {
        "id": "4ffc51f.ae497b",
        "type": "function",
        "z": "53028f3b.590b5",
        "name": "show Wallet Nav group",
        "func": "msg.payload = {\n  \"group\": {\n    \"hide\": [\n      \"Wallet_ImportGen\",\n      \"Wallet_Keys\",\n      \"Wallet_Send\",\n      \"Wallet_Receive\"\n    ],\n    \"show\": [\n      \"Wallet_WalletNav\",\n      \"Wallet_Balance\",\n      \"Wallet_History_Mainnet\",\n      \"Wallet_History_Testnet\"\n    ],\n    \"focus\": true\n  }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 940,
        "wires": [
            [
                "19547923.f698c7"
            ]
        ]
    },
    {
        "id": "19547923.f698c7",
        "type": "ui_ui_control",
        "z": "53028f3b.590b5",
        "name": "ui change",
        "events": "change",
        "x": 1240,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "f7b60a2c.0899d8",
        "type": "ui_button",
        "z": "53028f3b.590b5",
        "name": "Back Button",
        "group": "3348dd5e.728a92",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Back",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "fa-back",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 730,
        "y": 2100,
        "wires": [
            [
                "7f288c7.b333674"
            ]
        ]
    },
    {
        "id": "7f288c7.b333674",
        "type": "link out",
        "z": "53028f3b.590b5",
        "name": "Back to WalletNav (Receive)",
        "links": [
            "ab1da12a.d30f4"
        ],
        "x": 875,
        "y": 2100,
        "wires": []
    },
    {
        "id": "9c1d91f6.ade66",
        "type": "ui_text_input",
        "z": "42c07592.8d970c",
        "name": "Search Field",
        "label": "",
        "tooltip": "Search Input",
        "group": "d506506a.83f12",
        "order": 1,
        "width": 6,
        "height": 1,
        "passthru": true,
        "mode": "text",
        "delay": "0",
        "topic": "searchinput",
        "topicType": "str",
        "x": 90,
        "y": 2780,
        "wires": [
            [
                "1ae11b46.bb67d5",
                "27e68243.aae18e"
            ]
        ]
    },
    {
        "id": "31abf2da.47ce9e",
        "type": "ui_button",
        "z": "42c07592.8d970c",
        "name": "Profile BTN",
        "group": "d506506a.83f12",
        "order": 4,
        "width": 1,
        "height": 1,
        "passthru": false,
        "label": "",
        "tooltip": "Your Profile",
        "color": "",
        "bgcolor": "",
        "icon": "fa-user-circle",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 150,
        "y": 2180,
        "wires": [
            [
                "ff4526e0.2d5308",
                "50fe9d62.71ec54",
                "a690cc07.004f"
            ]
        ]
    },
    {
        "id": "4441efbe.eecb4",
        "type": "ui_template",
        "z": "42c07592.8d970c",
        "group": "be1bffc8.e254c",
        "name": "Results by Name (Found) Info",
        "order": 6,
        "width": "7",
        "height": "2",
        "format": "<small>{{msg.depositaddress}}</small>\n<p>Bio: {{msg.deruptar}} </p>\n\n\n\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 1670,
        "y": 2880,
        "wires": [
            []
        ]
    },
    {
        "id": "f092708.971a79",
        "type": "ui_button",
        "z": "42c07592.8d970c",
        "name": "Home",
        "group": "d506506a.83f12",
        "order": 3,
        "width": 1,
        "height": 1,
        "passthru": false,
        "label": "",
        "tooltip": "Feed Home",
        "color": "",
        "bgcolor": "",
        "icon": "fa-home",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 70,
        "y": 1100,
        "wires": [
            [
                "c9d3b79d.f9a488"
            ]
        ]
    },
    {
        "id": "9cc3c90.0e85138",
        "type": "function",
        "z": "42c07592.8d970c",
        "name": "show Results byName",
        "func": "msg.payload = {\n  \"group\": {\n    \"hide\": [\n      \"Feed_Feed\",\n      \"Feed_NewPost\",\n      \"Feed_RegisterName\",      \n      \"Feed_Profile\",\n      \"Feed_byContractName\",\n      \"Feed_byTokenName\",\n      \"Feed_byPrincipleAddress\",\n      \"Feed_byTransactionID\",\n      \"Feed_byChimeDeruptar\"\n    ],\n    \"show\": [\n      \"Feed_Header\",\n      \"Feed_byName\"\n    ],\n    \"focus\": true\n  }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 2500,
        "wires": [
            [
                "697b50a.2220ab"
            ]
        ]
    },
    {
        "id": "9a974bff.85c4f8",
        "type": "function",
        "z": "42c07592.8d970c",
        "name": "show Profile with Reg Name Button Button",
        "func": "msg.payload = {\n  \"group\": {\n    \"hide\": [\n      \"Feed_Feed\",\n      \"Feed_NewPost\",\n      \"Feed_byContractName\",\n      \"Feed_byTokenName\",\n      \"Feed_byPrincipleAddress\",\n      \"Feed_byTransactionID\",\n      \"Feed_byName\",\n      \"Feed_byChimeDeruptar\"\n    ],\n    \"show\": [\n      \"Feed_Header\",\n      \"Feed_Profile\",\n      \"Feed_RegisterName\"\n    ],\n    \"focus\": true\n  }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 2160,
        "wires": [
            [
                "869168df.0b5888"
            ]
        ]
    },
    {
        "id": "c9d3b79d.f9a488",
        "type": "function",
        "z": "42c07592.8d970c",
        "name": "show Feed",
        "func": "msg.payload = {\n  \"group\": {\n    \"hide\": [\n      \"Feed_Profile\",\n      \"Feed_RegisterName\",\n      \"Feed_NewPost\",\n      \"Feed_byContractName\",\n      \"Feed_byTokenName\",\n      \"Feed_byPrincipleAddress\",\n      \"Feed_byTransactionID\",\n      \"Feed_byChimeDeruptar\",      \n      \"Feed_byName\"\n    ],\n    \"show\": [\n      \"Feed_Header\",\n      \"Feed_Feed\"\n    ],\n    \"focus\": true\n  }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 1100,
        "wires": [
            [
                "f9dcaec2.8526d",
                "8e77cb03.8eda78",
                "d0c4fb2c.082848",
                "28edd09c.affd2"
            ]
        ]
    },
    {
        "id": "869168df.0b5888",
        "type": "ui_ui_control",
        "z": "42c07592.8d970c",
        "name": "",
        "events": "all",
        "x": 1340,
        "y": 2160,
        "wires": [
            []
        ]
    },
    {
        "id": "7a46035.a4068fc",
        "type": "ui_dropdown",
        "z": "42c07592.8d970c",
        "name": "Search Type",
        "label": "",
        "tooltip": "Search Type",
        "place": "",
        "group": "d506506a.83f12",
        "order": 2,
        "width": 3,
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "by Name",
                "value": "fqn",
                "type": "str"
            },
            {
                "label": "by Transaction ID",
                "value": "txid",
                "type": "str"
            },
            {
                "label": "by Contract Name",
                "value": "bcn",
                "type": "str"
            },
            {
                "label": "by Token Name",
                "value": "btn",
                "type": "str"
            },
            {
                "label": "by Principle Address",
                "value": "bpa",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "searchtype",
        "topicType": "str",
        "x": 90,
        "y": 2560,
        "wires": [
            [
                "aca7dc96.8b27a",
                "1ae11b46.bb67d5",
                "62a9e217.4a2bcc"
            ]
        ]
    },
    {
        "id": "697b50a.2220ab",
        "type": "ui_ui_control",
        "z": "42c07592.8d970c",
        "name": "",
        "events": "all",
        "x": 1040,
        "y": 2540,
        "wires": [
            []
        ]
    },
    {
        "id": "f9dcaec2.8526d",
        "type": "ui_ui_control",
        "z": "42c07592.8d970c",
        "name": "",
        "events": "all",
        "x": 400,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "56f4ac51.d2f784",
        "type": "comment",
        "z": "42c07592.8d970c",
        "name": "Relative to Profiles",
        "info": "",
        "x": 170,
        "y": 2140,
        "wires": []
    },
    {
        "id": "495cf799.4f5f78",
        "type": "comment",
        "z": "42c07592.8d970c",
        "name": "Relative to Searching",
        "info": "",
        "x": 120,
        "y": 2500,
        "wires": []
    },
    {
        "id": "d6791f8.0d4e9e",
        "type": "comment",
        "z": "42c07592.8d970c",
        "name": "Relative to Feed Home",
        "info": "",
        "x": 120,
        "y": 1060,
        "wires": []
    },
    {
        "id": "8e75a447.bdaee8",
        "type": "function",
        "z": "613e85c9.c6210c",
        "name": "show Mint FT",
        "func": "msg.payload = {\n  \"group\": {\n    \"hide\": [\n      \"Minting_MintNav\",\n      \"Minting_MintNFT\",\n      \"Minting_MintNFT_Trait\",\n      \"Minting_MintNFT_Form\",\n      \"Minting_MintFT_Form\"\n    ],\n    \"show\": [\n      \"Minting_MintFT_Trait\"\n    ],\n    \"focus\": true\n  }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "fb875802.6b9498",
        "type": "function",
        "z": "613e85c9.c6210c",
        "name": "show Mint NFT",
        "func": "msg.payload = {\n  \"group\": {\n    \"hide\": [\n      \"Minting_MintNav\",\n      \"Minting_MintFT\",\n      \"Minting_MintFT_Trait\",\n      \"Minting_MintFT_Form\",\n      \"Minting_MintNFT_Form\"\n    ],\n    \"show\": [\n      \"Minting_MintNFT\",\n      \"Minting_MintNFT_Trait\",\n    ],\n    \"focus\": true\n  }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "a64ba7f9.9b1058",
        "type": "ui_button",
        "z": "613e85c9.c6210c",
        "name": "",
        "group": "b2fc7e5b.7dc7c",
        "order": 1,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "Mint Tokens",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 130,
        "y": 320,
        "wires": [
            [
                "723163e0.c1b44c"
            ]
        ]
    },
    {
        "id": "e536ab34.ec5928",
        "type": "ui_button",
        "z": "613e85c9.c6210c",
        "name": "",
        "group": "b2fc7e5b.7dc7c",
        "order": 3,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "Mint NFTs",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 120,
        "y": 360,
        "wires": [
            [
                "f0d77659.2d1208"
            ]
        ]
    },
    {
        "id": "69041be7.6e6554",
        "type": "ui_button",
        "z": "613e85c9.c6210c",
        "name": "Back (FT Trait)",
        "group": "93f1cccf.344e5",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Back",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 140,
        "y": 120,
        "wires": [
            [
                "3e840dfd.8c84b2"
            ]
        ]
    },
    {
        "id": "9706e8dc.3274b8",
        "type": "ui_ui_control",
        "z": "613e85c9.c6210c",
        "name": "",
        "events": "all",
        "x": 720,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "3e840dfd.8c84b2",
        "type": "function",
        "z": "613e85c9.c6210c",
        "name": "show Mint Nav",
        "func": "msg.payload = {\n  \"group\": {\n    \"hide\": [\n      \"Minting_MintFT\",\n      \"Minting_MintNFT\",\n      \"Minting_MintFT_Trait\",\n      \"Minting_MintNFT_Trait\",\n      \"Minting_MintFT_Form\",\n      \"Minting_MintNFT_Form\"\n    ],\n    \"show\": [\n      \"Minting_MintNav\"\n    ],\n    \"focus\": true\n  }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 80,
        "wires": [
            [
                "9706e8dc.3274b8"
            ]
        ]
    },
    {
        "id": "572ef062.2451d",
        "type": "ui_button",
        "z": "613e85c9.c6210c",
        "name": "Back (NFT Trait)",
        "group": "de35938.a16f97",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Back",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 140,
        "y": 160,
        "wires": [
            [
                "3e840dfd.8c84b2"
            ]
        ]
    },
    {
        "id": "875bb725.1f41c8",
        "type": "ui_button",
        "z": "f7442446.0c97f8",
        "d": true,
        "name": "",
        "group": "a336bc7c.eda43",
        "order": 1,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "My STX",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 140,
        "y": 220,
        "wires": [
            [
                "766120a8.82ec"
            ]
        ]
    },
    {
        "id": "a847a12a.32176",
        "type": "ui_button",
        "z": "f7442446.0c97f8",
        "name": "",
        "group": "a336bc7c.eda43",
        "order": 3,
        "width": "6",
        "height": 1,
        "passthru": false,
        "label": "My Tokens",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 90,
        "y": 960,
        "wires": [
            [
                "b6514d9a.4695c",
                "5cb1010a.23a41",
                "788ea147.23459"
            ]
        ]
    },
    {
        "id": "a3aa0a48.6af878",
        "type": "ui_button",
        "z": "f7442446.0c97f8",
        "name": "",
        "group": "a336bc7c.eda43",
        "order": 5,
        "width": "6",
        "height": 1,
        "passthru": false,
        "label": "Other Assets",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 150,
        "y": 420,
        "wires": [
            [
                "a621f66c.a1e8e8",
                "d254b10f.e6fea"
            ]
        ]
    },
    {
        "id": "766120a8.82ec",
        "type": "function",
        "z": "f7442446.0c97f8",
        "name": "show STX Hodl",
        "func": "msg.payload = {\n  \"group\": {\n    \"hide\": [\n      \"Assets_AssetsNav\",\n      \"Assets_Token_Hodl\",\n      \"Assets_NFT_Hodl\"\n    ],\n    \"show\": [\n      \"Assets_STX_Hodl\"\n    ],\n    \"focus\": true\n  }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 220,
        "wires": [
            [
                "dc8e6a9f.da7e58"
            ]
        ]
    },
    {
        "id": "b6514d9a.4695c",
        "type": "function",
        "z": "f7442446.0c97f8",
        "name": "show Token Hodl",
        "func": "msg.payload = {\n  \"group\": {\n    \"hide\": [\n      \"Assets_AssetsNav\",\n      \"Assets_STX_Hodl\",\n      \"Assets_NFT_Hodl\"\n    ],\n    \"show\": [\n      \"Assets_Token_Hodl\"\n    ],\n    \"focus\": true\n  }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 860,
        "wires": [
            [
                "6486e8f2.2b5ba8"
            ]
        ]
    },
    {
        "id": "a621f66c.a1e8e8",
        "type": "function",
        "z": "f7442446.0c97f8",
        "name": "show NFT Hodl",
        "func": "msg.payload = {\n  \"group\": {\n    \"hide\": [\n      \"Assets_AssetsNav\",\n      \"Assets_Token_Hodl\",\n      \"Assets_STX_Hodl\"\n    ],\n    \"show\": [\n      \"Assets_NFT_Hodl\"\n    ],\n    \"focus\": true\n  }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 420,
        "wires": [
            [
                "d0c88850.42e3f8"
            ]
        ]
    },
    {
        "id": "6486e8f2.2b5ba8",
        "type": "ui_ui_control",
        "z": "f7442446.0c97f8",
        "name": "",
        "events": "all",
        "x": 540,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "d0c88850.42e3f8",
        "type": "ui_ui_control",
        "z": "f7442446.0c97f8",
        "name": "",
        "events": "all",
        "x": 900,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "dc8e6a9f.da7e58",
        "type": "ui_ui_control",
        "z": "f7442446.0c97f8",
        "name": "",
        "events": "all",
        "x": 900,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "b071c2ae.98891",
        "type": "function",
        "z": "f7442446.0c97f8",
        "name": "show AssetsNav",
        "func": "msg.payload = {\n  \"group\": {\n    \"hide\": [\n      \"Assets_STX_Hodl\",\n      \"Assets_Token_Hodl\",\n      \"Assets_NFT_Hodl\"\n    ],\n    \"show\": [\n      \"Assets_AssetsNav\"\n    ],\n    \"focus\": true\n  }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 80,
        "wires": [
            [
                "f489d370.a3f58"
            ]
        ]
    },
    {
        "id": "946ce368.259c4",
        "type": "ui_button",
        "z": "f7442446.0c97f8",
        "d": true,
        "name": "Back (STX Hodl)",
        "group": "583ee0bf.fe5c5",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Back",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 170,
        "y": 260,
        "wires": [
            [
                "b7c045b5.ce7b68"
            ]
        ]
    },
    {
        "id": "bae8fcf5.8fe8",
        "type": "link in",
        "z": "f7442446.0c97f8",
        "name": "Back to AssetsNav",
        "links": [
            "b7c045b5.ce7b68",
            "41054bc1.8381a4",
            "e57ef1a9.83eda",
            "18e0b33a.b8540d",
            "d3afe6ff.e83ac8"
        ],
        "x": 255,
        "y": 80,
        "wires": [
            [
                "b071c2ae.98891"
            ]
        ]
    },
    {
        "id": "b7c045b5.ce7b68",
        "type": "link out",
        "z": "f7442446.0c97f8",
        "name": "Back (STX Hodl)",
        "links": [
            "bae8fcf5.8fe8"
        ],
        "x": 315,
        "y": 260,
        "wires": []
    },
    {
        "id": "18e0b33a.b8540d",
        "type": "link out",
        "z": "f7442446.0c97f8",
        "name": "Back (Token Hodl)",
        "links": [
            "bae8fcf5.8fe8"
        ],
        "x": 455,
        "y": 780,
        "wires": []
    },
    {
        "id": "d3afe6ff.e83ac8",
        "type": "link out",
        "z": "f7442446.0c97f8",
        "name": "Back (NFT Hodl)",
        "links": [
            "bae8fcf5.8fe8"
        ],
        "x": 315,
        "y": 300,
        "wires": []
    },
    {
        "id": "642359d2.46c568",
        "type": "ui_button",
        "z": "f7442446.0c97f8",
        "name": "Back (Token Hodl)",
        "group": "2e2fb22f.78448e",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Back",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 310,
        "y": 780,
        "wires": [
            [
                "18e0b33a.b8540d"
            ]
        ]
    },
    {
        "id": "4487b5f5.444c5c",
        "type": "ui_button",
        "z": "f7442446.0c97f8",
        "name": "Back (NFT Hodl)",
        "group": "4079dee5.d84aa",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Back",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 170,
        "y": 300,
        "wires": [
            [
                "d3afe6ff.e83ac8"
            ]
        ]
    },
    {
        "id": "f489d370.a3f58",
        "type": "ui_ui_control",
        "z": "f7442446.0c97f8",
        "name": "",
        "events": "all",
        "x": 900,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "841468ca.b4abe8",
        "type": "comment",
        "z": "53028f3b.590b5",
        "name": "Relative to Wallet Nav Defaults",
        "info": "need to check for keys \nthen if not found default",
        "x": 130,
        "y": 20,
        "wires": []
    },
    {
        "id": "282a4696.77ccaa",
        "type": "inject",
        "z": "613e85c9.c6210c",
        "name": "default",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "15",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 80,
        "wires": [
            [
                "3e840dfd.8c84b2"
            ]
        ]
    },
    {
        "id": "747f392.a83a0c8",
        "type": "link in",
        "z": "e83b2318.6f5c6",
        "name": "to set Globals",
        "links": [
            "2daab08b.7244f",
            "7dc1b3fe.2ad0dc"
        ],
        "x": 135,
        "y": 60,
        "wires": [
            [
                "72d7bed8.b0365",
                "513b5f96.c46f",
                "744187ca.a29598",
                "c071fb7c.7f1528",
                "5a403cf1.054184",
                "943d3e7.afb63c",
                "dd43e46d.8e4b58",
                "a9991487.0825e8"
            ]
        ]
    },
    {
        "id": "1266fa09.3beff6",
        "type": "change",
        "z": "e83b2318.6f5c6",
        "name": "set depositaddress",
        "rules": [
            {
                "t": "move",
                "p": "depositaddress",
                "pt": "msg",
                "to": "depositaddress",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 530,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "dcc74cec.0f8bc",
        "type": "inject",
        "z": "f7442446.0c97f8",
        "name": "default",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 80,
        "wires": [
            [
                "b071c2ae.98891"
            ]
        ]
    },
    {
        "id": "2daab08b.7244f",
        "type": "link out",
        "z": "53028f3b.590b5",
        "name": "pass to Globals",
        "links": [
            "747f392.a83a0c8"
        ],
        "x": 655,
        "y": 440,
        "wires": []
    },
    {
        "id": "8636d457.30a4c8",
        "type": "function",
        "z": "53028f3b.590b5",
        "name": "generate deposit address 0 (Mainnet)",
        "func": "//var nt = msg.gnt; //set var nt dynamically\nvar nt = 0; // set var nt as Mainnet \n//var nt = 128; // set var nt as TestNet\n\n\nconst obj = {\n    account : msg.payload.wallet.accounts[0],\n    transactionVersion : nt\n};\n\nconst address = stacksWalletSdk.getStxAddress(obj);\n\nmsg.depositaddress = address;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "stacksWalletSdk",
                "module": "@stacks/wallet-sdk"
            }
        ],
        "x": 790,
        "y": 560,
        "wires": [
            [
                "ddb791f7.87e8",
                "8d24959.aba6a68",
                "57e2ecc0.94e904"
            ]
        ]
    },
    {
        "id": "ddb791f7.87e8",
        "type": "link out",
        "z": "53028f3b.590b5",
        "name": "pass to Global (set deposit address 0 Mainnet)",
        "links": [
            "ecae4fe5.c96a1"
        ],
        "x": 1015,
        "y": 580,
        "wires": []
    },
    {
        "id": "ecae4fe5.c96a1",
        "type": "link in",
        "z": "e83b2318.6f5c6",
        "name": "to set Global (deposit address 0 Mainnet)",
        "links": [
            "ddb791f7.87e8"
        ],
        "x": 155,
        "y": 500,
        "wires": [
            [
                "1266fa09.3beff6"
            ]
        ]
    },
    {
        "id": "72d7bed8.b0365",
        "type": "change",
        "z": "e83b2318.6f5c6",
        "name": "set keys (encrypted)",
        "rules": [
            {
                "t": "move",
                "p": "payload.wallet.encryptedSecretKey",
                "pt": "msg",
                "to": "keys",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 540,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "873657ef.83d408",
        "type": "debug",
        "z": "53028f3b.590b5",
        "name": "Wallet Generate Debugger",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 480,
        "wires": []
    },
    {
        "id": "8d24959.aba6a68",
        "type": "debug",
        "z": "53028f3b.590b5",
        "name": "Address Generate Debugger",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 560,
        "wires": []
    },
    {
        "id": "8d922f76.e3b27",
        "type": "link in",
        "z": "53028f3b.590b5",
        "name": "Pass from Call Keys",
        "links": [
            "1f2a433e.62aced"
        ],
        "x": 75,
        "y": 860,
        "wires": [
            [
                "c44ba5ac.c872a8"
            ]
        ]
    },
    {
        "id": "b9efbcb9.47591",
        "type": "inject",
        "z": "53028f3b.590b5",
        "name": "default?",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 100,
        "wires": [
            [
                "96aaf9f9.094f38"
            ]
        ]
    },
    {
        "id": "5a403cf1.054184",
        "type": "change",
        "z": "e83b2318.6f5c6",
        "name": "set stxprivkey",
        "rules": [
            {
                "t": "move",
                "p": "payload.wallet.accounts[0].stxPrivateKey",
                "pt": "msg",
                "to": "stxprivkey",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 520,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "c071fb7c.7f1528",
        "type": "change",
        "z": "e83b2318.6f5c6",
        "name": "set dataprivkey",
        "rules": [
            {
                "t": "move",
                "p": "payload.wallet.accounts[0].dataPrivateKey",
                "pt": "msg",
                "to": "dataprivkey",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 520,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "513b5f96.c46f",
        "type": "change",
        "z": "e83b2318.6f5c6",
        "name": "set secretkey",
        "rules": [
            {
                "t": "move",
                "p": "msg.payload.secretKey",
                "pt": "msg",
                "to": "secretkey",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 510,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "744187ca.a29598",
        "type": "change",
        "z": "e83b2318.6f5c6",
        "name": "set appskey",
        "rules": [
            {
                "t": "move",
                "p": "payload.wallet.accounts[0].appsKey",
                "pt": "msg",
                "to": "appskey",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 510,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "c44ba5ac.c872a8",
        "type": "function",
        "z": "53028f3b.590b5",
        "name": "get keys globals",
        "func": "var secretkey = global.get(\"secretkey\");\n\nmsg.payload = secretkey;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 860,
        "wires": [
            [
                "fef21303.5661",
                "e44c9501.0edc98"
            ]
        ]
    },
    {
        "id": "e44c9501.0edc98",
        "type": "debug",
        "z": "53028f3b.590b5",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 510,
        "y": 820,
        "wires": []
    },
    {
        "id": "ae651374.a85b7",
        "type": "function",
        "z": "53028f3b.590b5",
        "name": "get global depositaddress",
        "func": "var depositaddress = global.get(\"depositaddress\");\n\nmsg.payload = depositaddress;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 2140,
        "wires": [
            [
                "8704b28c.eb904"
            ]
        ]
    },
    {
        "id": "c1582304.80a9e",
        "type": "link in",
        "z": "53028f3b.590b5",
        "name": "Get Deposit Address",
        "links": [
            "57e2ecc0.94e904"
        ],
        "x": 75,
        "y": 2140,
        "wires": [
            [
                "86362642.e4ba48"
            ]
        ]
    },
    {
        "id": "86362642.e4ba48",
        "type": "delay",
        "z": "53028f3b.590b5",
        "name": "delay",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 170,
        "y": 2140,
        "wires": [
            [
                "ae651374.a85b7"
            ]
        ]
    },
    {
        "id": "57e2ecc0.94e904",
        "type": "link out",
        "z": "53028f3b.590b5",
        "name": "Pass Deposit Address to Receive",
        "links": [
            "c1582304.80a9e"
        ],
        "x": 1015,
        "y": 620,
        "wires": []
    },
    {
        "id": "c2bce8bc.c88598",
        "type": "function",
        "z": "53028f3b.590b5",
        "name": "show Wallet Nav and Balance and Histories",
        "func": "msg.payload = {\n  \"group\": {\n    \"hide\": [\n      \"Wallet_ImportGen\",\n      \"Wallet_Keys\",\n      \"Wallet_Send\",\n      \"Wallet_Receive\"\n    ],\n    \"show\": [\n      \"Wallet_WalletNav\",\n      \"Wallet_Balance\",\n      \"Wallet_History_Mainnet\",\n      \"Wallet_History_Testnet\"\n    ],\n    \"focus\": true\n  }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1490,
        "y": 180,
        "wires": [
            [
                "3e8bca44.35d1d6"
            ]
        ]
    },
    {
        "id": "3175e1b6.2b537e",
        "type": "file",
        "z": "e83b2318.6f5c6",
        "name": "overwrite keys.json ",
        "filename": "keys.json",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 790,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "96aaf9f9.094f38",
        "type": "file in",
        "z": "53028f3b.590b5",
        "name": "",
        "filename": "keys.json",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 240,
        "y": 100,
        "wires": [
            [
                "73ffee75.2bd06"
            ]
        ]
    },
    {
        "id": "73ffee75.2bd06",
        "type": "switch",
        "z": "53028f3b.590b5",
        "name": "empty?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "empty"
            },
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 380,
        "y": 100,
        "wires": [
            [
                "41c98019.533a3"
            ],
            [
                "aa76ef29.88857"
            ]
        ]
    },
    {
        "id": "943d3e7.afb63c",
        "type": "function",
        "z": "e83b2318.6f5c6",
        "name": "store encrypted secret keys",
        "func": "var secretsauce = msg.payload.wallet.encryptedSecretKey;\n\nmsg.payload = secretsauce;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 60,
        "wires": [
            [
                "3175e1b6.2b537e"
            ]
        ]
    },
    {
        "id": "8d9618d9.ee7718",
        "type": "inject",
        "z": "53028f3b.590b5",
        "name": "force default",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 60,
        "wires": [
            [
                "41c98019.533a3"
            ]
        ]
    },
    {
        "id": "dd43e46d.8e4b58",
        "type": "debug",
        "z": "e83b2318.6f5c6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 510,
        "y": 340,
        "wires": []
    },
    {
        "id": "b174b178.74327",
        "type": "function",
        "z": "42c07592.8d970c",
        "name": "construct url",
        "func": "var fqn = msg.payload.searchinput;\n\nvar nettype = \"stacks-node-api.mainnet.stacks.co\";\n\nmsg.url = \"https://\" + nettype + \"/v1/names/\" + fqn;\nmsg.fqn = fqn;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 2840,
        "wires": [
            [
                "f7df69fb.404dc8"
            ]
        ]
    },
    {
        "id": "f7df69fb.404dc8",
        "type": "http request",
        "z": "42c07592.8d970c",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 770,
        "y": 2840,
        "wires": [
            [
                "6340ae52.9e9d7"
            ]
        ]
    },
    {
        "id": "6340ae52.9e9d7",
        "type": "json",
        "z": "42c07592.8d970c",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 910,
        "y": 2840,
        "wires": [
            [
                "adcdd527.9195a8",
                "3b5db882.02c418",
                "62e646be.9c26b8",
                "9bc47a10.5344b8"
            ]
        ]
    },
    {
        "id": "f5f39fb5.6cb16",
        "type": "ui_template",
        "z": "42c07592.8d970c",
        "group": "f5ae9cfe.e2927",
        "name": "Results by Contract Name",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "RESULTS by Contract Name\n{{msg.payload}}",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 1650,
        "y": 2960,
        "wires": [
            []
        ]
    },
    {
        "id": "d55c49e6.0417f8",
        "type": "ui_template",
        "z": "42c07592.8d970c",
        "group": "b8ecbd79.b0666",
        "name": "Results by Token Name",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "RESULTS by Token Name\n{{msg.payload}}",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 1650,
        "y": 3000,
        "wires": [
            []
        ]
    },
    {
        "id": "8278106d.461fb",
        "type": "ui_template",
        "z": "42c07592.8d970c",
        "group": "40325bc7.69df84",
        "name": "Results by Principle Address",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<h3>Balance: {{msg.payload.stx.balance}}</h3>\n<h5>Locked: {{msg.payload.stx.locked}} </h5>\n<p>Total Sent: {{msg.payload.stx.total_sent}}</p>\n<p>Total Received: {{msg.payload.stx.total_received}}</p>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 1660,
        "y": 3040,
        "wires": [
            []
        ]
    },
    {
        "id": "e19596ee.3cac38",
        "type": "ui_template",
        "z": "42c07592.8d970c",
        "group": "3134e5b0.37b9ba",
        "name": "Results by Transaction ID",
        "order": 1,
        "width": 13,
        "height": 8,
        "format": "<h4>Sender:</h4>\n<p>{{msg.payload.sender_address}}</p>\n<br>\n<h4>Recipient:</h4>\n<p>{{msg.payload.token_transfer.recipient_address}}</p>\n<br>\n<p>Amount: {{msg.payload.token_transfer.amount}}</p>\n<p>Fee: {{msg.payload.fee_rate}}</p>\n<p>Nonce: {{msg.payload.nonce}}</p>\n<p>Status: {{msg.payload.tx_status}}</p>\n<p>Memo: {{msg.payload.token_transfer.memo}}</p>\n<h5>{{msg.payload.tx_id}}</h5>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 1650,
        "y": 2920,
        "wires": [
            []
        ]
    },
    {
        "id": "d82e07c9.ba41c8",
        "type": "function",
        "z": "42c07592.8d970c",
        "name": "show Results byContractName",
        "func": "msg.payload = {\n  \"group\": {\n    \"hide\": [\n      \"Feed_Feed\",\n      \"Feed_NewPost\",\n      \"Feed_RegisterName\",      \n      \"Feed_Profile\",\n      \"Feed_byName\",\n      \"Feed_byTokenName\",\n      \"Feed_byPrincipleAddress\",\n      \"Feed_byTransactionID\",\n      \"Feed_byChimeDeruptar\"      \n    ],\n    \"show\": [\n      \"Feed_Header\",\n      \"Feed_byContractName\"\n    ],\n    \"focus\": true\n  }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 2580,
        "wires": [
            [
                "697b50a.2220ab"
            ]
        ]
    },
    {
        "id": "fb018c07.853cd",
        "type": "function",
        "z": "42c07592.8d970c",
        "name": "show Results byTokenName",
        "func": "msg.payload = {\n  \"group\": {\n    \"hide\": [\n      \"Feed_Feed\",\n      \"Feed_NewPost\",\n      \"Feed_RegisterName\",      \n      \"Feed_Profile\",\n      \"Feed_byContractName\",\n      \"Feed_byName\",\n      \"Feed_byPrincipleAddress\",\n      \"Feed_byTransactionID\",\n      \"Feed_byChimeDeruptar\"      \n    ],\n    \"show\": [\n      \"Feed_Header\",\n      \"Feed_byTokenName\"\n    ],\n    \"focus\": true\n  }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 2620,
        "wires": [
            [
                "697b50a.2220ab"
            ]
        ]
    },
    {
        "id": "79fa716d.83c1c",
        "type": "function",
        "z": "42c07592.8d970c",
        "name": "show Results byPrincipleAddress",
        "func": "msg.payload = {\n  \"group\": {\n    \"hide\": [\n      \"Feed_Feed\",\n      \"Feed_NewPost\",\n      \"Feed_RegisterName\",      \n      \"Feed_Profile\",\n      \"Feed_byContractName\",\n      \"Feed_byTokenName\",\n      \"Feed_byName\",\n      \"Feed_byChimeDeruptar\",      \n      \"Feed_byTransactionID\"\n    ],\n    \"show\": [\n      \"Feed_Header\",\n      \"Feed_byPrincipleAddress\"\n    ],\n    \"focus\": true\n  }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 2660,
        "wires": [
            [
                "697b50a.2220ab"
            ]
        ]
    },
    {
        "id": "597e8480.42705c",
        "type": "function",
        "z": "42c07592.8d970c",
        "name": "show Results byTransactionID",
        "func": "msg.payload = {\n  \"group\": {\n    \"hide\": [\n      \"Feed_Feed\",\n      \"Feed_NewPost\",\n      \"Feed_RegisterName\",      \n      \"Feed_Profile\",\n      \"Feed_byContractName\",\n      \"Feed_byTokenName\",\n      \"Feed_byName\",\n      \"Feed_byPrincipleAddress\",\n      \"Feed_byChimeDeruptar\"\n    ],\n    \"show\": [\n      \"Feed_Header\",\n      \"Feed_byTransactionID\"\n    ],\n    \"focus\": true\n  }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 2540,
        "wires": [
            [
                "697b50a.2220ab"
            ]
        ]
    },
    {
        "id": "aca7dc96.8b27a",
        "type": "switch",
        "z": "42c07592.8d970c",
        "name": "route by type",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "fqn",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "txid",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "bcn",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "btn",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "bpa",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 6,
        "x": 370,
        "y": 2560,
        "wires": [
            [
                "9cc3c90.0e85138"
            ],
            [
                "597e8480.42705c"
            ],
            [
                "d82e07c9.ba41c8"
            ],
            [
                "fb018c07.853cd"
            ],
            [
                "79fa716d.83c1c"
            ],
            []
        ]
    },
    {
        "id": "e4a65fcb.f9887",
        "type": "function",
        "z": "42c07592.8d970c",
        "name": "Hide Results",
        "func": "msg.payload = {\n  \"group\": {\n    \"hide\": [\n      \"Feed_Feed\",\n      \"Feed_NewPost\",\n      \"Feed_RegisterName\",      \n      \"Feed_Profile\",\n      \"Feed_byContractName\",\n      \"Feed_byTokenName\",\n      \"Feed_byPrincipleAddress\",\n      \"Feed_byTransactionID\",\n      \"Feed_byChimeDeruptar\",      \n      \"Feed_byName\"\n    ],\n    \"show\": [\n      \"Feed_Header\"\n    ],\n    \"focus\": true\n  }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 2460,
        "wires": [
            [
                "697b50a.2220ab"
            ]
        ]
    },
    {
        "id": "3eee9e35.2b1b42",
        "type": "inject",
        "z": "42c07592.8d970c",
        "name": "hider",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 610,
        "y": 2460,
        "wires": [
            [
                "e4a65fcb.f9887"
            ]
        ]
    },
    {
        "id": "adcdd527.9195a8",
        "type": "debug",
        "z": "42c07592.8d970c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 2880,
        "wires": []
    },
    {
        "id": "1ae11b46.bb67d5",
        "type": "join",
        "z": "42c07592.8d970c",
        "name": "join inputs",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 360,
        "y": 2780,
        "wires": [
            [
                "e53e6919.d89028",
                "61989514.7403fc"
            ]
        ]
    },
    {
        "id": "8c7d3d6d.b42c6",
        "type": "change",
        "z": "e83b2318.6f5c6",
        "name": "set searchtype",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "searchtype",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 520,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "e53e6919.d89028",
        "type": "debug",
        "z": "42c07592.8d970c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 2780,
        "wires": []
    },
    {
        "id": "61989514.7403fc",
        "type": "switch",
        "z": "42c07592.8d970c",
        "name": "route by type",
        "property": "payload.searchtype",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "fqn",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "txid",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "bcn",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "btn",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "bpa",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 6,
        "x": 370,
        "y": 2900,
        "wires": [
            [
                "b174b178.74327"
            ],
            [
                "7bd2758e.52929c"
            ],
            [],
            [],
            [
                "57553aff.199e04"
            ],
            []
        ]
    },
    {
        "id": "4b97e61.0fbac18",
        "type": "link in",
        "z": "e83b2318.6f5c6",
        "name": "to set Global (search type)",
        "links": [
            "62a9e217.4a2bcc"
        ],
        "x": 155,
        "y": 700,
        "wires": [
            [
                "8c7d3d6d.b42c6"
            ]
        ]
    },
    {
        "id": "62a9e217.4a2bcc",
        "type": "link out",
        "z": "42c07592.8d970c",
        "name": "to set Search Type",
        "links": [
            "4b97e61.0fbac18"
        ],
        "x": 315,
        "y": 2660,
        "wires": []
    },
    {
        "id": "af7e1628.bed168",
        "type": "inject",
        "z": "42c07592.8d970c",
        "name": "default searchtype",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "topic": "searchtype",
        "payload": "fqn",
        "payloadType": "str",
        "x": 110,
        "y": 2660,
        "wires": [
            [
                "62a9e217.4a2bcc",
                "aca7dc96.8b27a",
                "1ae11b46.bb67d5"
            ]
        ]
    },
    {
        "id": "7bd2758e.52929c",
        "type": "function",
        "z": "42c07592.8d970c",
        "name": "construct url",
        "func": "var txid = msg.payload.searchinput;\nvar nettype = \"stacks-node-api.mainnet.stacks.co\";\n\nmsg.url = \"https://\" + nettype + \"/extended/v1/tx/\" + txid;\nmsg.txid = txid;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 2880,
        "wires": [
            [
                "c8b07fde.de5a8"
            ]
        ]
    },
    {
        "id": "c8b07fde.de5a8",
        "type": "http request",
        "z": "42c07592.8d970c",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 770,
        "y": 2880,
        "wires": [
            [
                "7f1cca7e.aa5474"
            ]
        ]
    },
    {
        "id": "7f1cca7e.aa5474",
        "type": "json",
        "z": "42c07592.8d970c",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 910,
        "y": 2920,
        "wires": [
            [
                "9020504f.895bf",
                "e19596ee.3cac38"
            ]
        ]
    },
    {
        "id": "9020504f.895bf",
        "type": "debug",
        "z": "42c07592.8d970c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 2940,
        "wires": []
    },
    {
        "id": "cafc8579.023e18",
        "type": "change",
        "z": "e83b2318.6f5c6",
        "name": "set searchinput",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "searchinput",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 520,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "27e68243.aae18e",
        "type": "link out",
        "z": "42c07592.8d970c",
        "name": "to set Search Input",
        "links": [
            "f5c69381.17376"
        ],
        "x": 315,
        "y": 2700,
        "wires": []
    },
    {
        "id": "f5c69381.17376",
        "type": "link in",
        "z": "e83b2318.6f5c6",
        "name": "to set Global (search input)",
        "links": [
            "27e68243.aae18e"
        ],
        "x": 155,
        "y": 740,
        "wires": [
            [
                "cafc8579.023e18"
            ]
        ]
    },
    {
        "id": "158f434e.a7681d",
        "type": "ui_template",
        "z": "42c07592.8d970c",
        "group": "51640c7f.5ee354",
        "name": "Fee Disclaimer",
        "order": 2,
        "width": "13",
        "height": "1",
        "format": "<small><small>Fee Disclaimer: New Chimes require a small fee in order to create.</small></small>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 100,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "56f77a5a.ccbb54",
        "type": "ui_button",
        "z": "42c07592.8d970c",
        "name": "New Chime",
        "group": "d506506a.83f12",
        "order": 5,
        "width": 1,
        "height": 1,
        "passthru": false,
        "label": "",
        "tooltip": "Broadcast New Chime",
        "color": "",
        "bgcolor": "",
        "icon": "mi-add_alert",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 90,
        "y": 80,
        "wires": [
            [
                "1139baa5.720a75"
            ]
        ]
    },
    {
        "id": "1139baa5.720a75",
        "type": "function",
        "z": "42c07592.8d970c",
        "name": "show NewPost",
        "func": "msg.payload = {\n  \"group\": {\n    \"hide\": [\n      \"Feed_Feed\",\n      \"Feed_Profile\",\n      \"Feed_RegisterName\",\n      \"Feed_byContractName\",\n      \"Feed_byTokenName\",\n      \"Feed_byPrincipleAddress\",\n      \"Feed_byTransactionID\",\n      \"Feed_byChimeDeruptar\",      \n      \"Feed_byName\"\n    ],\n    \"show\": [\n      \"Feed_Header\",\n      \"Feed_NewPost\"\n    ],\n    \"focus\": true\n  }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 80,
        "wires": [
            [
                "696ce85d.daa998"
            ]
        ]
    },
    {
        "id": "696ce85d.daa998",
        "type": "ui_ui_control",
        "z": "42c07592.8d970c",
        "name": "",
        "events": "all",
        "x": 420,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "114e68d3.24bdc7",
        "type": "comment",
        "z": "42c07592.8d970c",
        "name": "Relative to New Post",
        "info": "",
        "x": 110,
        "y": 40,
        "wires": []
    },
    {
        "id": "ab1900ed.7b072",
        "type": "function",
        "z": "53028f3b.590b5",
        "name": "Send STX (Mainnet)",
        "func": "const network = new stacksNetwork.StacksMainnet(); // or StacksTestnet\nconst senderKey = global.get('stxprivkey'); //get the STX Private Key Stored Globally\n\n// skip automatic fee estimation\nconst fee = new BigNum(180);\nconst memo = msg.payload.stxmemo;\n\nconst txOptions = {\n    recipient: msg.payload.stxdestination,\n    amount : new BigNum(msg.payload.stxamount),\n    fee,\n    senderKey,\n    network,\n    memo,\n    anchorMode: stacksTransactions.AnchorMode.Any //added to ensure 2.0.1 compatability\n};\n\nconst transaction = await stacksTransactions.makeSTXTokenTransfer(txOptions);\nconst broadcastTxn = await stacksTransactions.broadcastTransaction(transaction, network);\n\nmsg.payload = transaction;\nmsg.blockchain = \"0x\" + broadcastTxn;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "BigNum",
                "module": "bn.js"
            },
            {
                "var": "stacksTransactions",
                "module": "@stacks/transactions"
            },
            {
                "var": "stacksNetwork",
                "module": "@stacks/network"
            }
        ],
        "x": 580,
        "y": 1700,
        "wires": [
            [
                "281b6ffc.c62c5"
            ]
        ]
    },
    {
        "id": "57553aff.199e04",
        "type": "function",
        "z": "42c07592.8d970c",
        "name": "construct url",
        "func": "var stxaddress = msg.payload.searchinput;\nvar nettype = \"stacks-node-api.mainnet.stacks.co\";\n\nmsg.url = \"https://\" + nettype + \"/extended/v1/address/\" + stxaddress + \"/balances\";\nmsg.stxaddress = stxaddress;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 3000,
        "wires": [
            [
                "104e0697.7857a9"
            ]
        ]
    },
    {
        "id": "104e0697.7857a9",
        "type": "http request",
        "z": "42c07592.8d970c",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 770,
        "y": 3000,
        "wires": [
            [
                "4c8e8c17.de9954"
            ]
        ]
    },
    {
        "id": "4c8e8c17.de9954",
        "type": "json",
        "z": "42c07592.8d970c",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 910,
        "y": 3040,
        "wires": [
            [
                "298788eb.64d0a8",
                "8278106d.461fb"
            ]
        ]
    },
    {
        "id": "298788eb.64d0a8",
        "type": "debug",
        "z": "42c07592.8d970c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 3100,
        "wires": []
    },
    {
        "id": "24c58f0c.4ac51",
        "type": "function",
        "z": "613e85c9.c6210c",
        "name": "create ft-trait.clar",
        "func": "msg.payload =   \"(define-trait ft-trait\\n\" +\n                \"  (\\n\" +\n                \"    ;; Transfer from the caller to a new principal\\n\" +\n                \"    (transfer (uint principal principal (optional (buff 34))) (response bool uint))\\n\" +\n                \"\\n\" +\n                \"    ;; human readable name of the token\\n\" +\n                \"    (get-name () (response (string-ascii 32) uint))\\n\" +\n                \"\\n\" +\n                \"    ;; ticker symbol or empty if none\\n\" +\n                \"    (get-symbol () (response (string-ascii 32) uint))\\n\" +\n                \"\\n\" +\n                \"    ;; number of decimals used\\n\" +\n                \"    (get-decimals () (response uint uint))\\n\" +\n                \"\\n\" +\n                \"    ;; balance of the passed principal\\n\" +\n                \"    (get-balance-of (principal) (response uint uint))\\n\" +\n                \"\\n\" +\n                \"    ;; current total supply\\n\" +\n                \"    (get-total-supply () (response uint uint))\\n\" +\n                \"\\n\" +\n                \"    ;; optional URI that represents metadata of this token\\n\" +\n                \"    (get-token-uri () (response (optional (string-utf8 256)) uint))\\n\" +\n                \"  )\\n\" +\n                \")\";\n               \nmsg.filename = \"ft-trait.clar\"; // name the contract same as input custom token name\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2910,
        "y": 380,
        "wires": [
            [
                "6c486db8.90b164",
                "75ea2d53.d250d4"
            ]
        ]
    },
    {
        "id": "6c486db8.90b164",
        "type": "debug",
        "z": "613e85c9.c6210c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 3230,
        "y": 340,
        "wires": []
    },
    {
        "id": "d8cb6e32.2d0f9",
        "type": "function",
        "z": "88cec2c0.c8804",
        "name": "create msg.url (mainnet history)",
        "func": "//var nettype = global.get(\"nettype\");\nvar nettype = \"stacks-node-api.mainnet.stacks.co\"; //mainnet\n\nvar depositaddress = msg.depositaddress;\n\nmsg.url = \"https://\" + nettype + \"/extended/v1/address/\" + depositaddress + \"/transactions\";\nmsg.depositaddress = depositaddress; \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 240,
        "wires": [
            [
                "9a6d200b.74539",
                "377b9e1e.2fe582"
            ]
        ]
    },
    {
        "id": "9a6d200b.74539",
        "type": "http request",
        "z": "88cec2c0.c8804",
        "name": "get history",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1150,
        "y": 240,
        "wires": [
            [
                "9e0455b9.a67188"
            ]
        ]
    },
    {
        "id": "9e0455b9.a67188",
        "type": "json",
        "z": "88cec2c0.c8804",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1310,
        "y": 240,
        "wires": [
            [
                "f5938fe4.005cf",
                "9c5cf7ef.f9d388"
            ]
        ]
    },
    {
        "id": "f5938fe4.005cf",
        "type": "change",
        "z": "88cec2c0.c8804",
        "name": "move results",
        "rules": [
            {
                "t": "move",
                "p": "payload.results",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1490,
        "y": 240,
        "wires": [
            [
                "eb948104.cc071",
                "7ad225d6.1b055c",
                "d9c5c3a8.083ff"
            ]
        ]
    },
    {
        "id": "9c5cf7ef.f9d388",
        "type": "ui_template",
        "z": "88cec2c0.c8804",
        "group": "f086e156.9d17b",
        "name": "Number of Tx's",
        "order": 1,
        "width": 6,
        "height": 1,
        "format": "<small><small>{{msg.depositaddress}}</small></small> has {{msg.payload.total}} Completed Transaction(s) in Total. ",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 1500,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "eb948104.cc071",
        "type": "debug",
        "z": "88cec2c0.c8804",
        "name": "mainnet history debugger",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1820,
        "y": 200,
        "wires": []
    },
    {
        "id": "84d8c5e6.9c38d8",
        "type": "ui_template",
        "z": "88cec2c0.c8804",
        "group": "f086e156.9d17b",
        "name": "Transaction History (Mainnet)",
        "order": 5,
        "width": 13,
        "height": "4",
        "format": "<table>\n    <tr>\n        <th></th>\n        <th>Amount</th>\n        <th>Fee</th>        \n        <th>Explorer</th>\n        <th>Status</th>\n        <th>Date</th>\n    </tr>\n    <tr ng-repeat=\"obj in msg.payload\">\n        <td><img src=\"https://raw.githubusercontent.com/cryptocracy/dapparatus/master/stx-logo-blue-round-small.png\" width=\"32\" height=\"32\"> </td>\n        <td>{{obj.token_transfer.amount}}</td>\n        <td>{{obj.fee_rate}}</td>        \n        <td><small><small><small><a href=\"https://explorer.stacks.co/txid/{{obj.tx_id}}?chain=mainnet\" target=\"_blank\" title=\"{{obj.tx_id}}\">View in Explorer</a></small></small></small></td>\n        <td><small>{{obj.tx_status}}</small></td>\n        <td><small><small>{{obj.burn_block_time_iso}}</small></small></td>\n    </tr>\n</table>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 1860,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "bd10f7a4.fbf888",
        "type": "inject",
        "z": "88cec2c0.c8804",
        "name": "every 30s",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "30",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 200,
        "wires": [
            [
                "5c0a9600.38623c"
            ]
        ]
    },
    {
        "id": "377b9e1e.2fe582",
        "type": "debug",
        "z": "88cec2c0.c8804",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "url",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 280,
        "wires": []
    },
    {
        "id": "5c0a9600.38623c",
        "type": "function",
        "z": "88cec2c0.c8804",
        "name": "get global depositaddress",
        "func": "msg.depositaddress = global.get(\"depositaddress\");\n//or get global 'testnetdepositaddress'\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 200,
        "wires": [
            [
                "41dd1831.d9dd58"
            ]
        ]
    },
    {
        "id": "64123e79.c35e8",
        "type": "comment",
        "z": "88cec2c0.c8804",
        "name": "sample addresses",
        "info": "MainNet Examples:\nw/ History:\nSP33XEHK2SXXH625VG6W6665WBBPX1ENQVKNEYCYY\n\nw/o History:\nSP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0\n\nTest Examples:\nw/ History:\n\n\nw/o History:\n",
        "x": 570,
        "y": 160,
        "wires": []
    },
    {
        "id": "31e62cc7.08b544",
        "type": "ui_template",
        "z": "88cec2c0.c8804",
        "group": "cd33bbcb.590158",
        "name": "Transaction History (Testnet)",
        "order": 5,
        "width": 13,
        "height": "4",
        "format": "<table>\n    <tr>\n        <th></th>\n        <th>Amount</th>\n        <th>Fee</th>        \n        <th>Explorer</th>\n        <th>Status</th>\n        <th>Date</th>\n    </tr>\n    <tr ng-repeat=\"obj in msg.payload\">\n        <td><img src=\"https://raw.githubusercontent.com/cryptocracy/dapparatus/master/stx-logo-blue-round-small.png\" width=\"32\" height=\"32\"> </td>\n        <td>{{obj.token_transfer.amount}}</td>\n        <td>{{obj.fee_rate}}</td>\n        <td><small><small><small><a href=\"https://explorer.stacks.co/txid/{{obj.tx_id}}?chain=testnet\" target=\"_blank\" title=\"View in Explorer\">View in Explorer</a></small></small></small></td>\n        <td><small>{{obj.tx_status}}</small></td>\n        <td><small><small>{{obj.burn_block_time_iso}}</small></small></td>\n    </tr>\n</table>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 1940,
        "y": 1200,
        "wires": [
            []
        ]
    },
    {
        "id": "41dd1831.d9dd58",
        "type": "switch",
        "z": "88cec2c0.c8804",
        "name": "drop if empty",
        "property": "depositaddress",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "empty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 550,
        "y": 200,
        "wires": [
            [
                "d8cb6e32.2d0f9",
                "1870731a.10f11d"
            ],
            [
                "83a1ba7b.df6c98"
            ]
        ]
    },
    {
        "id": "777d2c6a.7f1fc4",
        "type": "inject",
        "z": "e83b2318.6f5c6",
        "name": "get debugger",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 210,
        "y": 1160,
        "wires": [
            [
                "67e57a99.f2ae84"
            ]
        ]
    },
    {
        "id": "5c350943.5f5178",
        "type": "debug",
        "z": "e83b2318.6f5c6",
        "name": "obj debugger",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 1160,
        "wires": []
    },
    {
        "id": "67e57a99.f2ae84",
        "type": "function",
        "z": "e83b2318.6f5c6",
        "name": "get all globals",
        "func": "var keys = global.get(\"keys\");\nvar secretkey = global.get(\"secretkey\");\nvar appskey = global.get(\"appskey\");\nvar dataprivkey = global.get(\"dataprivkey\");\nvar stxprivkey = global.get(\"stxprivkey\");\nvar saltzero = global.get(\"saltzero\");\nvar nettype = global.get(\"nettype\");\nvar depositaddress = global.get(\"depositaddress\");\nvar txhistorymainnet = global.get(\"txhistorymainnet\");\nvar testnetdepositaddress = global.get(\"testnetdepositaddress\");\nvar txhistorytestnet = global.get(\"txhistorytestnet\");\nvar searchtype = global.get(\"searchtype\");\nvar searchinput = global.get(\"searchinput\");\nvar tipjar = global.get(\"tipjar\");\nvar tempfqn = global.get(\"tempfqn\");\nvar deruptarname = global.get(\"deruptarname\");\nvar xftname = global.get(\"xftname\");\nvar ftcontractnames = global.get(\"ftcontractnames\");\nvar tempcontractid = global.get(\"tempcontractid\");\n\n\nmsg.payload = \"globals are in the in msg obj\";\nmsg.keys = keys;\nmsg.secretkey = secretkey;\nmsg.appskey = appskey;\nmsg.dataprivkey = dataprivkey;\nmsg.stxprivkey = stxprivkey;\nmsg.saltzero = saltzero;\nmsg.nettype = nettype;\nmsg.depositaddress = depositaddress;\nmsg.txhistorymainnet = txhistorymainnet;\nmsg.testnetdepositaddress = testnetdepositaddress;\nmsg.txhistorytestnet = txhistorytestnet;\nmsg.searchtype = searchtype;\nmsg.searchinput = searchinput;\nmsg.tipjar = tipjar;\nmsg.tempfqn = tempfqn;\nmsg.deruptarname = deruptarname;\nmsg.xftname = xftname;\nmsg.ftcontractnames = ftcontractnames;\nmsg.tempcontractid = tempcontractid;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1160,
        "wires": [
            [
                "5c350943.5f5178"
            ]
        ]
    },
    {
        "id": "9be618dc.c92f28",
        "type": "function",
        "z": "53028f3b.590b5",
        "name": "generate deposit address 0 (Testnet)",
        "func": "//var nt = msg.gnt; //set var nt dynamically\n//var nt = 0; // set var nt as Mainnet \nvar nt = 128; // set var nt as TestNet\n\n\nconst obj = {\n    account : msg.payload.wallet.accounts[0],\n    transactionVersion : nt\n};\n\nconst address = stacksWalletSdk.getStxAddress(obj);\n\nmsg.testnetdepositaddress = address;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "stacksWalletSdk",
                "module": "@stacks/wallet-sdk"
            }
        ],
        "x": 790,
        "y": 600,
        "wires": [
            [
                "6e0ecd2a.b323d4",
                "2a3b6832.a2bfd8"
            ]
        ]
    },
    {
        "id": "82ad780a.3c6158",
        "type": "change",
        "z": "e83b2318.6f5c6",
        "name": "set testnetdepositaddress",
        "rules": [
            {
                "t": "move",
                "p": "testnetdepositaddress",
                "pt": "msg",
                "to": "testnetdepositaddress",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 550,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "6e0ecd2a.b323d4",
        "type": "link out",
        "z": "53028f3b.590b5",
        "name": "pass to Global (set deposit address 0 Testnet)",
        "links": [
            "ea10c130.37f4c"
        ],
        "x": 1015,
        "y": 660,
        "wires": []
    },
    {
        "id": "ea10c130.37f4c",
        "type": "link in",
        "z": "e83b2318.6f5c6",
        "name": "to set Global (deposit address 0 Testnet)",
        "links": [
            "6e0ecd2a.b323d4"
        ],
        "x": 155,
        "y": 540,
        "wires": [
            [
                "82ad780a.3c6158"
            ]
        ]
    },
    {
        "id": "83a1ba7b.df6c98",
        "type": "debug",
        "z": "88cec2c0.c8804",
        "name": "error mainnet history",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 280,
        "wires": []
    },
    {
        "id": "514072aa.46826c",
        "type": "link in",
        "z": "e83b2318.6f5c6",
        "name": "pass to Global set nettype",
        "links": [
            "c47cbd1c.729f6",
            "e24b569f.c73348"
        ],
        "x": 155,
        "y": 420,
        "wires": [
            [
                "ba154c63.e2beb"
            ]
        ]
    },
    {
        "id": "ba154c63.e2beb",
        "type": "change",
        "z": "e83b2318.6f5c6",
        "name": "set nettype",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "nettype",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 510,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "7d5389b4.cfc178",
        "type": "ui_switch",
        "z": "42c07592.8d970c",
        "d": true,
        "name": "Network Switch",
        "label": "",
        "tooltip": "Toggle Network: Mainnet (Globe) or Testnet (Wrench)",
        "group": "d506506a.83f12",
        "order": 6,
        "width": 1,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "stacks-node-api.mainnet.stacks.co",
        "onvalueType": "str",
        "onicon": "fa-globe",
        "oncolor": "Green",
        "offvalue": "stacks-node-api.testnet.stacks.co",
        "offvalueType": "str",
        "officon": "fa-wrench",
        "offcolor": "Yellow",
        "animate": true,
        "x": 940,
        "y": 80,
        "wires": [
            [
                "e24b569f.c73348"
            ]
        ]
    },
    {
        "id": "e24b569f.c73348",
        "type": "link out",
        "z": "42c07592.8d970c",
        "name": "to set Global nettype",
        "links": [
            "514072aa.46826c"
        ],
        "x": 1135,
        "y": 80,
        "wires": []
    },
    {
        "id": "b4f82858.0c7968",
        "type": "comment",
        "z": "42c07592.8d970c",
        "name": "Relative to Network Type",
        "info": "",
        "x": 950,
        "y": 40,
        "wires": []
    },
    {
        "id": "7c488f20.eb82d",
        "type": "function",
        "z": "88cec2c0.c8804",
        "name": "get global testnetdepositaddress",
        "func": "msg.testnetdepositaddress = global.get(\"testnetdepositaddress\");\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 1040,
        "wires": [
            [
                "7b8a0529.d2e7dc"
            ]
        ]
    },
    {
        "id": "7b8a0529.d2e7dc",
        "type": "switch",
        "z": "88cec2c0.c8804",
        "name": "drop if empty",
        "property": "testnetdepositaddress",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "empty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 670,
        "y": 1040,
        "wires": [
            [
                "777be969.6a8278",
                "f56384b0.2d0ce8"
            ],
            [
                "365a8400.1286bc"
            ]
        ]
    },
    {
        "id": "777be969.6a8278",
        "type": "function",
        "z": "88cec2c0.c8804",
        "name": "create msg.url (testnet history)",
        "func": "//var nettype = global.get(\"nettype\");\nvar nettype = \"stacks-node-api.testnet.stacks.co\";//testnet\n\nvar testnetdepositaddress = msg.testnetdepositaddress;\n\nmsg.url = \"https://\" + nettype + \"/extended/v1/address/\" + testnetdepositaddress + \"/transactions\";\nmsg.testnetdepositaddress = testnetdepositaddress; \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 1040,
        "wires": [
            [
                "c5f3e664.d8ea68",
                "144af316.1c1b2d"
            ]
        ]
    },
    {
        "id": "365a8400.1286bc",
        "type": "debug",
        "z": "88cec2c0.c8804",
        "name": "error testnet history",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 1100,
        "wires": []
    },
    {
        "id": "c5f3e664.d8ea68",
        "type": "http request",
        "z": "88cec2c0.c8804",
        "name": "get history",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1190,
        "y": 1040,
        "wires": [
            [
                "abdd1ac0.441a18"
            ]
        ]
    },
    {
        "id": "abdd1ac0.441a18",
        "type": "json",
        "z": "88cec2c0.c8804",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1370,
        "y": 1040,
        "wires": [
            [
                "b29c45b9.b28068",
                "c6af28a4.3c3d58"
            ]
        ]
    },
    {
        "id": "b29c45b9.b28068",
        "type": "change",
        "z": "88cec2c0.c8804",
        "name": "move results",
        "rules": [
            {
                "t": "move",
                "p": "payload.results",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1550,
        "y": 1040,
        "wires": [
            [
                "d9cf5ca4.c88ce",
                "76ca3c24.4327d4",
                "6658b90c.ccc468"
            ]
        ]
    },
    {
        "id": "c6af28a4.3c3d58",
        "type": "ui_template",
        "z": "88cec2c0.c8804",
        "group": "cd33bbcb.590158",
        "name": "Number of Tx's",
        "order": 1,
        "width": 6,
        "height": 1,
        "format": "<small><small>{{msg.testnetdepositaddress}}</small></small> has {{msg.payload.total}} Completed Transaction(s) in Total. ",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 1560,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "d9cf5ca4.c88ce",
        "type": "debug",
        "z": "88cec2c0.c8804",
        "name": "testnet history debugger",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1840,
        "y": 1000,
        "wires": []
    },
    {
        "id": "935bcdfb.6e722",
        "type": "inject",
        "z": "88cec2c0.c8804",
        "name": "every 30s",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "30",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 1040,
        "wires": [
            [
                "7c488f20.eb82d"
            ]
        ]
    },
    {
        "id": "177c7cea.453623",
        "type": "function",
        "z": "53028f3b.590b5",
        "name": "get global testnetdepositaddress",
        "func": "var testnetdepositaddress = global.get(\"testnetdepositaddress\");\n\nmsg.payload = testnetdepositaddress;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 2340,
        "wires": [
            [
                "e4c02840.a11e78"
            ]
        ]
    },
    {
        "id": "92252ed1.e85de",
        "type": "delay",
        "z": "53028f3b.590b5",
        "name": "delay",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 170,
        "y": 2340,
        "wires": [
            [
                "177c7cea.453623"
            ]
        ]
    },
    {
        "id": "2a3b6832.a2bfd8",
        "type": "link out",
        "z": "53028f3b.590b5",
        "name": "Pass Testnet Deposit Address to Receive",
        "links": [
            "bbc59e5f.9e773",
            "32a2d9ed.753e86"
        ],
        "x": 1015,
        "y": 700,
        "wires": []
    },
    {
        "id": "bbc59e5f.9e773",
        "type": "link in",
        "z": "53028f3b.590b5",
        "name": "Get Testnet Deposit Address",
        "links": [
            "2a3b6832.a2bfd8"
        ],
        "x": 75,
        "y": 2340,
        "wires": [
            [
                "92252ed1.e85de"
            ]
        ]
    },
    {
        "id": "4fdb78f4.9a1728",
        "type": "ui_template",
        "z": "53028f3b.590b5",
        "d": true,
        "group": "20a23299.1e38be",
        "name": "Transaction List (Testnet)",
        "order": 2,
        "width": 0,
        "height": 0,
        "format": "<h3>Confirmed Transactions</h3>\n<table>\n    <tr>\n        <th></th>\n        <th>Amount</th>\n        <th>Status</th>\n        <th>Fee</th>        \n        <th>Explorer</th>\n        <th>Type</th>\n        <th>Date</th>\n    </tr>\n    <tr ng-repeat=\"obj in msg.payload\">\n        <td><img src=\"https://pbs.twimg.com/profile_images/1321461825758744576/4e3xAKz2_400x400.png\" width=\"32\" height=\"32\"> </td>\n        <td>{{obj.token_transfer.amount}}</td>\n        <td><small>{{obj.tx_status}}</small></td>\n        <td>{{obj.fee_rate}}</td>\n        <td><small><small><small><a href=\"https://explorer.stacks.co/txid/{{obj.tx_id}}?chain=testnet\" target=\"_blank\" title=\"{{obj.tx_id}}\">View in Explorer</a></small></small></small></td>\n        <td>{{obj.tx_type}}</td>\n        <td><small><small>{{obj.burn_block_time_iso}}</small></small></td>\n    </tr>\n</table>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 690,
        "y": 2460,
        "wires": [
            []
        ]
    },
    {
        "id": "c5dfe14b.c2cbf",
        "type": "ui_template",
        "z": "53028f3b.590b5",
        "d": true,
        "group": "c75785b2.7363d8",
        "name": "Transaction List (Mainnet)",
        "order": 2,
        "width": 0,
        "height": 0,
        "format": "<h3>Confirmed Transactions</h3>\n<table>\n    <tr>\n        <th></th>\n        <th>Amount</th>\n        <th>Status</th>\n        <th>Fee</th>        \n        <th>Explorer</th>\n        <th>Type</th>\n        <th>Date</th>\n    </tr>\n    <tr ng-repeat=\"obj in msg.payload\">\n        <td><img src=\"https://pbs.twimg.com/profile_images/1321461825758744576/4e3xAKz2_400x400.png\" width=\"32\" height=\"32\"> </td>\n        <td>{{obj.token_transfer.amount}}</td>\n        <td><small>{{obj.tx_status}}</small></td>\n        <td>{{obj.fee_rate}}</td>\n        <td><small><small><small><a href=\"https://explorer.stacks.co/txid/{{obj.tx_id}}?chain=mainnet\" target=\"_blank\" title=\"{{obj.tx_id}}\">View In Explorer</a></small></small></small></td>\n        <td>{{obj.tx_type}}</td>\n        <td><small><small>{{obj.burn_block_time_iso}}</small></small></td>\n    </tr>\n</table>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 690,
        "y": 2220,
        "wires": [
            []
        ]
    },
    {
        "id": "76ca3c24.4327d4",
        "type": "link out",
        "z": "88cec2c0.c8804",
        "name": "Pass History to Wallet Receive (testnet)",
        "links": [
            "ffd4778e.e65b28",
            "653d27ca.5d8af8"
        ],
        "x": 1735,
        "y": 1040,
        "wires": []
    },
    {
        "id": "7ad225d6.1b055c",
        "type": "link out",
        "z": "88cec2c0.c8804",
        "name": "Pass History to Wallet Receive (mainnet)",
        "links": [
            "64410f5b.984c5"
        ],
        "x": 1735,
        "y": 240,
        "wires": []
    },
    {
        "id": "64410f5b.984c5",
        "type": "link in",
        "z": "53028f3b.590b5",
        "name": "Get Mainnet Address History Object",
        "links": [
            "7ad225d6.1b055c"
        ],
        "x": 435,
        "y": 2220,
        "wires": [
            [
                "c5dfe14b.c2cbf"
            ]
        ]
    },
    {
        "id": "ffd4778e.e65b28",
        "type": "link in",
        "z": "53028f3b.590b5",
        "name": "Get Testnet Address History Object",
        "links": [
            "76ca3c24.4327d4"
        ],
        "x": 435,
        "y": 2460,
        "wires": [
            [
                "4fdb78f4.9a1728"
            ]
        ]
    },
    {
        "id": "fd0c4350.1d133",
        "type": "comment",
        "z": "613e85c9.c6210c",
        "name": "Clarity SIP-009 NFT - Standard",
        "info": "https://github.com/stacksgov/sips/blob/main/sips/sip-009/sip-009-nft-standard.md",
        "x": 150,
        "y": 1180,
        "wires": []
    },
    {
        "id": "f65c0e25.9c82d",
        "type": "function",
        "z": "613e85c9.c6210c",
        "name": "create nft-trait.clar",
        "func": "//take the inputs and construct the Clarity contract file contents\nmsg.payload =   \"(define-trait nft-trait\\n\" +\n                \"  (\\n\" +\n                \"    ;; Last token ID, limited to uint range\\n\" +\n                \"    (get-last-token-id () (response uint uint))\\n\" +\n                \"\\n\" +\n                \"    ;; URI for metadata associated with the token \\n\" +\n                \"    (get-token-uri () (response (optional (string-utf8 256)) uint))\\n\" +\n                \"\\n\" +\n                \"    ;; Owner of a given token identifier\\n\" +\n                \"    (get-owner (uint) (response (optional principal) uint))\\n\" +\n                \"\\n\" +\n                \"    ;; Transfer from the sender to a new principal\\n\" +\n                \"    (transfer (uint principal principal) (response bool uint))\\n\" +\n                \"  )\\n\" +\n                \")\";\n               \nmsg.filename = \"nft-trait.clar\"; // name the contract same as input custom token name\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3030,
        "y": 1520,
        "wires": [
            [
                "140f3230.5c18ae",
                "9d9f09c0.f80998"
            ]
        ]
    },
    {
        "id": "fe53aae9.15c4a8",
        "type": "comment",
        "z": "613e85c9.c6210c",
        "name": "Clarity SIP-010 FT - Standard",
        "info": "https://github.com/stacksgov/sips/blob/hstove-feat/sip-10-ft/sips/sip-010/sip-010-fungible-token-standard.md",
        "x": 140,
        "y": 680,
        "wires": []
    },
    {
        "id": "a827d944.6e6138",
        "type": "ui_button",
        "z": "53028f3b.590b5",
        "name": "Faucet BTN",
        "group": "3348dd5e.728a92",
        "order": 8,
        "width": 1,
        "height": 1,
        "passthru": false,
        "label": "",
        "tooltip": "Get Testnet Tokens from Faucet",
        "color": "",
        "bgcolor": "",
        "icon": "fa-tint",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 730,
        "y": 2420,
        "wires": [
            [
                "9e5990a.c851f7"
            ]
        ]
    },
    {
        "id": "9e5990a.c851f7",
        "type": "function",
        "z": "53028f3b.590b5",
        "name": "get global testnetdepositaddress",
        "func": "var testnetdepositaddress = global.get(\"testnetdepositaddress\");\n\nmsg.testnetdepositaddress = testnetdepositaddress;\n\nmsg.payload = testnetdepositaddress;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 2420,
        "wires": [
            [
                "54fc3f11.12cfe"
            ]
        ]
    },
    {
        "id": "54fc3f11.12cfe",
        "type": "http request",
        "z": "53028f3b.590b5",
        "name": "POST Request",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://stacks-node-api.testnet.stacks.co/extended/v1/faucets/stx?address={{payload}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1320,
        "y": 2420,
        "wires": [
            [
                "fd33c59a.3d90d8"
            ]
        ]
    },
    {
        "id": "fd33c59a.3d90d8",
        "type": "json",
        "z": "53028f3b.590b5",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1530,
        "y": 2440,
        "wires": [
            [
                "64d280dc.e00de",
                "92d0d823.15acb8"
            ]
        ]
    },
    {
        "id": "92d0d823.15acb8",
        "type": "switch",
        "z": "53028f3b.590b5",
        "name": "",
        "property": "payload.success",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 1690,
        "y": 2440,
        "wires": [
            [
                "37360f82.9c624"
            ],
            [
                "3f0f2136.9439ae"
            ],
            [
                "80728f11.16d8d"
            ]
        ]
    },
    {
        "id": "80728f11.16d8d",
        "type": "ui_toast",
        "z": "53028f3b.590b5",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "topic": "Faucet Error",
        "name": "Error",
        "x": 1870,
        "y": 2460,
        "wires": [
            []
        ]
    },
    {
        "id": "3f0f2136.9439ae",
        "type": "ui_toast",
        "z": "53028f3b.590b5",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "topic": "Faucet Failure",
        "name": "Failure",
        "x": 1870,
        "y": 2420,
        "wires": [
            []
        ]
    },
    {
        "id": "37360f82.9c624",
        "type": "ui_toast",
        "z": "53028f3b.590b5",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "topic": "Faucet Success",
        "name": "Success",
        "x": 1880,
        "y": 2380,
        "wires": [
            []
        ]
    },
    {
        "id": "64d280dc.e00de",
        "type": "debug",
        "z": "53028f3b.590b5",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1710,
        "y": 2360,
        "wires": []
    },
    {
        "id": "984d1c1c.ae8b1",
        "type": "function",
        "z": "53028f3b.590b5",
        "name": "Send STX (Testnet)",
        "func": "const network = new stacksNetwork.StacksTestnet(); // or StacksTestnet\nconst senderKey = global.get('stxprivkey'); //get the STX Private Key Stored Globally\n\n// skip automatic fee estimation\nconst fee = new BigNum(180);\nconst memo = msg.payload.stxmemo;\n\nconst txOptions = {\n    recipient: msg.payload.stxdestination,\n    amount : new BigNum(msg.payload.stxamount),\n    fee,\n    senderKey,\n    network,\n    memo,\n    anchorMode: stacksTransactions.AnchorMode.Any //added to ensure 2.0.1 compatability\n};\n\nconst transaction = await stacksTransactions.makeSTXTokenTransfer(txOptions);\nconst broadcastTxn = await stacksTransactions.broadcastTransaction(transaction, network);\n\nmsg.payload = transaction;\nmsg.blockchain = \"0x\" + broadcastTxn;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "BigNum",
                "module": "bn.js"
            },
            {
                "var": "stacksTransactions",
                "module": "@stacks/transactions"
            },
            {
                "var": "stacksNetwork",
                "module": "@stacks/network"
            }
        ],
        "x": 570,
        "y": 1740,
        "wires": [
            [
                "58624acc.697034"
            ]
        ]
    },
    {
        "id": "64c740c.17d6fc",
        "type": "switch",
        "z": "53028f3b.590b5",
        "name": "network check",
        "property": "payload.stxnetwork",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 360,
        "y": 1740,
        "wires": [
            [
                "ab1900ed.7b072"
            ],
            [
                "984d1c1c.ae8b1"
            ],
            []
        ]
    },
    {
        "id": "97bb4c64.615a",
        "type": "comment",
        "z": "613e85c9.c6210c",
        "name": "FT Meta Data Sample",
        "info": "{\n  \"title\": \"Asset Metadata\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"name\": {\n      \"type\": \"string\",\n      \"description\": \"Identifies the asset to which this token represents\"\n    },\n    \"description\": {\n      \"type\": \"string\",\n      \"description\": \"Describes the asset to which this token represents\"\n    },\n    \"image\": {\n      \"type\": \"string\",\n      \"description\": \"A URI pointing to a resource with mime type image/* representing the asset to which this token represents. Consider making any images at a width between 320 and 1080 pixels and aspect ratio between 1.91:1 and 4:5 inclusive.\"\n    }\n  }\n}",
        "x": 120,
        "y": 640,
        "wires": []
    },
    {
        "id": "65bea653.555e78",
        "type": "comment",
        "z": "613e85c9.c6210c",
        "name": "NFT Meta Data Sample",
        "info": "{\n  \"title\": \"Asset Metadata\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"name\": {\n      \"type\": \"string\",\n      \"description\": \"Identifies the asset to which this token represents\"\n    },\n    \"description\": {\n      \"type\": \"string\",\n      \"description\": \"Describes the asset to which this token represents\"\n    },\n    \"image\": {\n      \"type\": \"string\",\n      \"description\": \"A URI pointing to a resource with mime type image/* representing the asset to which this token represents. Consider making any images at a width between 320 and 1080 pixels and aspect ratio between 1.91:1 and 4:5 inclusive.\"\n    }\n  }\n}",
        "x": 120,
        "y": 1140,
        "wires": []
    },
    {
        "id": "273d1bb1.c92c64",
        "type": "http request",
        "z": "88cec2c0.c8804",
        "name": "get memepool",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1200,
        "y": 940,
        "wires": [
            [
                "a4559142.80ae5"
            ]
        ]
    },
    {
        "id": "f56384b0.2d0ce8",
        "type": "function",
        "z": "88cec2c0.c8804",
        "name": "create msg.url (testnet memepool)",
        "func": "//var nettype = global.get(\"nettype\");\nvar nettype = \"stacks-node-api.testnet.stacks.co\";//testnet\n\nvar testnetdepositaddress = msg.testnetdepositaddress;\n\nmsg.url = \"https://\" + nettype + \"/extended/v1/tx/mempool?address=\" + testnetdepositaddress;\nmsg.testnetdepositaddress = testnetdepositaddress; \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 940,
        "wires": [
            [
                "273d1bb1.c92c64"
            ]
        ]
    },
    {
        "id": "1870731a.10f11d",
        "type": "function",
        "z": "88cec2c0.c8804",
        "name": "create msg.url (mainnet memepool)",
        "func": "//var nettype = global.get(\"nettype\");\nvar nettype = \"stacks-node-api.mainnet.stacks.co\";//mainnet\n\nvar depositaddress = msg.depositaddress;\n\nmsg.url = \"https://\" + nettype + \"/extended/v1/tx/mempool?address=\" + depositaddress;\nmsg.depositaddress = depositaddress; \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 160,
        "wires": [
            [
                "47c44b8a.021464"
            ]
        ]
    },
    {
        "id": "47c44b8a.021464",
        "type": "http request",
        "z": "88cec2c0.c8804",
        "name": "get memepool",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1160,
        "y": 160,
        "wires": [
            [
                "d68a95ec.a7e598"
            ]
        ]
    },
    {
        "id": "a4559142.80ae5",
        "type": "json",
        "z": "88cec2c0.c8804",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1370,
        "y": 940,
        "wires": [
            [
                "2a3c827c.45e60e"
            ]
        ]
    },
    {
        "id": "d68a95ec.a7e598",
        "type": "json",
        "z": "88cec2c0.c8804",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1310,
        "y": 160,
        "wires": [
            [
                "8a5e2fda.f7863"
            ]
        ]
    },
    {
        "id": "82b073a2.33169",
        "type": "debug",
        "z": "88cec2c0.c8804",
        "name": "mainnet memepool debugger",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2280,
        "y": 120,
        "wires": []
    },
    {
        "id": "1afa4aa9.95a465",
        "type": "debug",
        "z": "88cec2c0.c8804",
        "name": "testnet memepool debugger",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2340,
        "y": 900,
        "wires": []
    },
    {
        "id": "13cb51b2.92190e",
        "type": "debug",
        "z": "53028f3b.590b5",
        "name": "mainnet send debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1260,
        "y": 1740,
        "wires": []
    },
    {
        "id": "fd0565f0.4e60b8",
        "type": "ui_button",
        "z": "53028f3b.590b5",
        "name": "",
        "group": "433bfb40.a488a4",
        "order": 4,
        "width": 2,
        "height": 1,
        "passthru": false,
        "label": "DEFAULT",
        "tooltip": "WARNING DO NOT DEFAULT UNLESS YOU BACKED UP YOUR EXISTING WALLET, ELSE YOU WILL NOT BE ABLE TO IMPORT!",
        "color": "Black",
        "bgcolor": "Red",
        "icon": "fa-refresh",
        "payload": "If you didn't back up your secret key you will not be able to Import!",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 120,
        "y": 920,
        "wires": [
            [
                "2b4eb4a9.5e9cac"
            ]
        ]
    },
    {
        "id": "2b4eb4a9.5e9cac",
        "type": "ui_toast",
        "z": "53028f3b.590b5",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "YES Default",
        "cancel": "NO DO NOT Default",
        "raw": false,
        "topic": "Are you sure you want to Default?",
        "name": "",
        "x": 310,
        "y": 920,
        "wires": [
            [
                "77c60c8f.807444"
            ]
        ]
    },
    {
        "id": "aab38fff.766ac",
        "type": "ui_toast",
        "z": "53028f3b.590b5",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "Yes I Made A Back Up",
        "cancel": "No I Need to Go Back",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 650,
        "y": 960,
        "wires": [
            [
                "4fefa72b.f1a018",
                "5c29b72a.ccd058"
            ]
        ]
    },
    {
        "id": "4fefa72b.f1a018",
        "type": "debug",
        "z": "53028f3b.590b5",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 900,
        "wires": []
    },
    {
        "id": "5c29b72a.ccd058",
        "type": "switch",
        "z": "53028f3b.590b5",
        "name": "Checker",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Yes I Made A Back Up",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "No I Need to Go Back",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 800,
        "y": 960,
        "wires": [
            [
                "4ffc51f.ae497b"
            ],
            [],
            []
        ]
    },
    {
        "id": "77c60c8f.807444",
        "type": "switch",
        "z": "53028f3b.590b5",
        "name": "Checker",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "YES Default",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "NO DO NOT Default",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 500,
        "y": 920,
        "wires": [
            [
                "d1ea708.ffe4f9"
            ],
            [],
            []
        ]
    },
    {
        "id": "d1ea708.ffe4f9",
        "type": "link out",
        "z": "53028f3b.590b5",
        "name": "pass to Default Wallet",
        "links": [
            "c5abc854.52b348"
        ],
        "x": 615,
        "y": 880,
        "wires": []
    },
    {
        "id": "c5abc854.52b348",
        "type": "link in",
        "z": "53028f3b.590b5",
        "name": "force Default Wallet",
        "links": [
            "d1ea708.ffe4f9"
        ],
        "x": 415,
        "y": 20,
        "wires": [
            [
                "41c98019.533a3"
            ]
        ]
    },
    {
        "id": "84698dd4.df52a",
        "type": "ui_switch",
        "z": "53028f3b.590b5",
        "name": "",
        "label": "",
        "tooltip": "Status of Secret Key Discovery",
        "group": "69d70456.083fac",
        "order": 7,
        "width": 1,
        "height": 1,
        "passthru": false,
        "decouple": "true",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "fa-unlock",
        "oncolor": "Green",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "fa-exclamation-triangle",
        "offcolor": "Yellow",
        "animate": true,
        "x": 1670,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "ae0bdb1.f264628",
        "type": "function",
        "z": "53028f3b.590b5",
        "name": "get secretkey from global",
        "func": "var secretkey = global.get(\"secretkey\");\n\nmsg.payload = secretkey;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 1020,
        "wires": [
            [
                "a3a83849.586468"
            ]
        ]
    },
    {
        "id": "a3a83849.586468",
        "type": "switch",
        "z": "53028f3b.590b5",
        "name": "Empty?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "empty"
            },
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 1230,
        "y": 1020,
        "wires": [
            [
                "4386c288.889d4c"
            ],
            [
                "d3969942.03aec8"
            ],
            []
        ]
    },
    {
        "id": "da9b7b74.92a078",
        "type": "inject",
        "z": "53028f3b.590b5",
        "name": "every 2s",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 830,
        "y": 1020,
        "wires": [
            [
                "ae0bdb1.f264628"
            ]
        ]
    },
    {
        "id": "d3969942.03aec8",
        "type": "function",
        "z": "53028f3b.590b5",
        "name": "set true",
        "func": "msg.payload = true;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1420,
        "y": 1020,
        "wires": [
            [
                "84698dd4.df52a"
            ]
        ]
    },
    {
        "id": "4386c288.889d4c",
        "type": "function",
        "z": "53028f3b.590b5",
        "name": "set true",
        "func": "msg.payload = false;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1420,
        "y": 980,
        "wires": [
            [
                "84698dd4.df52a"
            ]
        ]
    },
    {
        "id": "840717c1.bd7348",
        "type": "ui_switch",
        "z": "42c07592.8d970c",
        "name": "Subscribe Button",
        "label": "",
        "tooltip": "Subscribe or Unsubscribe",
        "group": "be1bffc8.e254c",
        "order": 4,
        "width": "1",
        "height": 1,
        "passthru": false,
        "decouple": "true",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "fa-bell",
        "oncolor": "Green",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "fa-bell-slash-o",
        "offcolor": "White",
        "animate": true,
        "x": 2690,
        "y": 2820,
        "wires": [
            [
                "42cb42ff.22756c",
                "8dbf40c7.b43c5"
            ]
        ]
    },
    {
        "id": "bee6c88d.9c91d8",
        "type": "inject",
        "z": "42c07592.8d970c",
        "name": "check every 1sec",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1990,
        "y": 2800,
        "wires": [
            [
                "96347598.2acfc8"
            ]
        ]
    },
    {
        "id": "2e5c9809.47d898",
        "type": "ui_text_input",
        "z": "725ce57a.a25e4c",
        "name": "Name Input",
        "label": "Name to Register",
        "tooltip": "Provide Name Input",
        "group": "4169470.fb991b8",
        "order": 1,
        "width": "8",
        "height": "1",
        "passthru": true,
        "mode": "text",
        "delay": "0",
        "topic": "reginput",
        "topicType": "str",
        "x": 130,
        "y": 280,
        "wires": [
            [
                "bc3ff6d0.ee84c8"
            ]
        ]
    },
    {
        "id": "35abb96c.b1c1e6",
        "type": "ui_dropdown",
        "z": "725ce57a.a25e4c",
        "name": "",
        "label": "",
        "tooltip": "Select a Namespace",
        "place": "Select Namespace",
        "group": "4169470.fb991b8",
        "order": 2,
        "width": "4",
        "height": "1",
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": ".id",
                "value": ".id",
                "type": "str"
            },
            {
                "label": ".btc",
                "value": ".btc",
                "type": "str"
            },
            {
                "label": ".stx",
                "value": ".stx",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "regtype",
        "topicType": "str",
        "x": 120,
        "y": 320,
        "wires": [
            [
                "bc3ff6d0.ee84c8"
            ]
        ]
    },
    {
        "id": "52664a19.8b0074",
        "type": "ui_button",
        "z": "725ce57a.a25e4c",
        "name": "Register",
        "group": "b8de1f8f.ccd29",
        "order": 4,
        "width": "13",
        "height": "1",
        "passthru": false,
        "label": "Register Name",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "fa-cart-plus",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 160,
        "y": 800,
        "wires": [
            [
                "eab25160.70c54"
            ]
        ]
    },
    {
        "id": "a0d1ed29.96fe2",
        "type": "ui_template",
        "z": "725ce57a.a25e4c",
        "group": "2433119.0a997ee",
        "name": "Name Unavailable Page",
        "order": 0,
        "width": "13",
        "height": "11",
        "format": "<h3>Name Unavailable</h3>\n<p>Name: {{msg.tempfqn}}</p>\n<p>Owner: {{msg.payload.address}}</p>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 1610,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "98e21dbf.8bee1",
        "type": "function",
        "z": "725ce57a.a25e4c",
        "name": "Registrar RegNo (cant)",
        "func": "msg.payload = {\n  \"group\": {\n    \"hide\": [\n      \"Registrar_RegDefault\",\n      \"Registrar_RegAttempt\",      \n      \"Registrar_RegYes\",\n      \"Registrar_RegWTF\"\n    ],\n    \"show\": [\n      \"Registrar_Header\",\n      \"Registrar_RegNo\"\n    ],\n    \"focus\": true\n  }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1610,
        "y": 280,
        "wires": [
            [
                "134958a6.b78bb7"
            ]
        ]
    },
    {
        "id": "134958a6.b78bb7",
        "type": "ui_ui_control",
        "z": "725ce57a.a25e4c",
        "name": "",
        "events": "all",
        "x": 1860,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "24a39c5c.a918b4",
        "type": "function",
        "z": "725ce57a.a25e4c",
        "name": "Registrar RegYes (can)",
        "func": "msg.payload = {\n  \"group\": {\n    \"hide\": [\n      \"Registrar_RegDefault\",\n      \"Registrar_RegAttempt\",\n      \"Registrar_RegNo\",\n      \"Registrar_RegWTF\"\n    ],\n    \"show\": [\n      \"Registrar_Header\",\n      \"Registrar_RegYes\"\n    ],\n    \"focus\": true\n  }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1610,
        "y": 320,
        "wires": [
            [
                "134958a6.b78bb7",
                "5d04bf1c.6db11"
            ]
        ]
    },
    {
        "id": "c6292cd.c3d33d",
        "type": "function",
        "z": "725ce57a.a25e4c",
        "name": "get name (mainnet)",
        "func": "var nettype = \"stacks-node-api.mainnet.stacks.co\"; //mainnet\nvar tempfqn = msg.payload; //fully qualified name to search\n\nmsg.url = \"https://\" + nettype + \"/v1/names/\" + tempfqn;\nmsg.tempfqn = tempfqn;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 320,
        "wires": [
            [
                "4ee684e6.5b971c",
                "f3fedaf8.77da78"
            ]
        ]
    },
    {
        "id": "bc3ff6d0.ee84c8",
        "type": "join",
        "z": "725ce57a.a25e4c",
        "name": "join inputs",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 300,
        "y": 320,
        "wires": [
            [
                "ec6956df.0a1538"
            ]
        ]
    },
    {
        "id": "ec6956df.0a1538",
        "type": "function",
        "z": "725ce57a.a25e4c",
        "name": "concat to form tempfqn",
        "func": "var reginput = msg.payload.reginput;\nvar regtype = msg.payload.regtype;\n\nmsg.payload = reginput + regtype;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 320,
        "wires": [
            [
                "cb2266cf.3a47e8",
                "c6292cd.c3d33d"
            ]
        ]
    },
    {
        "id": "f3fedaf8.77da78",
        "type": "debug",
        "z": "725ce57a.a25e4c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "url",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 280,
        "wires": []
    },
    {
        "id": "4ee684e6.5b971c",
        "type": "http request",
        "z": "725ce57a.a25e4c",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "persist": false,
        "authType": "",
        "x": 910,
        "y": 320,
        "wires": [
            [
                "8c6bebfc.790968"
            ]
        ]
    },
    {
        "id": "6813f2.73f46c1",
        "type": "debug",
        "z": "725ce57a.a25e4c",
        "name": "registrar input debugger",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 380,
        "wires": []
    },
    {
        "id": "8c6bebfc.790968",
        "type": "json",
        "z": "725ce57a.a25e4c",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1070,
        "y": 320,
        "wires": [
            [
                "6813f2.73f46c1",
                "630a9ff5.6005a"
            ]
        ]
    },
    {
        "id": "630a9ff5.6005a",
        "type": "switch",
        "z": "725ce57a.a25e4c",
        "name": "Owning Address Found?",
        "property": "payload.address",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "empty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 1330,
        "y": 320,
        "wires": [
            [
                "98e21dbf.8bee1",
                "a0d1ed29.96fe2"
            ],
            [
                "24a39c5c.a918b4"
            ],
            [
                "24a39c5c.a918b4"
            ]
        ]
    },
    {
        "id": "b1cd5ce4.1ae6e",
        "type": "link in",
        "z": "e83b2318.6f5c6",
        "name": "to set Global (tempfqn input)",
        "links": [
            "cb2266cf.3a47e8"
        ],
        "x": 155,
        "y": 780,
        "wires": [
            [
                "e65beffa.3c2c7"
            ]
        ]
    },
    {
        "id": "e65beffa.3c2c7",
        "type": "change",
        "z": "e83b2318.6f5c6",
        "name": "set tempfqn",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "tempfqn",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 510,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "cb2266cf.3a47e8",
        "type": "link out",
        "z": "725ce57a.a25e4c",
        "name": "pass to Global (tempfqn)",
        "links": [
            "b1cd5ce4.1ae6e"
        ],
        "x": 535,
        "y": 260,
        "wires": []
    },
    {
        "id": "5d04bf1c.6db11",
        "type": "function",
        "z": "725ce57a.a25e4c",
        "name": "get Price of tempfqn (mainnet)",
        "func": "var nettype = \"stacks-node-api.mainnet.stacks.co\"; //mainnet\n//var nettype = \"stacks-node-api.testnet.stacks.co\"; //testnet\nvar tempfqn = global.get(\"tempfqn\");\n\nmsg.url = \"https://\" + nettype + \"/v2/prices/names/\" + tempfqn;\nmsg.tempfqn = tempfqn;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1930,
        "y": 320,
        "wires": [
            [
                "fdf83d9.54f0bc"
            ]
        ]
    },
    {
        "id": "fdf83d9.54f0bc",
        "type": "http request",
        "z": "725ce57a.a25e4c",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "persist": false,
        "authType": "",
        "x": 2170,
        "y": 320,
        "wires": [
            [
                "600252c7.17b18c"
            ]
        ]
    },
    {
        "id": "600252c7.17b18c",
        "type": "json",
        "z": "725ce57a.a25e4c",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 2330,
        "y": 320,
        "wires": [
            [
                "2f86c1cb.0da2de",
                "1bd39f72.eeb721",
                "434b1ef0.6b189"
            ]
        ]
    },
    {
        "id": "2f86c1cb.0da2de",
        "type": "debug",
        "z": "725ce57a.a25e4c",
        "name": "registrar price debugger 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2550,
        "y": 360,
        "wires": []
    },
    {
        "id": "1bd39f72.eeb721",
        "type": "ui_template",
        "z": "725ce57a.a25e4c",
        "group": "b8de1f8f.ccd29",
        "name": "Name Available w/ Price Quote",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<h3>Name Available</h3>\n<p>Name: {{msg.tempfqn}}</p>\n<p>Price: {{msg.payload.amount}} mSTX </p>\n\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 2570,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "eab25160.70c54",
        "type": "function",
        "z": "725ce57a.a25e4c",
        "name": "tempfqn can register? (mainnet)",
        "func": "const network = new stacksNetwork.StacksMainnet();\n\nconst fullyQualifiedName = global.get(\"tempfqn\");\n\nconst welp = await stacksBns.canRegisterName({ fullyQualifiedName, network});\n\nmsg.tempfqn = fullyQualifiedName;\nmsg.payload = welp;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "stacksNetwork",
                "module": "@stacks/network"
            },
            {
                "var": "stacksBns",
                "module": "@stacks/bns"
            }
        ],
        "x": 390,
        "y": 800,
        "wires": [
            [
                "a3c85ec8.5d8ac",
                "e5fe8995.38a418"
            ]
        ]
    },
    {
        "id": "104ad3fa.112e2c",
        "type": "ui_toast",
        "z": "725ce57a.a25e4c",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "Yes Register",
        "cancel": "Cancel",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 1010,
        "y": 800,
        "wires": [
            [
                "e26adef.00f2d2"
            ]
        ]
    },
    {
        "id": "e26adef.00f2d2",
        "type": "switch",
        "z": "725ce57a.a25e4c",
        "name": "checker",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Yes Register",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Cancel",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 1180,
        "y": 800,
        "wires": [
            [
                "584ca307.dc6f4c",
                "975d279b.c8dc48"
            ],
            [],
            []
        ]
    },
    {
        "id": "e5fe8995.38a418",
        "type": "debug",
        "z": "725ce57a.a25e4c",
        "name": "can register? debugger",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 760,
        "wires": []
    },
    {
        "id": "a3c85ec8.5d8ac",
        "type": "switch",
        "z": "725ce57a.a25e4c",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 610,
        "y": 800,
        "wires": [
            [
                "3516c0fe.44a5a"
            ],
            []
        ]
    },
    {
        "id": "3516c0fe.44a5a",
        "type": "function",
        "z": "725ce57a.a25e4c",
        "name": "confirm message",
        "func": "var fqntoreg = msg.tempfqn;\n\nmsg.payload = \"Are you sure you want to Register\\n\" + fqntoreg;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 800,
        "wires": [
            [
                "104ad3fa.112e2c"
            ]
        ]
    },
    {
        "id": "fb48ad76.1f1dc",
        "type": "function",
        "z": "725ce57a.a25e4c",
        "name": "error catcher Registrar RegWTF (cant)",
        "func": "msg.payload = {\n  \"group\": {\n    \"hide\": [\n      \"Registrar_RegDefault\",\n      \"Registrar_RegAttempt\",\n      \"Registrar_RegYes\",\n      \"Registrar_RegNo\"\n    ],\n    \"show\": [\n      \"Registrar_Header\",\n      \"Registrar_RegWTF\"\n    ],\n    \"focus\": true\n  }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2730,
        "y": 300,
        "wires": [
            [
                "b30d8328.48cf"
            ]
        ]
    },
    {
        "id": "b30d8328.48cf",
        "type": "ui_ui_control",
        "z": "725ce57a.a25e4c",
        "name": "",
        "events": "all",
        "x": 2940,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "434b1ef0.6b189",
        "type": "switch",
        "z": "725ce57a.a25e4c",
        "name": "",
        "property": "payload.error",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2490,
        "y": 320,
        "wires": [
            [
                "fb48ad76.1f1dc"
            ],
            []
        ]
    },
    {
        "id": "d6899bdb.be8ff8",
        "type": "ui_template",
        "z": "725ce57a.a25e4c",
        "group": "79c53eca.29302",
        "name": "Name Unrecognized Page",
        "order": 0,
        "width": "0",
        "height": "0",
        "format": "<h3>Name Unrecognized</h3>\n<p>This name doesn't seem match a fully qualified name format.</p>\n<p>Please try a different name.</p>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 2820,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "cb0261b0.6a851",
        "type": "function",
        "z": "725ce57a.a25e4c",
        "name": "Registrar RegDefault (unregistered)",
        "func": "msg.payload = {\n  \"group\": {\n    \"hide\": [\n      \"Registrar_RegAttempt\",\n      \"Registrar_RegYes\",\n      \"Registrar_RegNo\",\n      \"Registrar_RegWTF\"\n    ],\n    \"show\": [\n      \"Registrar_Header\",\n      \"Registrar_RegDefault\"\n    ],\n    \"focus\": true\n  }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 100,
        "wires": [
            [
                "21d3cee1.e36bb2"
            ]
        ]
    },
    {
        "id": "cf0ed04.25bf73",
        "type": "ui_template",
        "z": "725ce57a.a25e4c",
        "group": "ffd631ab.0ac03",
        "name": "Name Unavailable Page",
        "order": 0,
        "width": "0",
        "height": "0",
        "format": "<h3>Name Not Detected</h3>\n<p>You do not appear to have yet registered a name.</p>\n<p>Search above for an available name to register.</p>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 750,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "1e38e9cb.c3a026",
        "type": "inject",
        "z": "725ce57a.a25e4c",
        "name": "check for name (default)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 100,
        "wires": [
            [
                "cb0261b0.6a851"
            ]
        ]
    },
    {
        "id": "21d3cee1.e36bb2",
        "type": "ui_ui_control",
        "z": "725ce57a.a25e4c",
        "name": "",
        "events": "all",
        "x": 800,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "f9dd5ab3.7f4518",
        "type": "comment",
        "z": "725ce57a.a25e4c",
        "name": "Relative to Name Detection / Default Page",
        "info": "",
        "x": 240,
        "y": 60,
        "wires": []
    },
    {
        "id": "1759713e.73692f",
        "type": "comment",
        "z": "725ce57a.a25e4c",
        "name": "Relative to Name Input and Lookup",
        "info": "",
        "x": 200,
        "y": 240,
        "wires": []
    },
    {
        "id": "2d0cbc02.0acd54",
        "type": "comment",
        "z": "725ce57a.a25e4c",
        "name": "Relative to Registeration",
        "info": "",
        "x": 210,
        "y": 720,
        "wires": []
    },
    {
        "id": "52eb73b0.26628c",
        "type": "comment",
        "z": "e83b2318.6f5c6",
        "name": "Documentation ",
        "info": "Stacks.js Library Reference\n\nhttps://blockstack.github.io/stacks.js/index.html",
        "x": 160,
        "y": 1240,
        "wires": []
    },
    {
        "id": "e5721b0.3c23ce8",
        "type": "comment",
        "z": "725ce57a.a25e4c",
        "name": "buildRegisterNameTx documentation",
        "info": "https://blockstack.github.io/stacks.js/modules/bns.html#buildregisternametx",
        "x": 1560,
        "y": 700,
        "wires": []
    },
    {
        "id": "975d279b.c8dc48",
        "type": "function",
        "z": "725ce57a.a25e4c",
        "name": "fqn register (Mainnet)",
        "func": "const network = new stacksNetwork.StacksMainnet(); //or use Testnet\n\nconst name = global.get(\"tempfqn\");\nconst salt = global.get(\"saltzero\");\nconst zonefile = \"yo\";//need to give user option to plug in their zonefile during reg process if so desired.\nconst publicKey = global.get(\"depositaddress\");//or use testnetdepositaddress\n\nconst unsignedTX = await stacksBns.buildRegisterNameTX({ name, salt, zonefile, publicKey, network});\n\nmsg.payload = unsignedTX;\n//msg.blockchain = \"0x\" + unsignedTX;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "stacksNetwork",
                "module": "@stacks/network"
            },
            {
                "var": "stacksBns",
                "module": "@stacks/bns"
            }
        ],
        "x": 1440,
        "y": 780,
        "wires": [
            [
                "cc381e3c.ed83b",
                "346e6cdd.6762f4"
            ]
        ]
    },
    {
        "id": "346e6cdd.6762f4",
        "type": "debug",
        "z": "725ce57a.a25e4c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1670,
        "y": 780,
        "wires": []
    },
    {
        "id": "cc381e3c.ed83b",
        "type": "ui_template",
        "z": "725ce57a.a25e4c",
        "group": "46da4633.73efe8",
        "name": "Name Registration Attempt",
        "order": 0,
        "width": "13",
        "height": "6",
        "format": "<h3>Name Pending Confirmations</h3>\n<h4>{{msg.pendingfqn}}</h4>\n<p>{{msg.blockchain}}</p>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 1720,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "a9991487.0825e8",
        "type": "change",
        "z": "e83b2318.6f5c6",
        "name": "set saltzero",
        "rules": [
            {
                "t": "move",
                "p": "payload.wallet.accounts[0].salt",
                "pt": "msg",
                "to": "saltzero",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 510,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "584ca307.dc6f4c",
        "type": "function",
        "z": "725ce57a.a25e4c",
        "name": "Registrar RegAttempt (generic)",
        "func": "msg.payload = {\n  \"group\": {\n    \"hide\": [\n      \"Registrar_RegDefault\",\n      \"Registrar_RegYes\",\n      \"Registrar_RegNo\",\n      \"Registrar_RegWTF\"\n    ],\n    \"show\": [\n      \"Registrar_Header\",\n      \"Registrar_RegAttempt\"\n    ],\n    \"focus\": true\n  }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 740,
        "wires": [
            [
                "4264957d.db1b5c"
            ]
        ]
    },
    {
        "id": "4264957d.db1b5c",
        "type": "ui_ui_control",
        "z": "725ce57a.a25e4c",
        "name": "",
        "events": "all",
        "x": 1800,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "b6a98e89.c5e68",
        "type": "ui_dropdown",
        "z": "88cec2c0.c8804",
        "name": "Filter",
        "label": "",
        "tooltip": "",
        "place": "Show...",
        "group": "f086e156.9d17b",
        "order": 3,
        "width": 4,
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "All",
                "value": "all",
                "type": "str"
            },
            {
                "label": "Sent",
                "value": "sent",
                "type": "str"
            },
            {
                "label": "Received",
                "value": "received",
                "type": "str"
            },
            {
                "label": "Token Transfers",
                "value": "token_transfer",
                "type": "str"
            },
            {
                "label": "Smart Contracts",
                "value": "smart_contract",
                "type": "str"
            },
            {
                "label": "Function Calls",
                "value": "function_call",
                "type": "str"
            },
            {
                "label": "Coinbase",
                "value": "coinbase",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "x": 370,
        "y": 420,
        "wires": [
            [
                "e94b6791.e147d8"
            ]
        ]
    },
    {
        "id": "bbb12d5c.582c5",
        "type": "function",
        "z": "88cec2c0.c8804",
        "name": "filter where tx_type is equal to token_transfer",
        "func": "const obj = msg.payload;\n\nconst filtered = obj.filter(by => by.tx_type === 'token_transfer');\n\nmsg.payload = filtered;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 500,
        "wires": [
            [
                "84d8c5e6.9c38d8"
            ]
        ]
    },
    {
        "id": "9138d23.79be03",
        "type": "switch",
        "z": "88cec2c0.c8804",
        "name": "show router",
        "property": "txfilter",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "all",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "sent",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "received",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "token_transfer",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "smart_contract",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "function_call",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "coinbase",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 7,
        "x": 830,
        "y": 420,
        "wires": [
            [
                "84d8c5e6.9c38d8"
            ],
            [
                "4e106a61.ae8674"
            ],
            [
                "c58a8101.17cc4"
            ],
            [
                "bbb12d5c.582c5"
            ],
            [
                "155975fe.fcdc8a"
            ],
            [
                "b5c6dc09.76271"
            ],
            [
                "e3ac2a86.83f9f8"
            ]
        ]
    },
    {
        "id": "155975fe.fcdc8a",
        "type": "function",
        "z": "88cec2c0.c8804",
        "name": "filter where tx_type is equal to smart_contract",
        "func": "const obj = msg.payload;\n\nconst filtered = obj.filter(by => by.tx_type === 'smart_contract');\n\nmsg.payload = filtered;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 540,
        "wires": [
            [
                "84d8c5e6.9c38d8"
            ]
        ]
    },
    {
        "id": "b5c6dc09.76271",
        "type": "function",
        "z": "88cec2c0.c8804",
        "name": "filter where tx_type is equal to function_call",
        "func": "const obj = msg.payload;\n\nconst filtered = obj.filter(by => by.tx_type === 'function_call');\n\nmsg.payload = filtered;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 580,
        "wires": [
            [
                "84d8c5e6.9c38d8"
            ]
        ]
    },
    {
        "id": "e3ac2a86.83f9f8",
        "type": "function",
        "z": "88cec2c0.c8804",
        "name": "filter where tx_type is equal to coinbase",
        "func": "const obj = msg.payload;\n\nconst filtered = obj.filter(by => by.tx_type === 'coinbase');\n\nmsg.payload = filtered;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 620,
        "wires": [
            [
                "84d8c5e6.9c38d8"
            ]
        ]
    },
    {
        "id": "695d76aa.4b6968",
        "type": "debug",
        "z": "88cec2c0.c8804",
        "name": "SHOW DEBUGGER",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 340,
        "wires": []
    },
    {
        "id": "e94b6791.e147d8",
        "type": "function",
        "z": "88cec2c0.c8804",
        "name": "get global txhistorymainnet",
        "func": "var txfilter = msg.payload;\n\nvar txhistorymainnet = global.get(\"txhistorymainnet\");\n//or get global 'txhistorytestnet'\n\nmsg.payload = txhistorymainnet;\nmsg.txfilter = txfilter;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 420,
        "wires": [
            [
                "9138d23.79be03",
                "695d76aa.4b6968"
            ]
        ]
    },
    {
        "id": "d9c5c3a8.083ff",
        "type": "link out",
        "z": "88cec2c0.c8804",
        "name": "to set Global (txhistorymainnet)",
        "links": [
            "2f692217.51829e"
        ],
        "x": 1735,
        "y": 280,
        "wires": []
    },
    {
        "id": "2f692217.51829e",
        "type": "link in",
        "z": "e83b2318.6f5c6",
        "name": "to bind Global (txhistorymainnet)",
        "links": [
            "d9c5c3a8.083ff"
        ],
        "x": 155,
        "y": 580,
        "wires": [
            [
                "2ead2d36.d08b82"
            ]
        ]
    },
    {
        "id": "2ead2d36.d08b82",
        "type": "change",
        "z": "e83b2318.6f5c6",
        "name": "set txhistorymainnet",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "txhistorymainnet",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 540,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "4e106a61.ae8674",
        "type": "function",
        "z": "88cec2c0.c8804",
        "name": "filter where sender_address is equal to depositaddress  (mainnet)",
        "func": "const obj = msg.payload;\nconst depositaddress = global.get(\"depositaddress\"); //use \"testnetdepositaddress\" for testnet\n\nconst filtered = obj.filter(by => by.sender_address === depositaddress); // \n\nmsg.payload = filtered;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 420,
        "wires": [
            [
                "84d8c5e6.9c38d8"
            ]
        ]
    },
    {
        "id": "c58a8101.17cc4",
        "type": "function",
        "z": "88cec2c0.c8804",
        "name": "filter where sender_address is not equal to depositaddress  (mainnet)",
        "func": "const obj = msg.payload;\nconst depositaddress = global.get(\"depositaddress\"); //use \"testnetdepositaddress\" for testnet\n\nconst filtered = obj.filter(by => by.sender_address != depositaddress);\n\nmsg.payload = filtered;\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 460,
        "wires": [
            [
                "84d8c5e6.9c38d8"
            ]
        ]
    },
    {
        "id": "6658b90c.ccc468",
        "type": "link out",
        "z": "88cec2c0.c8804",
        "name": "to set Global (txhistorytestnet)",
        "links": [
            "ebed3403.a592c8"
        ],
        "x": 1735,
        "y": 1080,
        "wires": []
    },
    {
        "id": "ebed3403.a592c8",
        "type": "link in",
        "z": "e83b2318.6f5c6",
        "name": "to bind Global (txhistorytestnet)",
        "links": [
            "6658b90c.ccc468"
        ],
        "x": 155,
        "y": 620,
        "wires": [
            [
                "38d5a36b.a6b26c"
            ]
        ]
    },
    {
        "id": "38d5a36b.a6b26c",
        "type": "change",
        "z": "e83b2318.6f5c6",
        "name": "set txhistorytestnet",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "txhistorytestnet",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 530,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "e23bca61.e00468",
        "type": "ui_dropdown",
        "z": "88cec2c0.c8804",
        "name": "Filter",
        "label": "",
        "tooltip": "",
        "place": "Show...",
        "group": "cd33bbcb.590158",
        "order": 3,
        "width": 4,
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "All",
                "value": "all",
                "type": "str"
            },
            {
                "label": "Sent",
                "value": "sent",
                "type": "str"
            },
            {
                "label": "Received",
                "value": "received",
                "type": "str"
            },
            {
                "label": "Token Transfers",
                "value": "token_transfer",
                "type": "str"
            },
            {
                "label": "Smart Contracts",
                "value": "smart_contract",
                "type": "str"
            },
            {
                "label": "Function Calls",
                "value": "function_call",
                "type": "str"
            },
            {
                "label": "Coinbase",
                "value": "coinbase",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "x": 450,
        "y": 1240,
        "wires": [
            [
                "d11b4a9e.cb0af8"
            ]
        ]
    },
    {
        "id": "37097331.10d4ac",
        "type": "function",
        "z": "88cec2c0.c8804",
        "name": "filter where tx_type is equal to token_transfer",
        "func": "const obj = msg.payload;\n\nconst filtered = obj.filter(by => by.tx_type === 'token_transfer');\n\nmsg.payload = filtered;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 1320,
        "wires": [
            [
                "31e62cc7.08b544"
            ]
        ]
    },
    {
        "id": "26a843e8.0e77fc",
        "type": "switch",
        "z": "88cec2c0.c8804",
        "name": "show router",
        "property": "txfilter",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "all",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "sent",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "received",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "token_transfer",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "smart_contract",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "function_call",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "coinbase",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 7,
        "x": 890,
        "y": 1240,
        "wires": [
            [
                "31e62cc7.08b544"
            ],
            [
                "8f5c30d8.39115"
            ],
            [
                "2377a4fb.3e6bbc"
            ],
            [
                "37097331.10d4ac"
            ],
            [
                "7bbe8cd4.c3ab24"
            ],
            [
                "ed88fd61.4eb08"
            ],
            [
                "abf6287b.d42fa8"
            ]
        ]
    },
    {
        "id": "7bbe8cd4.c3ab24",
        "type": "function",
        "z": "88cec2c0.c8804",
        "name": "filter where tx_type is equal to smart_contract",
        "func": "const obj = msg.payload;\n\nconst filtered = obj.filter(by => by.tx_type === 'smart_contract');\n\nmsg.payload = filtered;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 1360,
        "wires": [
            [
                "31e62cc7.08b544"
            ]
        ]
    },
    {
        "id": "ed88fd61.4eb08",
        "type": "function",
        "z": "88cec2c0.c8804",
        "name": "filter where tx_type is equal to function_call",
        "func": "const obj = msg.payload;\n\nconst filtered = obj.filter(by => by.tx_type === 'function_call');\n\nmsg.payload = filtered;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 1400,
        "wires": [
            [
                "31e62cc7.08b544"
            ]
        ]
    },
    {
        "id": "abf6287b.d42fa8",
        "type": "function",
        "z": "88cec2c0.c8804",
        "name": "filter where tx_type is equal to coinbase",
        "func": "const obj = msg.payload;\n\nconst filtered = obj.filter(by => by.tx_type === 'coinbase');\n\nmsg.payload = filtered;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 1440,
        "wires": [
            [
                "31e62cc7.08b544"
            ]
        ]
    },
    {
        "id": "35a33ee8.85ee92",
        "type": "debug",
        "z": "88cec2c0.c8804",
        "name": "SHOW DEBUGGER",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 1160,
        "wires": []
    },
    {
        "id": "d11b4a9e.cb0af8",
        "type": "function",
        "z": "88cec2c0.c8804",
        "name": "get global txhistorytestnet",
        "func": "var txfilter = msg.payload;\n\nvar txhistorytestnet = global.get(\"txhistorytestnet\");\n//or get global 'txhistorymainnet'\n\nmsg.payload = txhistorytestnet;\nmsg.txfilter = txfilter;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 1240,
        "wires": [
            [
                "26a843e8.0e77fc",
                "35a33ee8.85ee92"
            ]
        ]
    },
    {
        "id": "8f5c30d8.39115",
        "type": "function",
        "z": "88cec2c0.c8804",
        "name": "filter where sender_address is equal to testnetdepositaddress (testnet)",
        "func": "const obj = msg.payload;\nconst testnetdepositaddress = global.get(\"testnetdepositaddress\"); //use \"mainnetdepositaddress\" for testnet\n\nconst filtered = obj.filter(by => by.sender_address === testnetdepositaddress);\n\nmsg.payload = filtered;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 1240,
        "wires": [
            [
                "31e62cc7.08b544"
            ]
        ]
    },
    {
        "id": "2377a4fb.3e6bbc",
        "type": "function",
        "z": "88cec2c0.c8804",
        "name": "filter where sender_address is not equal to testnetdepositaddress (testnet)",
        "func": "const obj = msg.payload;\nconst testnetdepositaddress = global.get(\"testnetdepositaddress\"); //use \"mainnetdepositaddress\" for mainnet\n\nconst filtered = obj.filter(by => by.sender_address != testnetdepositaddress);\n\nmsg.payload = filtered;\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1320,
        "y": 1280,
        "wires": [
            [
                "31e62cc7.08b544"
            ]
        ]
    },
    {
        "id": "d7b01381.cd314",
        "type": "comment",
        "z": "725ce57a.a25e4c",
        "name": "NOT DONE YET",
        "info": "Registestration function isn't fully wired yet\nwant to capture profile information in step wizard of prompts\nto form profile.json and upload to gaia storage\nthen generate a zonefile that has the pointer to the profile.json",
        "x": 1680,
        "y": 920,
        "wires": []
    },
    {
        "id": "d7c43c5e.263f3",
        "type": "comment",
        "z": "88cec2c0.c8804",
        "name": "Relative to Testnet History",
        "info": "",
        "x": 150,
        "y": 1000,
        "wires": []
    },
    {
        "id": "ac50dd15.89e43",
        "type": "comment",
        "z": "88cec2c0.c8804",
        "name": "Relative to Mainnet History",
        "info": "",
        "x": 150,
        "y": 160,
        "wires": []
    },
    {
        "id": "ff4526e0.2d5308",
        "type": "link out",
        "z": "42c07592.8d970c",
        "name": "pass to Deruptar Generation (Profile Avatar)",
        "links": [
            "27fe2069.03f4c",
            "e596310.fa1d8d"
        ],
        "x": 315,
        "y": 2140,
        "wires": []
    },
    {
        "id": "47647f72.5b551",
        "type": "ui_template",
        "z": "42c07592.8d970c",
        "group": "e5d0847b.1daa38",
        "name": "Deruptar Profile Avatar",
        "order": 1,
        "width": "6",
        "height": "6",
        "format": "<div style=\"position: relative; width: 284px; height: 284px;\" align=\"center\">\n<img src=\"https://raw.githubusercontent.com/cryptocracy/deruptars/main/bg/{{msg.payload[0]}}_bg.png\" alt=\"\" style=\"position: absolute; top: 0; left: 0;\">\n<img src=\"https://raw.githubusercontent.com/cryptocracy/deruptars/main/skin/{{msg.payload[1]}}_skin.png\" alt=\"\" style=\"position: absolute; top: 0; left: 0;\">\n<img src=\"https://raw.githubusercontent.com/cryptocracy/deruptars/main/eyes/{{msg.payload[2]}}_eyes.png\" alt=\"\" style=\"position: absolute; top: 0; left: 0;\">\n<img src=\"https://raw.githubusercontent.com/cryptocracy/deruptars/main/teeth/{{msg.payload[3]}}_teeth.png\" alt=\"\" style=\"position: absolute; top: 0; left: 0;\">\n<img src=\"https://raw.githubusercontent.com/cryptocracy/deruptars/main/lips/{{msg.payload[4]}}_lips.png\" alt=\"\" style=\"position: absolute; top: 0; left: 0;\">\n<img src=\"https://raw.githubusercontent.com/cryptocracy/deruptars/main/hair/{{msg.payload[5]}}_hair.png\" alt=\"\" style=\"position: absolute; top: 0; left: 0;\">\n<img src=\"https://raw.githubusercontent.com/cryptocracy/deruptars/main/hat/{{msg.payload[6]}}_hat.png\" alt=\"\" style=\"position: absolute; top: 0; left: 0;\">\n<img src=\"https://raw.githubusercontent.com/cryptocracy/deruptars/main/chest/{{msg.payload[7]}}_chest.png\" alt=\"\" style=\"position: absolute; top: 0; left: 0;\">\n</div>\n\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 540,
        "y": 2080,
        "wires": [
            []
        ]
    },
    {
        "id": "b20a4bd1.6c0da8",
        "type": "link in",
        "z": "42c07592.8d970c",
        "name": "to Deruptar Template",
        "links": [
            "8df78899.f720b8",
            "841d664b.beb798"
        ],
        "x": 395,
        "y": 2080,
        "wires": [
            [
                "47647f72.5b551",
                "f03228fb.9fb408"
            ]
        ]
    },
    {
        "id": "9d8dbdfd.2285e",
        "type": "ui_button",
        "z": "42c07592.8d970c",
        "name": "",
        "group": "9bb60872.f72c68",
        "order": 2,
        "width": "12",
        "height": 1,
        "passthru": false,
        "label": "Register Name",
        "tooltip": "Give your Deruptar a .id .btc or .stx Name",
        "color": "",
        "bgcolor": "",
        "icon": "fa-user-plus",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 920,
        "y": 2120,
        "wires": [
            [
                "dc2baaf0.8c50f8"
            ]
        ]
    },
    {
        "id": "4aad4ee9.9d408",
        "type": "link out",
        "z": "53028f3b.590b5",
        "name": "Get History Lookup",
        "links": [
            "601843e4.d0a85c"
        ],
        "x": 615,
        "y": 1060,
        "wires": []
    },
    {
        "id": "601843e4.d0a85c",
        "type": "link in",
        "z": "88cec2c0.c8804",
        "name": "to Get History upon Wallet Confirmed Backed Up",
        "links": [
            "4aad4ee9.9d408"
        ],
        "x": 175,
        "y": 580,
        "wires": [
            [
                "7c488f20.eb82d",
                "5c0a9600.38623c"
            ]
        ]
    },
    {
        "id": "f03228fb.9fb408",
        "type": "ui_template",
        "z": "42c07592.8d970c",
        "group": "e5d0847b.1daa38",
        "name": "Deruptar Profile Details",
        "order": 4,
        "width": "7",
        "height": "6",
        "format": "<small>{{msg.depositaddress}}</small>\n<p>Bio: {{msg.deruptar}}</p>\n\n\n\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 550,
        "y": 2120,
        "wires": [
            []
        ]
    },
    {
        "id": "dc2baaf0.8c50f8",
        "type": "function",
        "z": "42c07592.8d970c",
        "name": "pass to Registrar Tab",
        "func": "msg.payload = {\"tab\":\"Registrar\"};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 2120,
        "wires": [
            [
                "869168df.0b5888"
            ]
        ]
    },
    {
        "id": "cadd7bb2.ba75c8",
        "type": "switch",
        "z": "42c07592.8d970c",
        "name": "is null?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 690,
        "y": 2180,
        "wires": [
            [
                "5b9261e5.88906",
                "9a974bff.85c4f8"
            ],
            [
                "3e636357.fc0a5c"
            ]
        ]
    },
    {
        "id": "50fe9d62.71ec54",
        "type": "function",
        "z": "42c07592.8d970c",
        "name": "get deruptarname (global)",
        "func": "const deruptarname = global.get(\"deruptarname\");\n\nmsg.payload = deruptarname;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 2180,
        "wires": [
            [
                "cadd7bb2.ba75c8"
            ]
        ]
    },
    {
        "id": "5b9261e5.88906",
        "type": "debug",
        "z": "42c07592.8d970c",
        "name": "debug deruptarname",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 2080,
        "wires": []
    },
    {
        "id": "3e636357.fc0a5c",
        "type": "function",
        "z": "42c07592.8d970c",
        "name": "show Profile without Reg Name Button Button",
        "func": "msg.payload = {\n  \"group\": {\n    \"hide\": [\n      \"Feed_Feed\",\n      \"Feed_NewPost\",\n      \"Feed_RegisterName\",      \n      \"Feed_byContractName\",\n      \"Feed_byTokenName\",\n      \"Feed_byPrincipleAddress\",\n      \"Feed_byTransactionID\",\n      \"Feed_byChimeDeruptar\",      \n      \"Feed_byName\"\n    ],\n    \"show\": [\n      \"Feed_Header\",\n      \"Feed_Profile\"\n    ],\n    \"focus\": true\n  }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 2220,
        "wires": [
            [
                "869168df.0b5888"
            ]
        ]
    },
    {
        "id": "8264b039.189f4",
        "type": "http request",
        "z": "725ce57a.a25e4c",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "persist": false,
        "authType": "",
        "x": 750,
        "y": 920,
        "wires": [
            [
                "7d17752b.46ce8c"
            ]
        ]
    },
    {
        "id": "bbd8594c.51db58",
        "type": "function",
        "z": "725ce57a.a25e4c",
        "name": "check for existing registered names (mainnet)",
        "func": "var nettype = \"stacks-node-api.mainnet.stacks.co\"; //or testnet\nvar depositaddress = global.get(\"depositaddress\"); //or testnetdepositaddress\n\nmsg.url = \"https://\" + nettype + \"/v1/addresses/stacks/\" + depositaddress;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 920,
        "wires": [
            [
                "8264b039.189f4"
            ]
        ]
    },
    {
        "id": "4798f8b5.87f9b8",
        "type": "inject",
        "z": "725ce57a.a25e4c",
        "name": "check for name",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 190,
        "y": 920,
        "wires": [
            [
                "bbd8594c.51db58"
            ]
        ]
    },
    {
        "id": "4ad3e37f.02b2ac",
        "type": "debug",
        "z": "725ce57a.a25e4c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1290,
        "y": 880,
        "wires": []
    },
    {
        "id": "7d17752b.46ce8c",
        "type": "json",
        "z": "725ce57a.a25e4c",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 890,
        "y": 920,
        "wires": [
            [
                "c3edf897.c3bc58"
            ]
        ]
    },
    {
        "id": "c3edf897.c3bc58",
        "type": "switch",
        "z": "725ce57a.a25e4c",
        "name": "is 0 name is null?",
        "property": "payload.names[0]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1050,
        "y": 920,
        "wires": [
            [
                "4ad3e37f.02b2ac"
            ],
            [
                "1ab4821a.4cc59e"
            ]
        ]
    },
    {
        "id": "1ab4821a.4cc59e",
        "type": "link out",
        "z": "725ce57a.a25e4c",
        "name": "to set discovered FQN as deruptarname",
        "links": [
            "374e7d9b.ca0a82"
        ],
        "x": 1235,
        "y": 940,
        "wires": []
    },
    {
        "id": "374e7d9b.ca0a82",
        "type": "link in",
        "z": "e83b2318.6f5c6",
        "name": "to bind Global (deruptarname)",
        "links": [
            "1ab4821a.4cc59e"
        ],
        "x": 155,
        "y": 840,
        "wires": [
            [
                "d9fea1fc.a7eef"
            ]
        ]
    },
    {
        "id": "d9fea1fc.a7eef",
        "type": "change",
        "z": "e83b2318.6f5c6",
        "name": "set deruptarname",
        "rules": [
            {
                "t": "move",
                "p": "payload.names[0]",
                "pt": "msg",
                "to": "deruptarname",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 530,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "e06a50ef.09bb9",
        "type": "ui_template",
        "z": "53028f3b.590b5",
        "group": "ac860007.b69aa",
        "name": "Balance",
        "order": 3,
        "width": "5",
        "height": 1,
        "format": "<small>Balance {{msg.payload.balance}} (uSTX) (Mainnet)</small>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 1020,
        "y": 1300,
        "wires": [
            []
        ]
    },
    {
        "id": "28b4658a.cfab1a",
        "type": "function",
        "z": "53028f3b.590b5",
        "name": "get balance (mainnet)",
        "func": "var depositaddress = global.get(\"depositaddress\");//or use testnetdepositaddress\n\nvar nettype = \"stacks-node-api.mainnet.stacks.co\"; // or use testnet\n\nmsg.url = \"https://\" + nettype + \"/extended/v1/address/\" + depositaddress + \"/stx\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 1300,
        "wires": [
            [
                "ad375ff5.e9e08"
            ]
        ]
    },
    {
        "id": "ad375ff5.e9e08",
        "type": "http request",
        "z": "53028f3b.590b5",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "persist": false,
        "authType": "",
        "x": 630,
        "y": 1300,
        "wires": [
            [
                "cdb580e7.4f70c"
            ]
        ]
    },
    {
        "id": "d807c5f0.a9f7a8",
        "type": "inject",
        "z": "53028f3b.590b5",
        "name": "Check Every 30s",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "30",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 150,
        "y": 1300,
        "wires": [
            [
                "28b4658a.cfab1a"
            ]
        ]
    },
    {
        "id": "1db87e10.b8fff2",
        "type": "comment",
        "z": "53028f3b.590b5",
        "name": "Relative to Mainnet Balance Group",
        "info": "",
        "x": 200,
        "y": 1260,
        "wires": []
    },
    {
        "id": "ba8584f.8e14d78",
        "type": "link in",
        "z": "53028f3b.590b5",
        "name": "Get Balance Upon Confirm",
        "links": [
            "ef111e21.a6a"
        ],
        "x": 215,
        "y": 1340,
        "wires": [
            [
                "28b4658a.cfab1a",
                "292375c2.e143ca"
            ]
        ]
    },
    {
        "id": "ef111e21.a6a",
        "type": "link out",
        "z": "53028f3b.590b5",
        "name": "Pass to Balance Getter",
        "links": [
            "ba8584f.8e14d78"
        ],
        "x": 615,
        "y": 1020,
        "wires": []
    },
    {
        "id": "cdb580e7.4f70c",
        "type": "json",
        "z": "53028f3b.590b5",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 810,
        "y": 1300,
        "wires": [
            [
                "e06a50ef.09bb9",
                "87e9e6c.0982818"
            ]
        ]
    },
    {
        "id": "87e9e6c.0982818",
        "type": "debug",
        "z": "53028f3b.590b5",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 1260,
        "wires": []
    },
    {
        "id": "e09037f9.610438",
        "type": "function",
        "z": "de33bfc8.0ee0f",
        "name": "Construct the fungible-tokens Contract (Minting) ",
        "func": "const ftname = msg.payload.ftname;///\nconst ftmax = msg.payload.ftmax;///\nconst ftminter = global.get(\"depositaddress\");///set the minter as the primary address\nconst ftsymbol = msg.payload.ftsymbol;///\nconst ftdecimals = msg.payload.ftdecimals;///\n\n//take the inputs and construct the Clarity contract file contents\nmsg.payload = \";; Mint Fungible Tokens via Dapparatus with max supply sent to minter\\n\" +\n                \"(define-constant ERR-UNAUTHORIZED u3)\\n\"+\n                \"(define-constant minter '\" + ftminter + \")\\n\" +\n                \"(define-fungible-token \" + ftname + \" u\" + ftmax + \")\\n\" +\n                \"(ft-mint? \" + ftname + \" u\" + ftmax + \" minter)\\n\" +\n                \"\\n\" +\n                \";; SIP-010 ;; \\n\" +\n                \"(impl-trait 'SP3FBR2AGK5H9QBDH3EEN6DF8EK8JY7RX8QJ5SVTE.sip-10-ft-standard.ft-trait)\\n\" +\n                \"\\n\" +\n                \"(define-public (transfer (amount uint) (sender principal) (recipient principal))\\n\" +\n                \"    (begin \\n\" +\n                \"        (asserts! (is-eq from sender)\\n\" +\n                \"            (err ERR-UNAUTHORIZED))\\n\" +\n                \"\\n\" +\n                \"        (ft-transfer? \" + ftname + \" amount sender recipient)\\n\" +\n                \"    )\\n\"+\n                \")\\n\"+\n                \"\\n\" +\n                \"(define-public (get-name)\\n\"+\n                \"    (ok \\\"\" + ftname + \"\\\"))\\n\"+\n               \"\\n\"+\n                \"(define-public (get-symbol)\\n\"+\n                \"    (ok \\\"\" + ftsymbol + \"\\\"))\\n\"+              \n               \"\\n\"+\n                \"(define-public (get-decimals)\\n\"+\n                \"    (ok u\" + ftdecimals + \"))\\n\"+                  \n               \"\\n\"+\n                \"(define-public (get-balance-of (user principal))\\n\"+\n                \"    (ok (ft-get-balance \" + ftname + \" user)))\\n\"+                  \n               \"\\n\"+\n               \"(define-public (get-total-supply)\\n\"+\n               \"    (ok u\" + ftmax + \")\\n\"+\n               \"\\n\"+\n               \"(define-public (get-token-uri)\\n\"+\n               \"    (ok none))\";\n                \nmsg.filename = ftname + \".clar\"; // name the contract same as input custom token name\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2700,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "5a67f66c.ae9588",
        "type": "ui_form",
        "z": "de33bfc8.0ee0f",
        "d": true,
        "name": "Send Fungible Tokens Form",
        "label": "",
        "group": "93894c51.e61b",
        "order": 0,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Token Name",
                "value": "ftname",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Send to",
                "value": "ftrecipient",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Amount",
                "value": "ftamount",
                "type": "number",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "ftname": "",
            "ftrecipient": "",
            "ftamount": ""
        },
        "payload": "",
        "submit": "Send",
        "cancel": "Clear",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "x": 2240,
        "y": 900,
        "wires": [
            [
                "a5bfdeab.070ba"
            ]
        ]
    },
    {
        "id": "a5bfdeab.070ba",
        "type": "debug",
        "z": "de33bfc8.0ee0f",
        "name": "debug payload",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2600,
        "y": 860,
        "wires": []
    },
    {
        "id": "6a8d372b.403318",
        "type": "debug",
        "z": "de33bfc8.0ee0f",
        "name": "debug payload",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2920,
        "y": 860,
        "wires": []
    },
    {
        "id": "35106df5.10b772",
        "type": "file",
        "z": "de33bfc8.0ee0f",
        "name": "create Clarity Contract Locally",
        "filename": "",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "ascii",
        "x": 3010,
        "y": 900,
        "wires": [
            [
                "43153c39.cd7d04"
            ]
        ]
    },
    {
        "id": "43153c39.cd7d04",
        "type": "debug",
        "z": "de33bfc8.0ee0f",
        "name": "debug contract write",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3100,
        "y": 1000,
        "wires": []
    },
    {
        "id": "577b1043.a57a2",
        "type": "delay",
        "z": "de33bfc8.0ee0f",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 2760,
        "y": 960,
        "wires": [
            [
                "c40ca1a1.01035"
            ]
        ]
    },
    {
        "id": "c40ca1a1.01035",
        "type": "file in",
        "z": "de33bfc8.0ee0f",
        "name": "Get Clarity Contract Locally",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 2700,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "17da8b0a.430c35",
        "type": "function",
        "z": "de33bfc8.0ee0f",
        "name": "call ft-transfer to network (NEEDS Fixed)",
        "func": "//This function assumes a few things.\n//1) Assumes that the qrcodeinput address currently owns the token in question,\n//reference https://www.npmjs.com/package/@stacks/transactions\n//Smart Contract Function Call\nconst ftname = msg.payload.ftname; //name of the fungible token to interface with\nconst ftminter = global.get(\"depositaddress\"); //assumes ownership of said tokens as defined by ftname\nconst ftcontract = ftminter + \"\\.\" + ftname; //contract address\n\nconst principal = msg.payload.ftrecipient;\nconst amount = msg.payload.ftamount;\nconst prime = principal + \" \" + amount; //concat recipient a literal space and the amount\nconst buffz = [bufferCVFromString(prime)];// make a buffer of the to and amount concat\n\nconst senderKey = global.get('stxprivkey');\n\n// for mainnet, use `StacksMainnet()`\nconst network = new stacksNetwork.StacksTestnet();\n\nconst txOptions = {\n  contractAddress: ftcontract,\n  contractName: ftname,\n  functionName: 'transfer',\n  functionArgs: buffz,\n  senderKey,\n  network,\n};\n\n\nconst transaction = await stacksTransactions.makeContractCall(txOptions);\n\nconst broadcastTxn = await stacksTransactions.broadcastTransaction(transaction, network);\n\nmsg.payload = transaction;\n\nmsg.blockchain = broadcastTxn;\nmsg.txoptions = txOptions;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "BigNum",
                "module": "bn.js"
            },
            {
                "var": "stacksNetwork",
                "module": "@stacks/network"
            },
            {
                "var": "stacksTransactions",
                "module": "@stacks/transactions"
            },
            {
                "var": "BufferCV",
                "module": "@stacks/transactions"
            }
        ],
        "x": 2380,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "89259028.7e432",
        "type": "exec",
        "z": "de33bfc8.0ee0f",
        "command": "clarity-cli",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 680,
        "y": 100,
        "wires": [
            [
                "bd97239e.96878"
            ],
            [],
            []
        ]
    },
    {
        "id": "c059f8b2.1b3d98",
        "type": "debug",
        "z": "de33bfc8.0ee0f",
        "name": "clarity-cli check debugger",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1710,
        "y": 220,
        "wires": []
    },
    {
        "id": "42dfcd26.ec84c4",
        "type": "function",
        "z": "de33bfc8.0ee0f",
        "name": "\"check\" setup",
        "func": "const clarity = msg.clarity;\n\nmsg.payload = \"check \" + clarity;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 40,
        "wires": [
            [
                "89259028.7e432",
                "56749719.56d248"
            ]
        ]
    },
    {
        "id": "cc298fe2.ac09c",
        "type": "inject",
        "z": "de33bfc8.0ee0f",
        "name": "inject derp.clar file name",
        "props": [
            {
                "p": "clarity",
                "v": "derp.clar",
                "vt": "str"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 300,
        "wires": [
            [
                "42dfcd26.ec84c4"
            ]
        ]
    },
    {
        "id": "752b362e.d9be78",
        "type": "comment",
        "z": "de33bfc8.0ee0f",
        "name": "Pass in .clar file name (help)",
        "info": "You will first need to put the clarity-cli tool in the root directory of this app.\n(or where your .clar files are to be stored, default is in root)\n\nDownload this (relative to your os) and or latest version. unzip and put them all in your app root.\nhttps://github.com/blockstack/stacks-blockchain/releases/tag/2.0.11.0.0",
        "x": 180,
        "y": 140,
        "wires": []
    },
    {
        "id": "2ff8e49a.dda6bc",
        "type": "switch",
        "z": "de33bfc8.0ee0f",
        "name": "pass or fail",
        "property": "payload.message",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "Checks passed.",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "Checks failed.",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 670,
        "y": 300,
        "wires": [
            [
                "8c2a5876.dacf18"
            ],
            [
                "37a2f1db.c0530e"
            ],
            []
        ]
    },
    {
        "id": "c28e0b4c.786cd8",
        "type": "ui_toast",
        "z": "de33bfc8.0ee0f",
        "position": "top left",
        "displayTime": "3",
        "highlight": "red",
        "sendall": true,
        "outputs": 0,
        "ok": "Mainnet",
        "cancel": "Testnet",
        "raw": false,
        "topic": "Clarity Check",
        "name": "Possible Issue with ft-trait, attempting to bypass",
        "x": 1620,
        "y": 140,
        "wires": []
    },
    {
        "id": "1f80fde6.cd4872",
        "type": "ui_toast",
        "z": "de33bfc8.0ee0f",
        "position": "top right",
        "displayTime": "5",
        "highlight": "green",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "Contracted Deployed",
        "name": "Pending Confirmation",
        "x": 1720,
        "y": 80,
        "wires": []
    },
    {
        "id": "b5b310e9.d3fff",
        "type": "link in",
        "z": "de33bfc8.0ee0f",
        "name": "to clarity-cli check",
        "links": [
            "3cbb627d.347d3e"
        ],
        "x": 75,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "d2c37e86.d3ace",
        "type": "http request",
        "z": "de33bfc8.0ee0f",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 2390,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "e1125778.5bd048",
        "type": "comment",
        "z": "de33bfc8.0ee0f",
        "name": "Dropdown greyed/disabled until delay timer completes",
        "info": "",
        "x": 1520,
        "y": 1900,
        "wires": []
    },
    {
        "id": "13b3d37f.86446d",
        "type": "switch",
        "z": "de33bfc8.0ee0f",
        "name": "ignore unclear ft-trait error",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "Error: use of undeclared trait <ft-trait>. traits should be either defined, with define-trait, or imported, with use-trait.",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1430,
        "y": 240,
        "wires": [
            [
                "c059f8b2.1b3d98",
                "51ee3848.c406f8"
            ],
            [
                "66572b44.2955a4"
            ]
        ]
    },
    {
        "id": "66572b44.2955a4",
        "type": "ui_toast",
        "z": "de33bfc8.0ee0f",
        "position": "top left",
        "displayTime": "3",
        "highlight": "red",
        "sendall": true,
        "outputs": 0,
        "ok": "Mainnet",
        "cancel": "Testnet",
        "raw": false,
        "topic": "Clarity Check",
        "name": "Unable to bypass Error",
        "x": 1720,
        "y": 300,
        "wires": []
    },
    {
        "id": "51ee3848.c406f8",
        "type": "ui_toast",
        "z": "de33bfc8.0ee0f",
        "position": "top left",
        "displayTime": "3",
        "highlight": "green",
        "sendall": true,
        "outputs": 0,
        "ok": "Mainnet",
        "cancel": "Testnet",
        "raw": false,
        "topic": "Clarity Check",
        "name": "Able to bypass Error",
        "x": 1720,
        "y": 260,
        "wires": []
    },
    {
        "id": "c60413e3.b4323",
        "type": "comment",
        "z": "de33bfc8.0ee0f",
        "name": "",
        "info": "ST1ZG09W7XN7S1WH5F06YN25C5CGK2RE01D6CSA1H.Monolith",
        "x": 240,
        "y": 1480,
        "wires": []
    },
    {
        "id": "c6394328.421cf",
        "type": "switch",
        "z": "613e85c9.c6210c",
        "name": "nettype switch",
        "property": "nettype",
        "propertyType": "global",
        "rules": [
            {
                "t": "cont",
                "v": "testnet",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "mainnet",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 4080,
        "y": 520,
        "wires": [
            [],
            [
                "e621671b.60f598"
            ],
            [
                "400262d0.79135c"
            ]
        ]
    },
    {
        "id": "75ea2d53.d250d4",
        "type": "file",
        "z": "613e85c9.c6210c",
        "name": "create local .clar",
        "filename": "",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "ascii",
        "x": 3240,
        "y": 380,
        "wires": [
            [
                "4027e761.6872c8"
            ]
        ]
    },
    {
        "id": "1aa8e753.dcf8c9",
        "type": "file in",
        "z": "613e85c9.c6210c",
        "name": "Get Local Clarity Contract",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 3650,
        "y": 380,
        "wires": [
            [
                "aa7d458a.d4f308"
            ]
        ]
    },
    {
        "id": "aa7d458a.d4f308",
        "type": "switch",
        "z": "613e85c9.c6210c",
        "name": "if stxprivkey is empty error",
        "property": "stxprivkey",
        "propertyType": "global",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 3930,
        "y": 380,
        "wires": [
            [
                "fbd5eebb.f19ae",
                "c1ff9ce2.92cd5"
            ],
            [
                "7ec3e210.2678bc"
            ]
        ]
    },
    {
        "id": "c1ff9ce2.92cd5",
        "type": "function",
        "z": "613e85c9.c6210c",
        "name": "deploy ft-trait to network (testnet)",
        "func": "const ftname = \"ft-trait\";\n\nconst claritybody = msg.payload; //gathered from the contents of the clarity contract via prior node\n\nconst senderKey = global.get('stxprivkey');\n\n// for testnet, use `StacksTestnet()`\nconst network = new stacksNetwork.StacksTestnet();\n\nconst txOptions = {\n  contractName: ftname,\n  codeBody: claritybody,\n  senderKey,\n  network,\n};\n\n\nconst transaction = await stacksTransactions.makeContractDeploy(txOptions);\n\nconst broadcastTxn = await stacksTransactions.broadcastTransaction(transaction, network);\n\nmsg.payload = transaction;\n\nmsg.blockchain = \"0x\" + broadcastTxn;\nmsg.txoptions = txOptions;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "BigNum",
                "module": "bn.js"
            },
            {
                "var": "stacksNetwork",
                "module": "@stacks/network"
            },
            {
                "var": "stacksTransactions",
                "module": "@stacks/transactions"
            }
        ],
        "x": 4360,
        "y": 340,
        "wires": [
            [
                "3a2c2c18.f2a9d4",
                "e7b1f77f.e43e28"
            ]
        ]
    },
    {
        "id": "e621671b.60f598",
        "type": "function",
        "z": "613e85c9.c6210c",
        "name": "deploy ft-trait to network (mainnet)",
        "func": "const ftname = \"ft-trait\";\n\nconst claritybody = msg.payload; //gathered from the contents of the clarity contract via prior node\n\nconst senderKey = global.get('stxprivkey');\n\n// for testnet, use `StacksTestnet()`\nconst network = new stacksNetwork.StacksMainnet();\n\nconst txOptions = {\n  contractName: ftname,\n  codeBody: claritybody,\n  senderKey,\n  network,\n};\n\n\nconst transaction = await stacksTransactions.makeContractDeploy(txOptions);\n\nconst broadcastTxn = await stacksTransactions.broadcastTransaction(transaction, network);\n\nmsg.payload = transaction;\n\nmsg.blockchain = \"0x\" + broadcastTxn;\nmsg.txoptions = txOptions;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "BigNum",
                "module": "bn.js"
            },
            {
                "var": "stacksNetwork",
                "module": "@stacks/network"
            },
            {
                "var": "stacksTransactions",
                "module": "@stacks/transactions"
            }
        ],
        "x": 4360,
        "y": 480,
        "wires": [
            [
                "13bdee36.3664b2",
                "15d47871.1c8f28"
            ]
        ]
    },
    {
        "id": "400262d0.79135c",
        "type": "ui_toast",
        "z": "613e85c9.c6210c",
        "position": "top left",
        "displayTime": "3",
        "highlight": "red",
        "sendall": true,
        "outputs": 0,
        "ok": "Mainnet",
        "cancel": "Testnet",
        "raw": false,
        "topic": "Error",
        "name": "Missing: nettype",
        "x": 4280,
        "y": 580,
        "wires": []
    },
    {
        "id": "fbd5eebb.f19ae",
        "type": "ui_toast",
        "z": "613e85c9.c6210c",
        "position": "top right",
        "displayTime": "3",
        "highlight": "green",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "Almost There...",
        "name": "Attempting to Create and Deploy Interface.",
        "x": 4390,
        "y": 440,
        "wires": []
    },
    {
        "id": "3c7d7fa2.e1c32",
        "type": "function",
        "z": "613e85c9.c6210c",
        "name": "ft-trait contract as sip-10 standards",
        "func": "\n//take the inputs and construct the Clarity contract file contents\nmsg.payload =   \"(define-trait ft-trait\\n\" +\n                \"  (\\n\" +\n                \"    ;; Transfer from the caller to a new principal\\n\" +\n                \"    (transfer (uint principal principal) (response bool uint))\\n\" +\n                \"\\n\" +\n                \"    ;; human readable name of the token\\n\" +\n                \"    (get-name () (response (string-ascii 32) uint))\\n\" +\n                \"\\n\" +\n                \"    ;; ticker symbol or empty if none\\n\" +\n                \"    (get-symbol () (response (string-ascii 32) uint))\\n\" +\n                \"\\n\" +\n                \"    ;; number of decimals used\\n\" +\n                \"    (get-decimals () (response uint uint))\\n\" +\n                \"\\n\" +\n                \"    ;; balance of the passed principal\\n\" +\n                \"    (get-balance-of (principal) (response uint uint))\\n\" +\n                \"\\n\" +\n                \"    ;; current total supply\\n\" +\n                \"    (get-total-supply () (response uint uint))\\n\" +\n                \"\\n\" +\n                \"    ;; optional URI that represents metadata of this token\\n\" +\n                \"    (get-token-uri () (response (optional (string-utf8 256)) uint))\\n\" +\n                \"  )\\n\" +\n                \")\";\n               \nmsg.filename = \"ft-trait.clar\"; // name the contract same as input custom token name\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3300,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "7ec3e210.2678bc",
        "type": "ui_toast",
        "z": "613e85c9.c6210c",
        "position": "top left",
        "displayTime": "3",
        "highlight": "red",
        "sendall": true,
        "outputs": 0,
        "ok": "Mainnet",
        "cancel": "Testnet",
        "raw": false,
        "topic": "Error",
        "name": "Missing: stxprivkey",
        "x": 4310,
        "y": 380,
        "wires": []
    },
    {
        "id": "91c1de09.7f63f",
        "type": "function",
        "z": "613e85c9.c6210c",
        "d": true,
        "name": "setup clarity ft contract file (TESTNET)",
        "func": "const ftname = msg.payload.ftname;///\nconst ftsymbol = msg.payload.ftsymbol;///might want to just snip and uppercase the first 3 characters of the ftname\nconst ftmax = msg.payload.ftmax;///\nconst ftminter = global.get(\"testnetdepositaddress\");///set the minter as the primary address\nconst fturi = msg.payload.fturi;//needs additional integration with stacks storage component.\n//const ftname = ftnameraw.toLowerCase();\n\n\n//take the inputs and construct the Clarity contract file contents\nmsg.payload =   \";;;; Define interface traits per sibling contract\\n\"+\n                \"(impl-trait .ft-trait.ft-trait)\\n\"+\n                \"\\n\"+\n                \";;;; Mint Fungible Tokens via Dapparatus and send supply to minter\\n\"+\n                \"(define-constant err-unauthorized u1)\\n\"+\n                \"(define-constant minter '\" + ftminter + \")\\n\" +\n                \"(define-fungible-token \" + ftname + \" u\" + ftmax + \")\\n\" +\n                \"(ft-mint? \" + ftname + \" u\" + ftmax + \" minter)\\n\" +\n                \"\\n\"+\n                \"(define-read-only (get-total-supply)\\n\"+\n                \"  (ok (ft-get-supply \" + ftname + \"))\\n\"+\n                \")\\n\"+\n                \"\\n\"+\n                \"(define-read-only (get-name)\\n\"+\n                \"  (ok \\\"\" + ftname + \"\\\")\\n\" +\n                \")\\n\"+\n                \"\\n\"+\n                \"(define-read-only (get-symbol)\\n\"+\n                \"  (ok \\\"\" + ftsymbol + \"\\\")\\n\"+\n                \")\\n\"+\n                \"\\n\"+\n                \"(define-read-only (get-decimals)\\n\"+\n                \"  (ok u6)\\n\"+\n                \")\\n\"+\n                \"\\n\"+\n                \"(define-read-only (get-balance-of (account principal))\\n\"+\n                \"  (ok (ft-get-balance \" + ftname + \" account))\\n\"+\n                \")\\n\"+\n                \"\\n\"+\n                \"(define-public (transfer (amount uint) (sender principal) (recipient principal) (memo (optional (buff 34))))\\n\"+\n                \"  (if (is-eq tx-sender sender)\\n\"+\n                \"    (begin\\n\"+\n                \"      (try! (ft-transfer? \" + ftname + \" amount sender recipient))\\n\"+\n                \"      (print memo)\\n\"+\n                \"      (ok true)\\n\"+\n                \"    )\\n\"+\n                \"   (err u4)))\\n\"+\n                \"\\n\"+                \n                \"(define-read-only (get-token-uri)\\n\"+\n                \"  (ok (some u\\\"\" +  fturi + \"\\\"))\\n\"+\n                \")\\n\";\n               \nmsg.filename = ftname + \".clar\"; // name the contract same as input custom token name\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 820,
        "wires": [
            [
                "ae38fd54.be582"
            ]
        ]
    },
    {
        "id": "ae38fd54.be582",
        "type": "file",
        "z": "613e85c9.c6210c",
        "name": "create local .clar",
        "filename": "",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "ascii",
        "x": 780,
        "y": 780,
        "wires": [
            [
                "bcf0e52d.676dd8",
                "dca4dbc6.df29b8"
            ]
        ]
    },
    {
        "id": "dca4dbc6.df29b8",
        "type": "delay",
        "z": "613e85c9.c6210c",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 980,
        "y": 780,
        "wires": [
            [
                "ae9a1e09.fd285"
            ]
        ]
    },
    {
        "id": "aa72d1b2.3329e",
        "type": "comment",
        "z": "613e85c9.c6210c",
        "name": "Need to finish URI and reference in contract",
        "info": "",
        "x": 570,
        "y": 880,
        "wires": []
    },
    {
        "id": "a1884faf.1b74e",
        "type": "function",
        "z": "613e85c9.c6210c",
        "name": "setup json uri file",
        "func": "const ftname = msg.payload.ftname;\nconst ftinfo = msg.payload.ftinfo;\nconst ftimg = msg.payload.ftimg;\nconst ftsymbol = msg.payload.ftsymbol;///\n\n//take the inputs and construct the Clarity contract file contents\nmsg.payload = {\n            \"name\": ftname,\n            \"description\": ftinfo,\n            \"image\": ftimg\n};\n                \nmsg.filename = ftname + \".json\"; // name the contract same as input custom token name\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 960,
        "wires": [
            [
                "16bf4f18.befd91"
            ]
        ]
    },
    {
        "id": "3cdd906f.1139b",
        "type": "comment",
        "z": "613e85c9.c6210c",
        "name": "notes regarding uri",
        "info": "Need new form to store image to @stacks/storage\nonce image urls are able to be created.\nneed to capture the url of the tokens uploaded image,\nthen include said url in the prop of the json file,\nthat json file is in turn needing to be uploaded to storage,\nonce the json file is in storage, use it url as a uri,\neg take its json file url and set it as the uri value in the relative smart contract for the token in question.",
        "x": 490,
        "y": 920,
        "wires": []
    },
    {
        "id": "16bf4f18.befd91",
        "type": "file",
        "z": "613e85c9.c6210c",
        "name": "create local .json",
        "filename": "",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "ascii",
        "x": 690,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "bcf0e52d.676dd8",
        "type": "debug",
        "z": "613e85c9.c6210c",
        "name": "debug contract write",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 740,
        "wires": []
    },
    {
        "id": "ae9a1e09.fd285",
        "type": "file in",
        "z": "613e85c9.c6210c",
        "name": "Get Local Clarity Contract",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 1210,
        "y": 780,
        "wires": [
            [
                "a73cd103.691db"
            ]
        ]
    },
    {
        "id": "882ef134.ffd72",
        "type": "switch",
        "z": "613e85c9.c6210c",
        "name": "nettype switch",
        "property": "nettype",
        "propertyType": "global",
        "rules": [
            {
                "t": "cont",
                "v": "testnet",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "mainnet",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 1280,
        "y": 840,
        "wires": [
            [],
            [
                "395e262d.5ec54a"
            ],
            [
                "9a5c8408.e21ba8"
            ]
        ]
    },
    {
        "id": "a73cd103.691db",
        "type": "function",
        "z": "613e85c9.c6210c",
        "d": true,
        "name": "deploy ft-mint to network (testnet)",
        "func": "const ftname = global.get(\"xftname\");// or \"sip-10-ft-standard\";//gathered from global\n\nconst claritybody = msg.payload; //gathered from the contents of the clarity contract via prior node\n\nconst senderKey = global.get('stxprivkey');\n\n// for testnet, use `StacksTestnet()`\nconst network = new stacksNetwork.StacksTestnet();\n\nconst txOptions = {\n  contractName: ftname,\n  codeBody: claritybody,\n  senderKey,\n  network,\n};\n\n\nconst transaction = await stacksTransactions.makeContractDeploy(txOptions);\n\nconst broadcastTxn = await stacksTransactions.broadcastTransaction(transaction, network);\n\nmsg.payload = transaction;\n\nmsg.blockchain = \"0x\" + broadcastTxn; //tx id\nmsg.txoptions = txOptions;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "BigNum",
                "module": "bn.js"
            },
            {
                "var": "stacksNetwork",
                "module": "@stacks/network"
            },
            {
                "var": "stacksTransactions",
                "module": "@stacks/transactions"
            }
        ],
        "x": 1540,
        "y": 720,
        "wires": [
            [
                "19dc5a23.6b0be6",
                "7a27d29e.5f101c"
            ]
        ]
    },
    {
        "id": "395e262d.5ec54a",
        "type": "function",
        "z": "613e85c9.c6210c",
        "name": "deploy ft-mint to network (mainnet)",
        "func": "const ftname = global.get(\"xftname\");// or \"sip-10-ft-standard\";//gathered from global\n\nconst claritybody = msg.payload; //gathered from the contents of the clarity contract via prior node\n\nconst senderKey = global.get('stxprivkey');\n\n// for testnet, use `StacksTestnet()`\nconst network = new stacksNetwork.StacksMainnet();\n\nconst txOptions = {\n  contractName: ftname,\n  codeBody: claritybody,\n  senderKey,\n  network,\n};\n\n\nconst transaction = await stacksTransactions.makeContractDeploy(txOptions);\n\nconst broadcastTxn = await stacksTransactions.broadcastTransaction(transaction, network);\n\nmsg.payload = transaction;\n\nmsg.blockchain = \"0x\" + broadcastTxn; //tx id\nmsg.txoptions = txOptions;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "BigNum",
                "module": "bn.js"
            },
            {
                "var": "stacksNetwork",
                "module": "@stacks/network"
            },
            {
                "var": "stacksTransactions",
                "module": "@stacks/transactions"
            }
        ],
        "x": 1540,
        "y": 780,
        "wires": [
            [
                "92c2ae63.edf91",
                "4cd59253.d496fc"
            ]
        ]
    },
    {
        "id": "9a5c8408.e21ba8",
        "type": "ui_toast",
        "z": "613e85c9.c6210c",
        "position": "top left",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "Mainnet",
        "cancel": "Testnet",
        "raw": false,
        "topic": "Missing: nettype",
        "name": "Net Type Not Set",
        "x": 1490,
        "y": 860,
        "wires": []
    },
    {
        "id": "92c2ae63.edf91",
        "type": "debug",
        "z": "613e85c9.c6210c",
        "name": "debug mainnet mint ft form",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1880,
        "y": 780,
        "wires": []
    },
    {
        "id": "19dc5a23.6b0be6",
        "type": "debug",
        "z": "613e85c9.c6210c",
        "name": "debug testnet mint ft form",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1880,
        "y": 720,
        "wires": []
    },
    {
        "id": "58b1252b.ab5aec",
        "type": "change",
        "z": "e83b2318.6f5c6",
        "name": "set global.xftname",
        "rules": [
            {
                "t": "move",
                "p": "payload.ftname",
                "pt": "msg",
                "to": "xftname",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 530,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "de6ca16a.965d9",
        "type": "link out",
        "z": "613e85c9.c6210c",
        "name": "pass to set Global (xftname)",
        "links": [
            "67d97386.ffb9fc"
        ],
        "x": 355,
        "y": 860,
        "wires": []
    },
    {
        "id": "67d97386.ffb9fc",
        "type": "link in",
        "z": "e83b2318.6f5c6",
        "name": "to Global xftname",
        "links": [
            "de6ca16a.965d9"
        ],
        "x": 155,
        "y": 980,
        "wires": [
            [
                "58b1252b.ab5aec"
            ]
        ]
    },
    {
        "id": "e4c02840.a11e78",
        "type": "ui_template",
        "z": "53028f3b.590b5",
        "group": "3348dd5e.728a92",
        "name": "Copy Testnet Address to Clipboard",
        "order": 6,
        "width": 9,
        "height": 2,
        "format": "<!DOCTYPE html>\n<html>\n<body>\n\n<input type=\"text\" value=\"{{msg.payload}}\" id=\"myTestnet\" readonly>\n<md-button onclick=\"myTestnetFunction()\">Copy Testnet Address</md-button>\n\n<script>\nfunction myTestnetFunction() {\n  var copyText = document.getElementById(\"myTestnet\");\n  copyText.select();\n  copyText.setSelectionRange(0, 99999)\n  document.execCommand(\"copy\");\n}\n</script>\n\n</body>\n</html>\n\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 660,
        "y": 2340,
        "wires": [
            []
        ]
    },
    {
        "id": "9ae8d2b0.46094",
        "type": "link out",
        "z": "53028f3b.590b5",
        "name": "to Show Receive Vars",
        "links": [
            "84e0458b.05fb88"
        ],
        "x": 1795,
        "y": 160,
        "wires": []
    },
    {
        "id": "84e0458b.05fb88",
        "type": "link in",
        "z": "53028f3b.590b5",
        "name": "to Get Receive Group Vars",
        "links": [
            "9ae8d2b0.46094"
        ],
        "x": 75,
        "y": 2220,
        "wires": [
            [
                "86362642.e4ba48",
                "92252ed1.e85de"
            ]
        ]
    },
    {
        "id": "8704b28c.eb904",
        "type": "ui_template",
        "z": "53028f3b.590b5",
        "group": "3348dd5e.728a92",
        "name": "Copy Mainnet Address to Clipboard",
        "order": 2,
        "width": 9,
        "height": 2,
        "format": "<!DOCTYPE html>\n<html>\n<body>\n\n<input type=\"text\" value=\"{{msg.payload}}\" id=\"myMainnet\" readonly>\n<md-button onclick=\"myMainnetFunction()\">Copy Mainnet Address</md-button>\n\n<script>\nfunction myMainnetFunction() {\n  var copyText = document.getElementById(\"myMainnet\");\n  copyText.select();\n  copyText.setSelectionRange(0, 99999)\n  document.execCommand(\"copy\");\n}\n</script>\n\n</body>\n</html>\n\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 660,
        "y": 2140,
        "wires": [
            []
        ]
    },
    {
        "id": "1d71fb89.4a9a14",
        "type": "ui_button",
        "z": "53028f3b.590b5",
        "name": "QR BTN (testnet)",
        "group": "3348dd5e.728a92",
        "order": 7,
        "width": 1,
        "height": 1,
        "passthru": false,
        "label": "",
        "tooltip": "Show QR Code for Testnet Address",
        "color": "",
        "bgcolor": "",
        "icon": "fa-qrcode",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 710,
        "y": 2380,
        "wires": [
            [
                "a9773270.31add"
            ]
        ]
    },
    {
        "id": "ef322806.117c38",
        "type": "ui_button",
        "z": "53028f3b.590b5",
        "name": "QR BTN (mainnet)",
        "group": "3348dd5e.728a92",
        "order": 3,
        "width": 1,
        "height": 1,
        "passthru": false,
        "label": "",
        "tooltip": "Show QR Code for Mainnet Address",
        "color": "",
        "bgcolor": "",
        "icon": "fa-qrcode",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 710,
        "y": 2180,
        "wires": [
            [
                "189eb93a.f026c7"
            ]
        ]
    },
    {
        "id": "dc5cfe8a.22331",
        "type": "ui_toast",
        "z": "53028f3b.590b5",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "Close QR",
        "cancel": "",
        "raw": false,
        "topic": "Mainnet QR Code",
        "name": "QR Code",
        "x": 1120,
        "y": 2180,
        "wires": [
            []
        ]
    },
    {
        "id": "389d4038.22603",
        "type": "ui_toast",
        "z": "53028f3b.590b5",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "Close QR",
        "cancel": "",
        "raw": false,
        "topic": "Testnet QR Code",
        "name": "QR Code",
        "x": 1120,
        "y": 2380,
        "wires": [
            []
        ]
    },
    {
        "id": "189eb93a.f026c7",
        "type": "function",
        "z": "53028f3b.590b5",
        "name": "",
        "func": "msg.payload = \"Mainnet QR Code needs finished\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 2180,
        "wires": [
            [
                "dc5cfe8a.22331"
            ]
        ]
    },
    {
        "id": "a9773270.31add",
        "type": "function",
        "z": "53028f3b.590b5",
        "name": "",
        "func": "msg.payload = \"Testnet QR Code needs finished\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 2380,
        "wires": [
            [
                "389d4038.22603"
            ]
        ]
    },
    {
        "id": "12c982e6.a4ac6d",
        "type": "debug",
        "z": "613e85c9.c6210c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "url",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3260,
        "y": 740,
        "wires": []
    },
    {
        "id": "8e705464.bd59c8",
        "type": "json",
        "z": "613e85c9.c6210c",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 3570,
        "y": 700,
        "wires": [
            [
                "855df234.4377a",
                "17153ca0.6f8f03"
            ]
        ]
    },
    {
        "id": "855df234.4377a",
        "type": "switch",
        "z": "613e85c9.c6210c",
        "name": "switch 2",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "istype",
                "v": "object",
                "vt": "object"
            },
            {
                "t": "istype",
                "v": "string",
                "vt": "string"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 3740,
        "y": 700,
        "wires": [
            [
                "34eaea80.59a846"
            ],
            [
                "a9c05831.4470f8"
            ]
        ]
    },
    {
        "id": "34eaea80.59a846",
        "type": "change",
        "z": "613e85c9.c6210c",
        "name": "enable form",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Interface Contract Detected, Proceed to Minting",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3930,
        "y": 680,
        "wires": [
            [
                "5b5a8e01.b4ef5"
            ]
        ]
    },
    {
        "id": "a9c05831.4470f8",
        "type": "change",
        "z": "613e85c9.c6210c",
        "name": "disable form ",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Please Wait for Interface Confirmation",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3930,
        "y": 720,
        "wires": [
            [
                "90a30512.c71a18"
            ]
        ]
    },
    {
        "id": "17153ca0.6f8f03",
        "type": "debug",
        "z": "613e85c9.c6210c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 3730,
        "y": 660,
        "wires": []
    },
    {
        "id": "f819d63c.3ced18",
        "type": "function",
        "z": "613e85c9.c6210c",
        "name": "url to call to check if ft-trait exists (testnet)",
        "func": "const nettype = \"stacks-node-api.testnet.stacks.co\"; // or use testnet\nconst testnetdepositaddress = global.get(\"testnetdepositaddress\");\nconst ftname = \"ft-trait\";//global.get(\"xftname\");\n/// get with global xftname or with \"ft-trait\"\n\nmsg.url = \"https://\" + nettype + \"/v2/contracts/interface/\" + testnetdepositaddress + \"/\" + ftname;\n\nmsg.stx = testnetdepositaddress; \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3000,
        "y": 700,
        "wires": [
            [
                "12c982e6.a4ac6d",
                "617b44e5.5791bc"
            ]
        ]
    },
    {
        "id": "86420b1a.8256f8",
        "type": "function",
        "z": "613e85c9.c6210c",
        "name": "url to call to check if ft-trait exists (mainnet)",
        "func": "const nettype = \"stacks-node-api.mainnet.stacks.co\"; // or use testnet\nconst depositaddress = global.get(\"depositaddress\");\nconst ftname = \"ft-trait\";//global.get(\"xftname\");\n/// get with global xftname or with \"ft-trait\"\n\nmsg.url = \"https://\" + nettype + \"/v2/contracts/interface/\" + depositaddress + \"/\" + ftname;\nmsg.stx = depositaddress; \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3010,
        "y": 900,
        "wires": [
            [
                "237b31dc.f8722e"
            ]
        ]
    },
    {
        "id": "7a27d29e.5f101c",
        "type": "ui_template",
        "z": "613e85c9.c6210c",
        "d": true,
        "group": "7e7643fd.e4b96c",
        "name": "TX Info (testnet)",
        "order": 3,
        "width": 0,
        "height": 0,
        "format": "<a href=\"https://explorer.stacks.co/txid/{{msg.blockchain}}?chain=testnet\" target=\"_blank\">{{msg.blockchain}}</a>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 1840,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "c234067a.1daba8",
        "type": "ui_template",
        "z": "613e85c9.c6210c",
        "group": "40b29c84.e02da4",
        "name": "General Minting Warning",
        "order": 2,
        "width": 0,
        "height": 0,
        "format": "<small>When Minting, Trait Contracts are referenced for Implementation.</small>\n<small><small><a href=\"https://explorer.stacks.co/txid/SP3FBR2AGK5H9QBDH3EEN6DF8EK8JY7RX8QJ5SVTE.sip-10-ft-standard?chain=mainnet\" target=\"_blank\">View SIP-010 Standard Trait Contract (for FTs)</a></small></small>\n<small><small><a href=\"https://explorer.stacks.co/txid/SP2PABAF9FTAJYNFZH93XENAJ8FVY99RRM50D2JG9.nft-trait?chain=mainnet\" target=\"_blank\">View SIP-009 Standard Trait Contract (for NFTs)</a></small></small>\n<br>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 970,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "8dc78c92.ae22a",
        "type": "ui_template",
        "z": "53028f3b.590b5",
        "group": "ac860007.b69aa",
        "name": "Balance",
        "order": 1,
        "width": 5,
        "height": 1,
        "format": "<small>Balance {{msg.payload.balance}} (uSTX) (Testnet)</small>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 1020,
        "y": 1400,
        "wires": [
            []
        ]
    },
    {
        "id": "292375c2.e143ca",
        "type": "function",
        "z": "53028f3b.590b5",
        "name": "get balance (testnet)",
        "func": "var testnetdepositaddress = global.get(\"testnetdepositaddress\");//or use depositaddress\n\nvar nettype = \"stacks-node-api.testnet.stacks.co\"; // or use mainnet\n\nmsg.url = \"https://\" + nettype + \"/extended/v1/address/\" + testnetdepositaddress + \"/stx\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 1400,
        "wires": [
            [
                "342f0922.631506"
            ]
        ]
    },
    {
        "id": "342f0922.631506",
        "type": "http request",
        "z": "53028f3b.590b5",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "persist": false,
        "authType": "",
        "x": 630,
        "y": 1400,
        "wires": [
            [
                "2352195a.432c36"
            ]
        ]
    },
    {
        "id": "78ad58cb.c9a7e8",
        "type": "inject",
        "z": "53028f3b.590b5",
        "name": "Check Every 30s",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "30",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 150,
        "y": 1400,
        "wires": [
            [
                "292375c2.e143ca"
            ]
        ]
    },
    {
        "id": "f74c3977.a55148",
        "type": "comment",
        "z": "53028f3b.590b5",
        "name": "Relative to Testnet Balance Group",
        "info": "",
        "x": 200,
        "y": 1440,
        "wires": []
    },
    {
        "id": "2352195a.432c36",
        "type": "json",
        "z": "53028f3b.590b5",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 810,
        "y": 1400,
        "wires": [
            [
                "8dc78c92.ae22a",
                "813372aa.d93d9"
            ]
        ]
    },
    {
        "id": "813372aa.d93d9",
        "type": "debug",
        "z": "53028f3b.590b5",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 1360,
        "wires": []
    },
    {
        "id": "cb4c5bf1.d71ae8",
        "type": "function",
        "z": "88cec2c0.c8804",
        "name": "filter where tx_status is equal to pending (testnet)",
        "func": "const obj = msg.payload;\nconst testnetdepositaddress = global.get(\"testnetdepositaddress\"); //use \"mainnetdepositaddress\" for testnet\n\nconst filtered = obj.filter(by => by.tx_status === \"pending\");\n\nmsg.payload = filtered;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1910,
        "y": 940,
        "wires": [
            [
                "1afa4aa9.95a465",
                "ab72e34b.4d54d",
                "5386b8d0.5343f8"
            ]
        ]
    },
    {
        "id": "2a3c827c.45e60e",
        "type": "change",
        "z": "88cec2c0.c8804",
        "name": "move results",
        "rules": [
            {
                "t": "move",
                "p": "payload.results",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1550,
        "y": 940,
        "wires": [
            [
                "cb4c5bf1.d71ae8"
            ]
        ]
    },
    {
        "id": "ab72e34b.4d54d",
        "type": "ui_template",
        "z": "88cec2c0.c8804",
        "group": "fe7f6a58.a34e48",
        "name": "Transaction Mempool (Testnet)",
        "order": 5,
        "width": 13,
        "height": "2",
        "format": "<table>\n    <tr>\n        <th></th>\n        <th>Amount</th>\n        <th>Fee</th>        \n        <th>Explorer</th>\n        <th>Status</th>\n        <th>Date</th>\n    </tr>\n    <tr ng-repeat=\"obj in msg.payload\">\n        <td><img src=\"https://raw.githubusercontent.com/cryptocracy/dapparatus/master/stx-logo-blue-round-small.png\" width=\"32\" height=\"32\"> </td>\n        <td>{{obj.token_transfer.amount}}</td>\n        <td>{{obj.fee_rate}}</td>\n        <td><small><small><small><a href=\"https://explorer.stacks.co/txid/{{obj.tx_id}}?chain=testnet\" target=\"_blank\" title=\"{{obj.tx_id}}\">View in Explorer</a></small></small></small></td>\n        <td><small>{{obj.tx_status}}</small></td>\n        <td><small><small>{{obj.receipt_time_iso}}</small></small></td>\n    </tr>\n</table>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 2350,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "da32eda8.fc84f",
        "type": "function",
        "z": "613e85c9.c6210c",
        "name": "show Mint FT Form",
        "func": "msg.payload = {\n  \"group\": {\n    \"hide\": [\n      \"Minting_MintNav\",\n      \"Minting_MintNFT\",\n      \"Minting_MintNFT_Trait\",\n      \"Minting_MintNFT_Form\",\n      \"Minting_MintFT_Trait\"\n    ],\n    \"show\": [\n      \"Minting_MintFT_Form\"\n    ],\n    \"focus\": true\n  }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4390,
        "y": 680,
        "wires": [
            [
                "bfcc6cf0.7b3a6"
            ]
        ]
    },
    {
        "id": "2445a7d8.daea18",
        "type": "function",
        "z": "613e85c9.c6210c",
        "name": "show Mint FT Trait",
        "func": "msg.payload = {\n  \"group\": {\n    \"hide\": [\n      \"Minting_MintNav\",\n      \"Minting_MintNFT\",\n      \"Minting_MintNFT_Trait\",\n      \"Minting_MintNFT_Form\",\n      \"Minting_MintFT_Form\"\n    ],\n    \"show\": [\n      \"Minting_MintFT_Trait\"\n    ],\n    \"focus\": true\n  }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4390,
        "y": 760,
        "wires": [
            [
                "a6dfdbc.87d5d28"
            ]
        ]
    },
    {
        "id": "bfcc6cf0.7b3a6",
        "type": "ui_ui_control",
        "z": "613e85c9.c6210c",
        "name": "",
        "events": "all",
        "x": 4580,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "a6dfdbc.87d5d28",
        "type": "ui_ui_control",
        "z": "613e85c9.c6210c",
        "name": "",
        "events": "all",
        "x": 4580,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "5b5a8e01.b4ef5",
        "type": "ui_toast",
        "z": "613e85c9.c6210c",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 4190,
        "y": 680,
        "wires": [
            [
                "da32eda8.fc84f"
            ]
        ]
    },
    {
        "id": "90a30512.c71a18",
        "type": "ui_toast",
        "z": "613e85c9.c6210c",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 4190,
        "y": 760,
        "wires": [
            [
                "2445a7d8.daea18"
            ]
        ]
    },
    {
        "id": "6f6890c0.1c097",
        "type": "ui_button",
        "z": "613e85c9.c6210c",
        "name": "",
        "group": "93f1cccf.344e5",
        "order": 5,
        "width": "6",
        "height": "1",
        "passthru": false,
        "label": "Check for FT Trait Contract (Mainnet)",
        "tooltip": "Manually check to see if you FT Trait Contract exists and is confirmed.",
        "color": "",
        "bgcolor": "",
        "icon": "fa-refresh",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 2650,
        "y": 900,
        "wires": [
            [
                "86420b1a.8256f8"
            ]
        ]
    },
    {
        "id": "617b44e5.5791bc",
        "type": "http request",
        "z": "613e85c9.c6210c",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 3270,
        "y": 700,
        "wires": [
            [
                "9ba865e3.ce4ed8",
                "c7fa8123.2c49"
            ]
        ]
    },
    {
        "id": "9ba865e3.ce4ed8",
        "type": "debug",
        "z": "613e85c9.c6210c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 3450,
        "y": 660,
        "wires": []
    },
    {
        "id": "c7fa8123.2c49",
        "type": "switch",
        "z": "613e85c9.c6210c",
        "name": "switch 1",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            },
            {
                "t": "eq",
                "v": "No contract interface data found",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 3440,
        "y": 760,
        "wires": [
            [
                "8e705464.bd59c8"
            ],
            [
                "90a30512.c71a18"
            ]
        ]
    },
    {
        "id": "7d53f356.f6fd1c",
        "type": "ui_button",
        "z": "613e85c9.c6210c",
        "name": "Back (FT Form)",
        "group": "7e7643fd.e4b96c",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Back",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 140,
        "y": 200,
        "wires": [
            [
                "3e840dfd.8c84b2"
            ]
        ]
    },
    {
        "id": "2a2018ab.cbcef8",
        "type": "ui_button",
        "z": "613e85c9.c6210c",
        "name": "Back (NFT Form)",
        "group": "91c07e82.a5ad1",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Back",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 150,
        "y": 240,
        "wires": [
            [
                "3e840dfd.8c84b2"
            ]
        ]
    },
    {
        "id": "13bdee36.3664b2",
        "type": "debug",
        "z": "613e85c9.c6210c",
        "name": "debug mainnet trait",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4680,
        "y": 480,
        "wires": []
    },
    {
        "id": "3a2c2c18.f2a9d4",
        "type": "debug",
        "z": "613e85c9.c6210c",
        "name": "debug testnet trait",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4680,
        "y": 340,
        "wires": []
    },
    {
        "id": "4027e761.6872c8",
        "type": "delay",
        "z": "613e85c9.c6210c",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 3440,
        "y": 380,
        "wires": [
            [
                "1aa8e753.dcf8c9"
            ]
        ]
    },
    {
        "id": "26b2364.c1de7ca",
        "type": "comment",
        "z": "613e85c9.c6210c",
        "name": "Relative to Minting Fungible Tokens Traits",
        "info": "",
        "x": 2660,
        "y": 260,
        "wires": []
    },
    {
        "id": "d6054e0c.5b462",
        "type": "comment",
        "z": "613e85c9.c6210c",
        "name": "Relative to Minting Non-Fungible Tokens Traits",
        "info": "",
        "x": 2670,
        "y": 1400,
        "wires": []
    },
    {
        "id": "857928f2.c5fdb8",
        "type": "ui_toast",
        "z": "53028f3b.590b5",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "Show In History",
        "cancel": "Send Another Transaction",
        "raw": false,
        "topic": "",
        "name": "Transaction ID Popup",
        "x": 1020,
        "y": 1700,
        "wires": [
            [
                "f47da2ef.a7faa",
                "b2229dc1.9782"
            ]
        ]
    },
    {
        "id": "281b6ffc.c62c5",
        "type": "function",
        "z": "53028f3b.590b5",
        "name": "txid to payload",
        "func": "var txid = msg.blockchain;\n\nmsg.payload = txid;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 1700,
        "wires": [
            [
                "857928f2.c5fdb8"
            ]
        ]
    },
    {
        "id": "58624acc.697034",
        "type": "function",
        "z": "53028f3b.590b5",
        "name": "txid to payload",
        "func": "var txid = msg.blockchain;\n\nmsg.payload = txid;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 1740,
        "wires": [
            [
                "48704d74.4776c4"
            ]
        ]
    },
    {
        "id": "48704d74.4776c4",
        "type": "ui_toast",
        "z": "53028f3b.590b5",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "Show In History",
        "cancel": "Send Another Transaction",
        "raw": false,
        "topic": "",
        "name": "Transaction ID Popup",
        "x": 1020,
        "y": 1740,
        "wires": [
            [
                "13cb51b2.92190e",
                "1817ca3f.3d8d66"
            ]
        ]
    },
    {
        "id": "b2229dc1.9782",
        "type": "debug",
        "z": "53028f3b.590b5",
        "name": "mainnet send debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1260,
        "y": 1700,
        "wires": []
    },
    {
        "id": "82ecf98d.d7c048",
        "type": "function",
        "z": "88cec2c0.c8804",
        "name": "filter where tx_status is equal to pending (mainnet)",
        "func": "const obj = msg.payload;\nconst depositaddress = global.get(\"depositaddress\"); //use \"mainnetdepositaddress\" for testnet\n\nconst filtered = obj.filter(by => by.tx_status === \"pending\");\n\nmsg.payload = filtered;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1890,
        "y": 160,
        "wires": [
            [
                "2ed8f84d.a57bc8",
                "82b073a2.33169",
                "322ef057.2b9ab"
            ]
        ]
    },
    {
        "id": "8a5e2fda.f7863",
        "type": "change",
        "z": "88cec2c0.c8804",
        "name": "move results",
        "rules": [
            {
                "t": "move",
                "p": "payload.results",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1490,
        "y": 160,
        "wires": [
            [
                "82ecf98d.d7c048"
            ]
        ]
    },
    {
        "id": "2ed8f84d.a57bc8",
        "type": "ui_template",
        "z": "88cec2c0.c8804",
        "group": "983babaa.5192c8",
        "name": "Transaction Mempool (Mainnet)",
        "order": 5,
        "width": 13,
        "height": "2",
        "format": "<table>\n    <tr>\n        <th></th>\n        <th>Amount</th>\n        <th>Fee</th>        \n        <th>Explorer</th>\n        <th>Status</th>\n        <th>Date</th>\n    </tr>\n    <tr ng-repeat=\"obj in msg.payload\">\n        <td><img src=\"https://raw.githubusercontent.com/cryptocracy/dapparatus/master/stx-logo-blue-round-small.png\" width=\"32\" height=\"32\"> </td>\n        <td>{{obj.token_transfer.amount}}</td>\n        <td>{{obj.fee_rate}}</td>\n        <td><small><small><small><a href=\"https://explorer.stacks.co/txid/{{obj.tx_id}}?chain=mainnet\" target=\"_blank\" title=\"{{obj.tx_id}}\">View in Explorer</a></small></small></small></td>\n        <td><small>{{obj.tx_status}}</small></td>\n        <td><small><small>{{obj.receipt_time_iso}}</small></small></td>\n    </tr>\n</table>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 2290,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "79453bc7.c974c4",
        "type": "function",
        "z": "53028f3b.590b5",
        "name": "pass to History Tab",
        "func": "msg.payload = {\"tab\":\"History\"};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 1660,
        "wires": [
            [
                "dbe51251.9596a"
            ]
        ]
    },
    {
        "id": "f47da2ef.a7faa",
        "type": "switch",
        "z": "53028f3b.590b5",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Show In History",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1210,
        "y": 1660,
        "wires": [
            [
                "79453bc7.c974c4"
            ],
            []
        ]
    },
    {
        "id": "1817ca3f.3d8d66",
        "type": "switch",
        "z": "53028f3b.590b5",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Show In History",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1210,
        "y": 1780,
        "wires": [
            [
                "dd28c298.ca6d6"
            ],
            []
        ]
    },
    {
        "id": "c4799edb.4f29a",
        "type": "ui_ui_control",
        "z": "53028f3b.590b5",
        "name": "ui change",
        "events": "change",
        "x": 1660,
        "y": 1780,
        "wires": [
            []
        ]
    },
    {
        "id": "dd28c298.ca6d6",
        "type": "function",
        "z": "53028f3b.590b5",
        "name": "pass to History Tab",
        "func": "msg.payload = {\"tab\":\"History\"};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 1780,
        "wires": [
            [
                "c4799edb.4f29a"
            ]
        ]
    },
    {
        "id": "144af316.1c1b2d",
        "type": "debug",
        "z": "88cec2c0.c8804",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "url",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1180,
        "y": 1080,
        "wires": []
    },
    {
        "id": "b921a688.20e248",
        "type": "comment",
        "z": "613e85c9.c6210c",
        "name": "Relative to Minting Nav",
        "info": "",
        "x": 160,
        "y": 40,
        "wires": []
    },
    {
        "id": "e2ab2101.1c932",
        "type": "function",
        "z": "613e85c9.c6210c",
        "name": "setup clarity ft contract file (Mainnet)",
        "func": "const ftnameraw = msg.payload.ftname;///\nconst ftsymbol = msg.payload.ftsymbol;///might want to just snip and uppercase the first 3 characters of the ftname\nconst ftmax = msg.payload.ftmax;///\nconst ftminter = global.get(\"depositaddress\");///set the minter as the primary address\nconst fturi = msg.payload.fturi;//needs additional integration with stacks storage component.\nconst ftname = ftnameraw.toLowerCase();\n\n\n//take the inputs and construct the Clarity contract file contents\nmsg.payload =   \";;;; Define interface traits per sibling contract\\n\"+\n                \"(impl-trait 'SP3FBR2AGK5H9QBDH3EEN6DF8EK8JY7RX8QJ5SVTE.sip-010-trait-ft-standard.sip-010-trait)\\n\"+\n                \"\\n\"+\n                \";;;; Mint Fungible Tokens via Dapparatus and send supply to minter\\n\"+\n                \"(define-constant err-unauthorized u1)\\n\"+\n                \"(define-constant minter '\" + ftminter + \")\\n\" +\n                \"(define-fungible-token \" + ftname + \" u\" + ftmax + \")\\n\" +\n                \"(ft-mint? \" + ftname + \" u\" + ftmax + \" minter)\\n\" +\n                \"\\n\"+\n                \"(define-read-only (get-total-supply)\\n\"+\n                \"  (ok (ft-get-supply \" + ftname + \"))\\n\"+\n                \")\\n\"+\n                \"\\n\"+\n                \"(define-read-only (get-name)\\n\"+\n                \"  (ok \\\"\" + ftname + \"\\\")\\n\" +\n                \")\\n\"+\n                \"\\n\"+\n                \"(define-read-only (get-symbol)\\n\"+\n                \"  (ok \\\"\" + ftsymbol + \"\\\")\\n\"+\n                \")\\n\"+\n                \"\\n\"+\n                \"(define-read-only (get-decimals)\\n\"+\n                \"  (ok u6)\\n\"+\n                \")\\n\"+\n                \"\\n\"+\n                \"(define-read-only (get-balance-of (account principal))\\n\"+\n                \"  (ok (ft-get-balance \" + ftname + \" account))\\n\"+\n                \")\\n\"+\n                \"\\n\"+\n                \"(define-public (transfer (amount uint) (sender principal) (recipient principal) (memo (optional (buff 34))))\\n\"+\n                \"  (if (is-eq tx-sender sender)\\n\"+\n                \"    (begin\\n\"+\n                \"      (try! (ft-transfer? \" + ftname + \" amount sender recipient))\\n\"+\n                \"      (print memo)\\n\"+\n                \"      (ok true)\\n\"+\n                \"    )\\n\"+\n                \"   (err u4)))\\n\"+\n                \"\\n\"+                \n                \"(define-read-only (get-token-uri)\\n\"+\n                \"  (ok (some u\\\"\" +  fturi + \"\\\"))\\n\"+\n                \")\\n\";\n               \nmsg.filename = ftnameraw + \".clar\"; // name the contract same as input custom token name\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 780,
        "wires": [
            [
                "ae38fd54.be582"
            ]
        ]
    },
    {
        "id": "a4a5fcfc.10dc1",
        "type": "ui_template",
        "z": "53028f3b.590b5",
        "d": true,
        "group": "c75785b2.7363d8",
        "name": "Transaction Mempool (Mainnet)",
        "order": 1,
        "width": 13,
        "height": "4",
        "format": "<h3>Pending Transactions</h3>\n<table>\n    <tr>\n        <th></th>\n        <th>Amount</th>\n        <th>Status</th>\n        <th>Fee</th>        \n        <th>Explorer</th>\n        <th>Date</th>\n    </tr>\n    <tr ng-repeat=\"obj in msg.payload\">\n        <td><img src=\"https://raw.githubusercontent.com/cryptocracy/dapparatus/master/stx-logo-blue-round-small.png\" width=\"32\" height=\"32\"> </td>\n        <td>{{obj.token_transfer.amount}}</td>\n        <td><small>{{obj.tx_status}}</small></td>\n        <td>{{obj.fee_rate}}</td>\n        <td><small><small><small><a href=\"https://explorer.stacks.co/txid/{{obj.tx_id}}?chain=mainnet\" target=\"_blank\" title=\"{{obj.tx_id}}\">View In Explorer</a></small></small></small></td>\n        <td><small><small>{{obj.receipt_time_iso}}</small></small></td>\n    </tr>\n</table>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 670,
        "y": 2260,
        "wires": [
            []
        ]
    },
    {
        "id": "be72974f.b7bde8",
        "type": "ui_template",
        "z": "53028f3b.590b5",
        "d": true,
        "group": "20a23299.1e38be",
        "name": "Transaction Mempool (Testnet)",
        "order": 1,
        "width": 13,
        "height": "4",
        "format": "<h3>Pending Transactions</h3>\n<table>\n    <tr>\n        <th></th>\n        <th>Amount</th>\n        <th>Status</th>\n        <th>Fee</th>        \n        <th>Explorer</th>\n        <th>Date</th>\n    </tr>\n    <tr ng-repeat=\"obj in msg.payload\">\n        <td><img src=\"https://raw.githubusercontent.com/cryptocracy/dapparatus/master/stx-logo-blue-round-small.png\" width=\"32\" height=\"32\"> </td>\n        <td>{{obj.token_transfer.amount}}</td>\n        <td><small>{{obj.tx_status}}</small></td>\n        <td>{{obj.fee_rate}}</td>\n        <td><small><small><small><a href=\"https://explorer.stacks.co/txid/{{obj.tx_id}}?chain=testnet\" target=\"_blank\" title=\"View in Explorer\">View in Explorer</a></small></small></small></td>\n        <td><small><small>{{obj.receipt_time_iso}}</small></small></td>\n    </tr>\n</table>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 670,
        "y": 2500,
        "wires": [
            []
        ]
    },
    {
        "id": "322ef057.2b9ab",
        "type": "link out",
        "z": "88cec2c0.c8804",
        "name": "pass pending mainnet transactions",
        "links": [
            "89c35f7.d92aaa"
        ],
        "x": 2175,
        "y": 200,
        "wires": []
    },
    {
        "id": "89c35f7.d92aaa",
        "type": "link in",
        "z": "53028f3b.590b5",
        "name": "get pending mainnet transactions",
        "links": [
            "322ef057.2b9ab"
        ],
        "x": 435,
        "y": 2260,
        "wires": [
            [
                "a4a5fcfc.10dc1"
            ]
        ]
    },
    {
        "id": "79c07226.a6a36c",
        "type": "link in",
        "z": "53028f3b.590b5",
        "name": "get pending testnet transactions",
        "links": [
            "5386b8d0.5343f8"
        ],
        "x": 435,
        "y": 2500,
        "wires": [
            [
                "be72974f.b7bde8"
            ]
        ]
    },
    {
        "id": "5386b8d0.5343f8",
        "type": "link out",
        "z": "88cec2c0.c8804",
        "name": "pass pending testnet transactions",
        "links": [
            "79c07226.a6a36c"
        ],
        "x": 2235,
        "y": 980,
        "wires": []
    },
    {
        "id": "73b636fe.f823b8",
        "type": "function",
        "z": "725ce57a.a25e4c",
        "name": "fqn register (Testnet)",
        "func": "const network = new stacksNetwork.StacksTestnet(); //or use Mainnet\n\nconst name = global.get(\"tempfqn\");\nconst salt = global.get(\"saltzero\");\nconst zonefile = \"yo\";//need to give user option to plug in their zonefile during reg process if so desired.\nconst publicKey = global.get(\"testnetdepositaddress\");//or use testnetdepositaddress\n\nconst unsignedTX = await stacksBns.buildRegisterNameTX({ name, salt, zonefile, publicKey, network});\n\nmsg.payload = unsignedTX;\nmsg.blockchain = \"0x\" + unsignedTX;\nmsg.pendingfqn = name;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "stacksNetwork",
                "module": "@stacks/network"
            },
            {
                "var": "stacksBns",
                "module": "@stacks/bns"
            }
        ],
        "x": 1440,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "914831ee.c0702",
        "type": "function",
        "z": "725ce57a.a25e4c",
        "name": "check for existing registered names (testnet)",
        "func": "var nettype = \"stacks-node-api.testnet.stacks.co\"; //or testnet\nvar testnetdepositaddress = global.get(\"testnetdepositaddress\"); //or depositaddress\n\nmsg.url = \"https://\" + nettype + \"/v1/addresses/stacks/\" + testnetdepositaddress;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "f3b299a1.887ac8",
        "type": "function",
        "z": "725ce57a.a25e4c",
        "name": "tempfqn can register? (testnet)",
        "func": "const network = new stacksNetwork.StacksTestnet();\n\nconst fullyQualifiedName = global.get(\"tempfqn\");\n\nconst welp = await stacksBns.canRegisterName({ fullyQualifiedName, network});\n\nmsg.tempfqn = fullyQualifiedName;\nmsg.payload = welp;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "stacksNetwork",
                "module": "@stacks/network"
            },
            {
                "var": "stacksBns",
                "module": "@stacks/bns"
            }
        ],
        "x": 390,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "8e3be3b3.5ed1",
        "type": "function",
        "z": "725ce57a.a25e4c",
        "name": "get name (testnet)",
        "func": "var nettype = \"stacks-node-api.testnet.stacks.co\"; //mainnet\nvar tempfqn = msg.payload; //fully qualified name to search\n\nmsg.url = \"https://\" + nettype + \"/v1/names/\" + tempfqn;\nmsg.tempfqn = tempfqn;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "9b0ce17.ef0b22",
        "type": "function",
        "z": "725ce57a.a25e4c",
        "name": "get Price of tempfqn (testnet)",
        "func": "var nettype = \"stacks-node-api.testnet.stacks.co\"; //mainnet\n//var nettype = \"stacks-node-api.mainnet.stacks.co\"; //mainnet\nvar tempfqn = global.get(\"tempfqn\");\n\nmsg.url = \"https://\" + nettype + \"/v2/prices/names/\" + tempfqn;\nmsg.tempfqn = tempfqn;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1600,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "4bb35af9.c7ca04",
        "type": "file",
        "z": "725ce57a.a25e4c",
        "name": "create local zonefile",
        "filename": "",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "ascii",
        "x": 1500,
        "y": 1080,
        "wires": [
            [
                "a1d813e6.c1a0a"
            ]
        ]
    },
    {
        "id": "195adc36.4612d4",
        "type": "file in",
        "z": "725ce57a.a25e4c",
        "name": "get local zonefile",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 1870,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "a1d813e6.c1a0a",
        "type": "delay",
        "z": "725ce57a.a25e4c",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 1680,
        "y": 1080,
        "wires": [
            [
                "195adc36.4612d4"
            ]
        ]
    },
    {
        "id": "30e9ecaf.cc85f4",
        "type": "function",
        "z": "725ce57a.a25e4c",
        "name": "create zonefile.txt",
        "func": "msg.payload =   \"(define-trait ft-trait\\n\" +\n                \"  (\\n\" +\n                \"    ;; Transfer from the caller to a new principal\\n\" +\n                \"    (transfer (uint principal principal (optional (buff 34))) (response bool uint))\\n\" +\n                \"\\n\" +\n                \"    ;; human readable name of the token\\n\" +\n                \"    (get-name () (response (string-ascii 32) uint))\\n\" +\n                \"\\n\" +\n                \"    ;; ticker symbol or empty if none\\n\" +\n                \"    (get-symbol () (response (string-ascii 32) uint))\\n\" +\n                \"\\n\" +\n                \"    ;; number of decimals used\\n\" +\n                \"    (get-decimals () (response uint uint))\\n\" +\n                \"\\n\" +\n                \"    ;; balance of the passed principal\\n\" +\n                \"    (get-balance-of (principal) (response uint uint))\\n\" +\n                \"\\n\" +\n                \"    ;; current total supply\\n\" +\n                \"    (get-total-supply () (response uint uint))\\n\" +\n                \"\\n\" +\n                \"    ;; optional URI that represents metadata of this token\\n\" +\n                \"    (get-token-uri () (response (optional (string-utf8 256)) uint))\\n\" +\n                \"  )\\n\" +\n                \")\";\n               \nmsg.filename = \"zonefile.txt\"; // name the contract same as input custom token name\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 1080,
        "wires": [
            [
                "4bb35af9.c7ca04"
            ]
        ]
    },
    {
        "id": "788ea147.23459",
        "type": "function",
        "z": "f7442446.0c97f8",
        "name": "get assets url (testnet)",
        "func": "const nettype = \"stacks-node-api.testnet.stacks.co\"; // or use mainnet\nconst principal = global.get(\"testnetdepositaddress\"); // or use depositaddress for mainnet\n\nmsg.url = \"https://\" + nettype + \"/extended/v1/address/\" + principal + \"/balances\";// prior was /assets\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 920,
        "wires": [
            [
                "2d53e6be.0db00a"
            ]
        ]
    },
    {
        "id": "2d53e6be.0db00a",
        "type": "http request",
        "z": "f7442446.0c97f8",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "persist": false,
        "authType": "",
        "x": 550,
        "y": 960,
        "wires": [
            [
                "b7683662.ee3d28"
            ]
        ]
    },
    {
        "id": "b7683662.ee3d28",
        "type": "json",
        "z": "f7442446.0c97f8",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 730,
        "y": 960,
        "wires": [
            [
                "d8878be7.694068"
            ]
        ]
    },
    {
        "id": "d8878be7.694068",
        "type": "change",
        "z": "f7442446.0c97f8",
        "name": "move ft's to payload",
        "rules": [
            {
                "t": "move",
                "p": "payload.fungible_tokens",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 940,
        "y": 960,
        "wires": [
            [
                "c0c8e2b5.31ca7",
                "cbf4cd7d.4a96c",
                "49a99107.00da3"
            ]
        ]
    },
    {
        "id": "7a91e8ca.d72578",
        "type": "inject",
        "z": "f7442446.0c97f8",
        "name": "sample proper array of objects (debug purposes)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[{\"id\":\"ST1E645A6361NNMSXCGKCFASB936CD2ZWM2XSC1X2.DERP::DERP\",\"alias\":\"DERP\",\"balance\":\"2821109907456\",\"total_sent\":\"0\",\"total_received\":\"2821109907456\"},{\"id\":\"ST1E645A6361NNMSXCGKCFASB936CD2ZWM2XSC1X2.COOL::COOL\",\"alias\":\"COOL\",\"balance\":\"21000000\",\"total_sent\":\"0\",\"total_received\":\"21000000\"}]",
        "payloadType": "json",
        "x": 820,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "cbf4cd7d.4a96c",
        "type": "function",
        "z": "f7442446.0c97f8",
        "name": "just key names",
        "func": "const existingArray = msg.payload;\nconst arrayofkeys = Object.keys(existingArray); \nconst names = arrayofkeys.map(function (z){\n    return z.split(\"::\");\n});\n\nmsg.payload = {names};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 1020,
        "wires": [
            [
                "3f1208f3.82c9b8",
                "605d5b01.f0ce54",
                "7440f9a1.036a58",
                "265f6e52.b3b642"
            ]
        ]
    },
    {
        "id": "c2d0d2e7.a8832",
        "type": "inject",
        "z": "f7442446.0c97f8",
        "name": "sample improper object of objects",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"ST1E645A6361NNMSXCGKCFASB936CD2ZWM2XSC1X2.DERP::DERP\":{\"balance\":\"2821109907456\",\"total_sent\":\"0\",\"total_received\":\"2821109907456\"},\"ST1E645A6361NNMSXCGKCFASB936CD2ZWM2XSC1X2.PDX::PDX\":{\"balance\":\"21000000\",\"total_sent\":\"0\",\"total_received\":\"21000000\"},\"ST1E645A6361NNMSXCGKCFASB936CD2ZWM2XSC1X2.LSD::LSD\":{\"balance\":\"42000000\",\"total_sent\":\"0\",\"total_received\":\"42000000\"}}",
        "payloadType": "json",
        "x": 930,
        "y": 1020,
        "wires": [
            [
                "c0c8e2b5.31ca7",
                "cbf4cd7d.4a96c"
            ]
        ]
    },
    {
        "id": "7d039543.4ce9bc",
        "type": "comment",
        "z": "f7442446.0c97f8",
        "name": "Relative to My Tokens (UNDER CONSTRUCTION)",
        "info": "",
        "x": 410,
        "y": 740,
        "wires": []
    },
    {
        "id": "c0c8e2b5.31ca7",
        "type": "function",
        "z": "f7442446.0c97f8",
        "name": "just balances",
        "func": "const existingArray = msg.payload;\nconst balances = Object.values(existingArray);\nmsg.payload = {balances};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 960,
        "wires": [
            [
                "3f1208f3.82c9b8",
                "ec431e72.dc554"
            ]
        ]
    },
    {
        "id": "3f1208f3.82c9b8",
        "type": "join",
        "z": "f7442446.0c97f8",
        "name": "",
        "mode": "custom",
        "build": "merged",
        "property": "payload",
        "propertyType": "msg",
        "key": "payload",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "1",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 2410,
        "y": 1080,
        "wires": [
            [
                "2fb77993.ae23d6",
                "bf780bed.d727c8"
            ]
        ]
    },
    {
        "id": "2fb77993.ae23d6",
        "type": "debug",
        "z": "f7442446.0c97f8",
        "d": true,
        "name": "my tokens debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2630,
        "y": 1000,
        "wires": []
    },
    {
        "id": "bf780bed.d727c8",
        "type": "ui_template",
        "z": "f7442446.0c97f8",
        "group": "2e2fb22f.78448e",
        "name": "Tokens List (Max 10)",
        "order": 2,
        "width": "13",
        "height": "11",
        "format": "<h3>{{msg.payload.names.length}} Fungible Token(s) Owned on.</h3>\n\n<table>\n    <tr>\n        <th></th>\n        <th>Symbol</th>\n        <th>Balance</th>        \n        <th>Total Sent</th>\n        <th>Total Received</th>\n        <th></th>\n        <th></th>\n    </tr>\n\n\t<tr ng-if=\"msg.payload.names[0] !== undefined\">\n        <td><img src=\"{{msg.payload.image0}}\" width=\"32\" height=\"32\"> </td>\n        <td>{{msg.payload.names[0][1]}}</td>\n        <td>{{msg.payload.balances[0].balance}}</td>     \n        <td>{{msg.payload.balances[0].total_sent}}</td> \n        <td>{{msg.payload.balances[0].total_received}}</td>\n        <td>\n            <md-button \n                class=\"md-button\" \n                ng-click=\"send({topic:'transfer', payload:msg.payload.names[0][0]})\">Transfer\n            </md-button>\n        </td>\n        <td><md-button>History</md-button></td>\n    </tr>\n\n\t<tr ng-if=\"msg.payload.names[1] !== undefined\">\n        <td><img src=\"{{msg.payload.image1}}\" width=\"32\" height=\"32\"></td>\n        <td>{{msg.payload.names[1][1]}}</td>\n        <td>{{msg.payload.balances[1].balance}}</td>     \n        <td>{{msg.payload.balances[1].total_sent}}</td> \n        <td>{{msg.payload.balances[1].total_received}}</td>\n        <td>\n            <md-button \n                class=\"md-button\" \n                ng-click=\"send({topic:'transfer', payload:msg.payload.names[1][0]})\">Transfer\n            </md-button>\n        </td>\n        <td><md-button>History</md-button></td>        \n    </tr>\n    \n    <tr ng-if=\"msg.payload.names[2] !== undefined\">\n        <td><img src=\"{{msg.payload.image2}}\" width=\"32\" height=\"32\"></td>\n        <td>{{msg.payload.names[2][1]}}</td>\n        <td>{{msg.payload.balances[2].balance}}</td>     \n        <td>{{msg.payload.balances[2].total_sent}}</td> \n        <td>{{msg.payload.balances[2].total_received}}</td>\n        <td>\n            <md-button \n                class=\"md-button\" \n                ng-click=\"send({topic:'transfer', payload:msg.payload.names[2][0]})\">Transfer\n            </md-button>\n        </td>\n        <td><md-button>History</md-button></td>        \n    </tr>\n    \n    <tr ng-if=\"msg.payload.names[3] !== undefined\">\n        <td><img src=\"{{msg.payload.image3}}\" width=\"32\" height=\"32\"></td>\n        <td>{{msg.payload.names[3][1]}}</td>\n        <td>{{msg.payload.balances[3].balance}}</td>     \n        <td>{{msg.payload.balances[3].total_sent}}</td> \n        <td>{{msg.payload.balances[3].total_received}}</td>\n        <td>\n            <md-button \n                class=\"md-button\" \n                ng-click=\"send({topic:'transfer', payload:msg.payload.names[3][0]})\">Transfer\n            </md-button>\n        </td>\n        <td><md-button>History</md-button></td>        \n    </tr>\n    \n    <tr ng-if=\"msg.payload.names[4] !== undefined\">\n        <td><img src=\"{{msg.payload.image4}}\" width=\"32\" height=\"32\"></td>\n        <td>{{msg.payload.names[4][1]}}</td>\n        <td>{{msg.payload.balances[4].balance}}</td>     \n        <td>{{msg.payload.balances[4].total_sent}}</td> \n        <td>{{msg.payload.balances[4].total_received}}</td>\n        <td>\n            <md-button \n                class=\"md-button\" \n                ng-click=\"send({topic:'transfer', payload:msg.payload.names[4][0]})\">Transfer\n            </md-button>\n        </td>\n        <td><md-button>History</md-button></td>        \n    </tr>\n    \n    <tr ng-if=\"msg.payload.names[5] !== undefined\">\n        <td><img src=\"{{msg.payload.image5}}\" width=\"32\" height=\"32\"></td>\n        <td>{{msg.payload.names[5][1]}}</td>\n        <td>{{msg.payload.balances[5].balance}}</td>     \n        <td>{{msg.payload.balances[5].total_sent}}</td> \n        <td>{{msg.payload.balances[5].total_received}}</td>\n        <td>\n            <md-button \n                class=\"md-button\" \n                ng-click=\"send({topic:'transfer', payload:msg.payload.names[5][0]})\">Transfer\n            </md-button>\n        </td>\n        <td><md-button>History</md-button></td>        \n    </tr>\n\n    <tr ng-if=\"msg.payload.names[6] !== undefined\">\n        <td><img src=\"{{msg.payload.image6}}\" width=\"32\" height=\"32\"></td>\n        <td>{{msg.payload.names[6][1]}}</td>\n        <td>{{msg.payload.balances[6].balance}}</td>     \n        <td>{{msg.payload.balances[6].total_sent}}</td> \n        <td>{{msg.payload.balances[6].total_received}}</td>\n        <td>\n            <md-button \n                class=\"md-button\" \n                ng-click=\"send({topic:'transfer', payload:msg.payload.names[6][0]})\">Transfer\n            </md-button>\n        </td>\n        <td><md-button>History</md-button></td>        \n    </tr>\n    <tr ng-if=\"msg.payload.names[7] !== undefined\">\n        <td><img src=\"{{msg.payload.image7}}\" width=\"32\" height=\"32\"></td>\n        <td>{{msg.payload.names[7][1]}}</td>\n        <td>{{msg.payload.balances[7].balance}}</td>     \n        <td>{{msg.payload.balances[7].total_sent}}</td> \n        <td>{{msg.payload.balances[7].total_received}}</td>\n        <td>\n            <md-button \n                class=\"md-button\" \n                ng-click=\"send({topic:'transfer', payload:msg.payload.names[7][0]})\">Transfer\n            </md-button>\n        </td>\n        <td><md-button>History</md-button></td>        \n    </tr>\n    <tr ng-if=\"msg.payload.names[8] !== undefined\">\n        <td><img src=\"{{msg.payload.image8}}\" width=\"32\" height=\"32\"></td>\n        <td>{{msg.payload.names[8][1]}}</td>\n        <td>{{msg.payload.balances[8].balance}}</td>     \n        <td>{{msg.payload.balances[8].total_sent}}</td> \n        <td>{{msg.payload.balances[8].total_received}}</td>\n        <td>\n            <md-button \n                class=\"md-button\" \n                ng-click=\"send({topic:'transfer', payload:msg.payload.names[8][0]})\">Transfer\n            </md-button>\n        </td>\n        <td><md-button>History</md-button></td>        \n    </tr>\n    <tr ng-if=\"msg.payload.names[9] !== undefined\">\n        <td><img src=\"{{msg.payload.image9}}\" width=\"32\" height=\"32\"></td>\n        <td>{{msg.payload.names[9][1]}}</td>\n        <td>{{msg.payload.balances[9].balance}}</td>     \n        <td>{{msg.payload.balances[9].total_sent}}</td> \n        <td>{{msg.payload.balances[9].total_received}}</td>\n        <td>\n            <md-button \n                class=\"md-button\" \n                ng-click=\"send({topic:'transfer', payload:msg.payload.names[9][0]})\">Transfer\n            </md-button>\n        </td>\n        <td><md-button>History</md-button></td>        \n    </tr>\n\n</table>\n\n<small><small>Disclaimer: Max 10 Tokens</small></small>\n\n\n\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 2640,
        "y": 1080,
        "wires": [
            [
                "3dc05ac5.d24776",
                "21191574.322f4a"
            ]
        ]
    },
    {
        "id": "29cee1b2.92799e",
        "type": "comment",
        "z": "f7442446.0c97f8",
        "name": "Asset Lists (Dev Notes)",
        "info": "**Fungible Tokens:**\n - Get Owned List per Mainnet\n - Transfers Mainnet\n - History needs finished\n_(Additional Testing maybe required due to recent updates)_\n\n**Other Assets:**\n - Get Owned List per Mainnet\n - Transfers needs finished\n - Inspect needs finished\n_(Additional Testing maybe required due to recent updates)_\n",
        "x": 1480,
        "y": 260,
        "wires": []
    },
    {
        "id": "359ac0fd.57a64",
        "type": "function",
        "z": "f7442446.0c97f8",
        "name": "get contract 0 url (testnet)",
        "func": "const nettype = \"stacks-node-api.testnet.stacks.co\"; // or use mainnet\nconst contract = global.get(\"ftcontractnames[0][0]\"); // or use ft1contract etc\nmsg.url = \"https://\" + nettype + \"/extended/v1/contract/\" + contract;// prior was /assets\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 1600,
        "wires": [
            [
                "93bdcff4.29b0c"
            ]
        ]
    },
    {
        "id": "e8c4dd6d.c35da",
        "type": "http request",
        "z": "f7442446.0c97f8",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 810,
        "y": 1600,
        "wires": [
            [
                "4cfb4c56.a44634"
            ]
        ]
    },
    {
        "id": "4cfb4c56.a44634",
        "type": "json",
        "z": "f7442446.0c97f8",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 950,
        "y": 1600,
        "wires": [
            [
                "bc9263da.b9d19"
            ]
        ]
    },
    {
        "id": "605d5b01.f0ce54",
        "type": "debug",
        "z": "f7442446.0c97f8",
        "d": true,
        "name": "token debugger",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1700,
        "y": 1040,
        "wires": []
    },
    {
        "id": "4262a729.05abf8",
        "type": "function",
        "z": "f7442446.0c97f8",
        "d": true,
        "name": "token meta 0",
        "func": "const str = msg.payload.source_code;\nconst res = str.split(\"get-token-uri\");\nconst res2 = res[1].split(\"some u\\\"\");\nconst res3 = res2[1].split(\".json\");\n\nmsg.url = res3[0] + \".json\";\nmsg.payload = res3[0] + \".json\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 1220,
        "wires": [
            [
                "924754d4.095488"
            ]
        ]
    },
    {
        "id": "924754d4.095488",
        "type": "http request",
        "z": "f7442446.0c97f8",
        "d": true,
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1470,
        "y": 1220,
        "wires": [
            [
                "6d0bf2f3.de231c"
            ]
        ]
    },
    {
        "id": "6d0bf2f3.de231c",
        "type": "json",
        "z": "f7442446.0c97f8",
        "d": true,
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1650,
        "y": 1220,
        "wires": [
            [
                "a1d22f32.1e5c1"
            ]
        ]
    },
    {
        "id": "a1d22f32.1e5c1",
        "type": "function",
        "z": "f7442446.0c97f8",
        "d": true,
        "name": "set image0",
        "func": "const image0 = msg.payload.image;\nmsg.payload = {image0};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1810,
        "y": 1220,
        "wires": [
            [
                "61361a6d.ebaa34"
            ]
        ]
    },
    {
        "id": "4f3cb59a.07fe0c",
        "type": "function",
        "z": "f7442446.0c97f8",
        "name": "get contract 1 url (testnet)",
        "func": "const nettype = \"stacks-node-api.testnet.stacks.co\"; // or use mainnet\nconst contract = global.get(\"ftcontractnames[1][0]\"); // or use ft1contract etc\nmsg.url = \"https://\" + nettype + \"/extended/v1/contract/\" + contract;// prior was /assets\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 1720,
        "wires": [
            [
                "ceaef61c.5ceab8"
            ]
        ]
    },
    {
        "id": "33301f96.99394",
        "type": "http request",
        "z": "f7442446.0c97f8",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "persist": false,
        "authType": "",
        "x": 810,
        "y": 1720,
        "wires": [
            [
                "c27d3ad5.cb2d38"
            ]
        ]
    },
    {
        "id": "c27d3ad5.cb2d38",
        "type": "json",
        "z": "f7442446.0c97f8",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 950,
        "y": 1720,
        "wires": [
            [
                "49ea32a3.82ecdc"
            ]
        ]
    },
    {
        "id": "bc63ae9a.a182e",
        "type": "function",
        "z": "f7442446.0c97f8",
        "d": true,
        "name": "token meta 1",
        "func": "const str = msg.payload.source_code;\nconst res = str.split(\"get-token-uri\");\nconst res2 = res[1].split(\"some u\\\"\");\nconst res3 = res2[1].split(\".json\");\n\nmsg.url = res3[0] + \".json\";\nmsg.payload = res3[0] + \".json\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 1260,
        "wires": [
            [
                "e8f7e32d.e998a"
            ]
        ]
    },
    {
        "id": "e8f7e32d.e998a",
        "type": "http request",
        "z": "f7442446.0c97f8",
        "d": true,
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1470,
        "y": 1260,
        "wires": [
            [
                "f295514c.0fd7c"
            ]
        ]
    },
    {
        "id": "f295514c.0fd7c",
        "type": "json",
        "z": "f7442446.0c97f8",
        "d": true,
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1650,
        "y": 1260,
        "wires": [
            [
                "59123087.880da"
            ]
        ]
    },
    {
        "id": "59123087.880da",
        "type": "function",
        "z": "f7442446.0c97f8",
        "d": true,
        "name": "set image1",
        "func": "const image1 = msg.payload.image;\nmsg.payload = {image1};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1810,
        "y": 1260,
        "wires": [
            [
                "61361a6d.ebaa34"
            ]
        ]
    },
    {
        "id": "61361a6d.ebaa34",
        "type": "join",
        "z": "f7442446.0c97f8",
        "name": "",
        "mode": "custom",
        "build": "merged",
        "property": "payload",
        "propertyType": "msg",
        "key": "payload",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "10",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 3090,
        "y": 1580,
        "wires": [
            [
                "3f1208f3.82c9b8"
            ]
        ]
    },
    {
        "id": "7440f9a1.036a58",
        "type": "link out",
        "z": "f7442446.0c97f8",
        "name": "to set global ftcontract0",
        "links": [
            "e3fdd2dc.9c1a4"
        ],
        "x": 1655,
        "y": 900,
        "wires": []
    },
    {
        "id": "e3fdd2dc.9c1a4",
        "type": "link in",
        "z": "e83b2318.6f5c6",
        "name": "pass to Global (set ftcontract0)",
        "links": [
            "7440f9a1.036a58"
        ],
        "x": 155,
        "y": 1020,
        "wires": [
            [
                "80760848.deb508"
            ]
        ]
    },
    {
        "id": "80760848.deb508",
        "type": "change",
        "z": "e83b2318.6f5c6",
        "name": "set global.ftcontractnames",
        "rules": [
            {
                "t": "move",
                "p": "payload.names",
                "pt": "msg",
                "to": "ftcontractnames",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 550,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "47419eab.05c3b",
        "type": "inject",
        "z": "f7442446.0c97f8",
        "name": "default names of tokens",
        "props": [
            {
                "p": "payload.names",
                "v": "undefined",
                "vt": "str"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 1120,
        "y": 920,
        "wires": [
            [
                "7440f9a1.036a58"
            ]
        ]
    },
    {
        "id": "49ea32a3.82ecdc",
        "type": "switch",
        "z": "f7442446.0c97f8",
        "name": "pass thru unless errored",
        "property": "payload.error",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            },
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1130,
        "y": 1720,
        "wires": [
            [
                "bc63ae9a.a182e",
                "8052aca3.fec73"
            ],
            [
                "8ee0d8a0.bb9c78",
                "d1516889.068bc8"
            ]
        ]
    },
    {
        "id": "bc9263da.b9d19",
        "type": "switch",
        "z": "f7442446.0c97f8",
        "name": "pass thru unless errored",
        "property": "payload.error",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            },
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1130,
        "y": 1600,
        "wires": [
            [
                "4262a729.05abf8",
                "69801746.039c78"
            ],
            [
                "ad0c52b9.07955",
                "1a60cd26.d74763"
            ]
        ]
    },
    {
        "id": "ad0c52b9.07955",
        "type": "function",
        "z": "f7442446.0c97f8",
        "d": true,
        "name": "or set image0 (default)",
        "func": "const image0 = \"https://cryptocracy.io/assets/images/cryptocracy_clear.png\";\nmsg.payload = {image0};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2040,
        "y": 1220,
        "wires": [
            [
                "61361a6d.ebaa34"
            ]
        ]
    },
    {
        "id": "8ee0d8a0.bb9c78",
        "type": "function",
        "z": "f7442446.0c97f8",
        "d": true,
        "name": "or image1 (default)",
        "func": "const image1 = \"https://cryptocracy.io/assets/images/cryptocracy_clear.png\";\nmsg.payload = {image1};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2030,
        "y": 1260,
        "wires": [
            [
                "61361a6d.ebaa34"
            ]
        ]
    },
    {
        "id": "265f6e52.b3b642",
        "type": "link out",
        "z": "f7442446.0c97f8",
        "name": "get images tripper",
        "links": [
            "4a7ebf16.a2495"
        ],
        "x": 1655,
        "y": 860,
        "wires": []
    },
    {
        "id": "4a7ebf16.a2495",
        "type": "link in",
        "z": "f7442446.0c97f8",
        "name": "get images tripper 2",
        "links": [
            "265f6e52.b3b642"
        ],
        "x": 35,
        "y": 2100,
        "wires": [
            [
                "359ac0fd.57a64",
                "4f3cb59a.07fe0c",
                "47341cf7.ba6a94",
                "82787eb7.cc2f1",
                "a83aa020.0149e",
                "c37110ae.e291f",
                "6e4b1773.ef7ee8",
                "630d57ee.13de58",
                "37febb68.bac794",
                "b9b227ab.e939e8"
            ]
        ]
    },
    {
        "id": "47341cf7.ba6a94",
        "type": "function",
        "z": "f7442446.0c97f8",
        "name": "get contract 2 url (testnet)",
        "func": "const nettype = \"stacks-node-api.testnet.stacks.co\"; // or use mainnet\nconst contract = global.get(\"ftcontractnames[2][0]\"); // or use ft1contract etc\nmsg.url = \"https://\" + nettype + \"/extended/v1/contract/\" + contract;// prior was /assets\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 1840,
        "wires": [
            [
                "1ce38732.df7f69"
            ]
        ]
    },
    {
        "id": "31d060a7.7758b",
        "type": "http request",
        "z": "f7442446.0c97f8",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "persist": false,
        "authType": "",
        "x": 810,
        "y": 1840,
        "wires": [
            [
                "fe951b10.e42358"
            ]
        ]
    },
    {
        "id": "fe951b10.e42358",
        "type": "json",
        "z": "f7442446.0c97f8",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 950,
        "y": 1840,
        "wires": [
            [
                "cc1a8b3a.370b48"
            ]
        ]
    },
    {
        "id": "5d68bd24.fdd954",
        "type": "function",
        "z": "f7442446.0c97f8",
        "name": "token meta 2",
        "func": "const str = msg.payload.source_code;\nconst res = str.split(\"get-token-uri\");\nconst res2 = res[1].split(\"some u\\\"\");\nconst res3 = res2[1].split(\".json\");\n\nmsg.url = res3[0] + \".json\";\nmsg.payload = res3[0] + \".json\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 1800,
        "wires": [
            [
                "a4202a10.179b78"
            ]
        ]
    },
    {
        "id": "a4202a10.179b78",
        "type": "http request",
        "z": "f7442446.0c97f8",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "persist": false,
        "authType": "",
        "x": 1850,
        "y": 1800,
        "wires": [
            [
                "3795fb9e.828a74"
            ]
        ]
    },
    {
        "id": "3795fb9e.828a74",
        "type": "json",
        "z": "f7442446.0c97f8",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 2030,
        "y": 1800,
        "wires": [
            [
                "5920fb95.d1a6a4"
            ]
        ]
    },
    {
        "id": "5920fb95.d1a6a4",
        "type": "function",
        "z": "f7442446.0c97f8",
        "name": "set image2",
        "func": "const image2 = msg.payload.image;\nmsg.payload = {image2};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2190,
        "y": 1800,
        "wires": [
            [
                "61361a6d.ebaa34"
            ]
        ]
    },
    {
        "id": "cc1a8b3a.370b48",
        "type": "switch",
        "z": "f7442446.0c97f8",
        "name": "pass thru unless errored",
        "property": "payload.error",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            },
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1130,
        "y": 1840,
        "wires": [
            [
                "2a8e7b97.61ab04"
            ],
            [
                "be8368f5.8612d8"
            ]
        ]
    },
    {
        "id": "be8368f5.8612d8",
        "type": "function",
        "z": "f7442446.0c97f8",
        "name": "or image2 (default)",
        "func": "const image2 = \"https://cryptocracy.io/assets/images/cryptocracy_clear.png\";\nmsg.payload = {image2};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2210,
        "y": 1860,
        "wires": [
            [
                "61361a6d.ebaa34"
            ]
        ]
    },
    {
        "id": "82787eb7.cc2f1",
        "type": "function",
        "z": "f7442446.0c97f8",
        "name": "get contract 3 url (testnet)",
        "func": "const nettype = \"stacks-node-api.testnet.stacks.co\"; // or use mainnet\nconst contract = global.get(\"ftcontractnames[3][0]\"); \nmsg.url = \"https://\" + nettype + \"/extended/v1/contract/\" + contract;// prior was /assets\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 1960,
        "wires": [
            [
                "f1068bdf.868c28"
            ]
        ]
    },
    {
        "id": "74b018a.a9fd5e8",
        "type": "http request",
        "z": "f7442446.0c97f8",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "persist": false,
        "authType": "",
        "x": 810,
        "y": 1960,
        "wires": [
            [
                "662ec3c6.d5cdfc"
            ]
        ]
    },
    {
        "id": "662ec3c6.d5cdfc",
        "type": "json",
        "z": "f7442446.0c97f8",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 950,
        "y": 1960,
        "wires": [
            [
                "124a5383.d2363c"
            ]
        ]
    },
    {
        "id": "989a09f4.675c18",
        "type": "function",
        "z": "f7442446.0c97f8",
        "name": "token meta 3",
        "func": "const str = msg.payload.source_code;\nconst res = str.split(\"get-token-uri\");\nconst res2 = res[1].split(\"some u\\\"\");\nconst res3 = res2[1].split(\".json\");\n\nmsg.url = res3[0] + \".json\";\nmsg.payload = res3[0] + \".json\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 1920,
        "wires": [
            [
                "4995236e.f9971c"
            ]
        ]
    },
    {
        "id": "4995236e.f9971c",
        "type": "http request",
        "z": "f7442446.0c97f8",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "persist": false,
        "authType": "",
        "x": 1850,
        "y": 1920,
        "wires": [
            [
                "74bb894b.f4daf8"
            ]
        ]
    },
    {
        "id": "74bb894b.f4daf8",
        "type": "json",
        "z": "f7442446.0c97f8",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 2030,
        "y": 1920,
        "wires": [
            [
                "a783f335.b30b4"
            ]
        ]
    },
    {
        "id": "a783f335.b30b4",
        "type": "function",
        "z": "f7442446.0c97f8",
        "name": "set image3",
        "func": "const image3 = msg.payload.image;\nmsg.payload = {image3};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2190,
        "y": 1920,
        "wires": [
            [
                "61361a6d.ebaa34"
            ]
        ]
    },
    {
        "id": "124a5383.d2363c",
        "type": "switch",
        "z": "f7442446.0c97f8",
        "name": "pass thru unless errored",
        "property": "payload.error",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            },
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1130,
        "y": 1960,
        "wires": [
            [
                "57c27740.ce7d48"
            ],
            [
                "b5a46201.258c4"
            ]
        ]
    },
    {
        "id": "b5a46201.258c4",
        "type": "function",
        "z": "f7442446.0c97f8",
        "name": "or image3 (default)",
        "func": "const image3 = \"https://cryptocracy.io/assets/images/cryptocracy_clear.png\";\nmsg.payload = {image3};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2210,
        "y": 1980,
        "wires": [
            [
                "61361a6d.ebaa34"
            ]
        ]
    },
    {
        "id": "a83aa020.0149e",
        "type": "function",
        "z": "f7442446.0c97f8",
        "name": "get contract 4 url (testnet)",
        "func": "const nettype = \"stacks-node-api.testnet.stacks.co\"; // or use mainnet\nconst contract = global.get(\"ftcontractnames[4][0]\"); // or use ft1contract etc\nmsg.url = \"https://\" + nettype + \"/extended/v1/contract/\" + contract;// prior was /assets\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 2060,
        "wires": [
            [
                "31d44d99.a947d2"
            ]
        ]
    },
    {
        "id": "2a473c70.8999e4",
        "type": "http request",
        "z": "f7442446.0c97f8",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "persist": false,
        "authType": "",
        "x": 810,
        "y": 2060,
        "wires": [
            [
                "3269903.b361e7"
            ]
        ]
    },
    {
        "id": "3269903.b361e7",
        "type": "json",
        "z": "f7442446.0c97f8",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 950,
        "y": 2060,
        "wires": [
            [
                "a45d0f0c.2686a"
            ]
        ]
    },
    {
        "id": "9cf9e16b.93a78",
        "type": "function",
        "z": "f7442446.0c97f8",
        "name": "token meta 4",
        "func": "const str = msg.payload.source_code;\nconst res = str.split(\"get-token-uri\");\nconst res2 = res[1].split(\"some u\\\"\");\nconst res3 = res2[1].split(\".json\");\n\nmsg.url = res3[0] + \".json\";\nmsg.payload = res3[0] + \".json\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 2020,
        "wires": [
            [
                "5f67735.4c8aa8c"
            ]
        ]
    },
    {
        "id": "5f67735.4c8aa8c",
        "type": "http request",
        "z": "f7442446.0c97f8",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "persist": false,
        "authType": "",
        "x": 1850,
        "y": 2020,
        "wires": [
            [
                "a9437260.f00e"
            ]
        ]
    },
    {
        "id": "a9437260.f00e",
        "type": "json",
        "z": "f7442446.0c97f8",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 2030,
        "y": 2020,
        "wires": [
            [
                "88fb1c49.13a3b"
            ]
        ]
    },
    {
        "id": "88fb1c49.13a3b",
        "type": "function",
        "z": "f7442446.0c97f8",
        "name": "set image4",
        "func": "const image4 = msg.payload.image;\nmsg.payload = {image4};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2190,
        "y": 2020,
        "wires": [
            [
                "61361a6d.ebaa34"
            ]
        ]
    },
    {
        "id": "a45d0f0c.2686a",
        "type": "switch",
        "z": "f7442446.0c97f8",
        "name": "pass thru unless errored",
        "property": "payload.error",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            },
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1130,
        "y": 2060,
        "wires": [
            [
                "d8bc754f.50dd28"
            ],
            [
                "307f543a.8222ac"
            ]
        ]
    },
    {
        "id": "307f543a.8222ac",
        "type": "function",
        "z": "f7442446.0c97f8",
        "name": "or image4 (default)",
        "func": "const image4 = \"https://cryptocracy.io/assets/images/cryptocracy_clear.png\";\nmsg.payload = {image4};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2210,
        "y": 2100,
        "wires": [
            [
                "61361a6d.ebaa34"
            ]
        ]
    },
    {
        "id": "c37110ae.e291f",
        "type": "function",
        "z": "f7442446.0c97f8",
        "name": "get contract 5 url (testnet)",
        "func": "const nettype = \"stacks-node-api.testnet.stacks.co\"; // or use mainnet\nconst contract = global.get(\"ftcontractnames[5][0]\"); // or use ft1contract etc\nmsg.url = \"https://\" + nettype + \"/extended/v1/contract/\" + contract;// prior was /assets\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 2200,
        "wires": [
            [
                "493e33b7.e9649c"
            ]
        ]
    },
    {
        "id": "33ddc782.741778",
        "type": "http request",
        "z": "f7442446.0c97f8",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "persist": false,
        "authType": "",
        "x": 810,
        "y": 2220,
        "wires": [
            [
                "161db1ce.4c1fbe"
            ]
        ]
    },
    {
        "id": "161db1ce.4c1fbe",
        "type": "json",
        "z": "f7442446.0c97f8",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 950,
        "y": 2220,
        "wires": [
            [
                "94fb8f01.062f2"
            ]
        ]
    },
    {
        "id": "4f695cd6.030794",
        "type": "function",
        "z": "f7442446.0c97f8",
        "name": "token meta 5",
        "func": "const str = msg.payload.source_code;\nconst res = str.split(\"get-token-uri\");\nconst res2 = res[1].split(\"some u\\\"\");\nconst res3 = res2[1].split(\".json\");\n\nmsg.url = res3[0] + \".json\";\nmsg.payload = res3[0] + \".json\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 2160,
        "wires": [
            [
                "1fcc208e.51f64f"
            ]
        ]
    },
    {
        "id": "1fcc208e.51f64f",
        "type": "http request",
        "z": "f7442446.0c97f8",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "persist": false,
        "authType": "",
        "x": 1850,
        "y": 2160,
        "wires": [
            [
                "51f44a03.5047c4"
            ]
        ]
    },
    {
        "id": "51f44a03.5047c4",
        "type": "json",
        "z": "f7442446.0c97f8",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 2030,
        "y": 2160,
        "wires": [
            [
                "45425a17.aeecc4"
            ]
        ]
    },
    {
        "id": "45425a17.aeecc4",
        "type": "function",
        "z": "f7442446.0c97f8",
        "name": "set image5",
        "func": "const image5 = msg.payload.image;\nmsg.payload = {image5};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2190,
        "y": 2160,
        "wires": [
            [
                "61361a6d.ebaa34"
            ]
        ]
    },
    {
        "id": "94fb8f01.062f2",
        "type": "switch",
        "z": "f7442446.0c97f8",
        "name": "pass thru unless errored",
        "property": "payload.error",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            },
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1130,
        "y": 2220,
        "wires": [
            [
                "d4f6ab82.c39208"
            ],
            [
                "4063f524.742d9c"
            ]
        ]
    },
    {
        "id": "4063f524.742d9c",
        "type": "function",
        "z": "f7442446.0c97f8",
        "name": "or image5 (default)",
        "func": "const image5 = \"https://cryptocracy.io/assets/images/cryptocracy_clear.png\";\nmsg.payload = {image5};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2210,
        "y": 2240,
        "wires": [
            [
                "61361a6d.ebaa34"
            ]
        ]
    },
    {
        "id": "6e4b1773.ef7ee8",
        "type": "function",
        "z": "f7442446.0c97f8",
        "name": "get contract 6 url (testnet)",
        "func": "const nettype = \"stacks-node-api.testnet.stacks.co\"; // or use mainnet\nconst contract = global.get(\"ftcontractnames[6][0]\"); // or use ft1contract etc\nmsg.url = \"https://\" + nettype + \"/extended/v1/contract/\" + contract;// prior was /assets\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 2320,
        "wires": [
            [
                "445c798e.dc2918"
            ]
        ]
    },
    {
        "id": "f8a9fe02.d1481",
        "type": "http request",
        "z": "f7442446.0c97f8",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "persist": false,
        "authType": "",
        "x": 810,
        "y": 2320,
        "wires": [
            [
                "b1e8ce4e.62f01"
            ]
        ]
    },
    {
        "id": "b1e8ce4e.62f01",
        "type": "json",
        "z": "f7442446.0c97f8",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 950,
        "y": 2320,
        "wires": [
            [
                "9f47697d.2467e8"
            ]
        ]
    },
    {
        "id": "7538e879.7ec088",
        "type": "function",
        "z": "f7442446.0c97f8",
        "name": "token meta 6",
        "func": "const str = msg.payload.source_code;\nconst res = str.split(\"get-token-uri\");\nconst res2 = res[1].split(\"some u\\\"\");\nconst res3 = res2[1].split(\".json\");\n\nmsg.url = res3[0] + \".json\";\nmsg.payload = res3[0] + \".json\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 2280,
        "wires": [
            [
                "77ef1967.06cb28"
            ]
        ]
    },
    {
        "id": "77ef1967.06cb28",
        "type": "http request",
        "z": "f7442446.0c97f8",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "persist": false,
        "authType": "",
        "x": 1850,
        "y": 2280,
        "wires": [
            [
                "7fb4e8fb.467c38"
            ]
        ]
    },
    {
        "id": "7fb4e8fb.467c38",
        "type": "json",
        "z": "f7442446.0c97f8",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 2030,
        "y": 2280,
        "wires": [
            [
                "5e9246ae.34d3b8"
            ]
        ]
    },
    {
        "id": "5e9246ae.34d3b8",
        "type": "function",
        "z": "f7442446.0c97f8",
        "name": "set image6",
        "func": "const image6 = msg.payload.image;\nmsg.payload = {image6};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2190,
        "y": 2280,
        "wires": [
            [
                "61361a6d.ebaa34"
            ]
        ]
    },
    {
        "id": "9f47697d.2467e8",
        "type": "switch",
        "z": "f7442446.0c97f8",
        "name": "pass thru unless errored",
        "property": "payload.error",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            },
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1130,
        "y": 2320,
        "wires": [
            [
                "4de52a5.6f4c2d4"
            ],
            [
                "af10197.3dac0e8"
            ]
        ]
    },
    {
        "id": "af10197.3dac0e8",
        "type": "function",
        "z": "f7442446.0c97f8",
        "name": "or image6 (default)",
        "func": "const image6 = \"https://cryptocracy.io/assets/images/cryptocracy_clear.png\";\nmsg.payload = {image6};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2210,
        "y": 2360,
        "wires": [
            [
                "61361a6d.ebaa34"
            ]
        ]
    },
    {
        "id": "630d57ee.13de58",
        "type": "function",
        "z": "f7442446.0c97f8",
        "name": "get contract 7 url (testnet)",
        "func": "const nettype = \"stacks-node-api.testnet.stacks.co\"; // or use mainnet\nconst contract = global.get(\"ftcontractnames[7][0]\"); // or use ft1contract etc\nmsg.url = \"https://\" + nettype + \"/extended/v1/contract/\" + contract;// prior was /assets\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 2440,
        "wires": [
            [
                "b5570a77.3da428"
            ]
        ]
    },
    {
        "id": "4a5fd447.fd0ddc",
        "type": "http request",
        "z": "f7442446.0c97f8",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "persist": false,
        "authType": "",
        "x": 810,
        "y": 2440,
        "wires": [
            [
                "5a02aae7.467934"
            ]
        ]
    },
    {
        "id": "5a02aae7.467934",
        "type": "json",
        "z": "f7442446.0c97f8",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 950,
        "y": 2440,
        "wires": [
            [
                "b637af44.f5efd"
            ]
        ]
    },
    {
        "id": "5fa44ea0.92cbb",
        "type": "function",
        "z": "f7442446.0c97f8",
        "name": "token meta 7",
        "func": "const str = msg.payload.source_code;\nconst res = str.split(\"get-token-uri\");\nconst res2 = res[1].split(\"some u\\\"\");\nconst res3 = res2[1].split(\".json\");\n\nmsg.url = res3[0] + \".json\";\nmsg.payload = res3[0] + \".json\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 2400,
        "wires": [
            [
                "f30485ed.51c218"
            ]
        ]
    },
    {
        "id": "f30485ed.51c218",
        "type": "http request",
        "z": "f7442446.0c97f8",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "persist": false,
        "authType": "",
        "x": 1830,
        "y": 2400,
        "wires": [
            [
                "111a517c.647e6f"
            ]
        ]
    },
    {
        "id": "111a517c.647e6f",
        "type": "json",
        "z": "f7442446.0c97f8",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 2030,
        "y": 2400,
        "wires": [
            [
                "57be7cf.c508b84"
            ]
        ]
    },
    {
        "id": "57be7cf.c508b84",
        "type": "function",
        "z": "f7442446.0c97f8",
        "name": "set image7",
        "func": "const image7 = msg.payload.image;\nmsg.payload = {image7};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2190,
        "y": 2400,
        "wires": [
            [
                "61361a6d.ebaa34"
            ]
        ]
    },
    {
        "id": "b637af44.f5efd",
        "type": "switch",
        "z": "f7442446.0c97f8",
        "name": "pass thru unless errored",
        "property": "payload.error",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            },
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1130,
        "y": 2440,
        "wires": [
            [
                "b5c1fab6.2374c8"
            ],
            [
                "32303503.c617ca"
            ]
        ]
    },
    {
        "id": "32303503.c617ca",
        "type": "function",
        "z": "f7442446.0c97f8",
        "name": "or image7 (default)",
        "func": "const image7 = \"https://cryptocracy.io/assets/images/cryptocracy_clear.png\";\nmsg.payload = {image7};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2210,
        "y": 2480,
        "wires": [
            [
                "61361a6d.ebaa34"
            ]
        ]
    },
    {
        "id": "37febb68.bac794",
        "type": "function",
        "z": "f7442446.0c97f8",
        "name": "get contract 8 url (testnet)",
        "func": "const nettype = \"stacks-node-api.testnet.stacks.co\"; // or use mainnet\nconst contract = global.get(\"ftcontractnames[8][0]\"); // or use ft1contract etc\nmsg.url = \"https://\" + nettype + \"/extended/v1/contract/\" + contract;// prior was /assets\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 2560,
        "wires": [
            [
                "b415f6ad.f383c8"
            ]
        ]
    },
    {
        "id": "94ea7f22.b4fcd",
        "type": "http request",
        "z": "f7442446.0c97f8",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "persist": false,
        "authType": "",
        "x": 810,
        "y": 2560,
        "wires": [
            [
                "bca2f03f.b028b"
            ]
        ]
    },
    {
        "id": "bca2f03f.b028b",
        "type": "json",
        "z": "f7442446.0c97f8",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 950,
        "y": 2560,
        "wires": [
            [
                "e5b2b671.96d008"
            ]
        ]
    },
    {
        "id": "54b396fa.a16838",
        "type": "function",
        "z": "f7442446.0c97f8",
        "name": "token meta 8",
        "func": "const str = msg.payload.source_code;\nconst res = str.split(\"get-token-uri\");\nconst res2 = res[1].split(\"some u\\\"\");\nconst res3 = res2[1].split(\".json\");\n\nmsg.url = res3[0] + \".json\";\nmsg.payload = res3[0] + \".json\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 2520,
        "wires": [
            [
                "90f23ef2.35661"
            ]
        ]
    },
    {
        "id": "90f23ef2.35661",
        "type": "http request",
        "z": "f7442446.0c97f8",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "persist": false,
        "authType": "",
        "x": 1830,
        "y": 2520,
        "wires": [
            [
                "52b7af2e.9a129"
            ]
        ]
    },
    {
        "id": "52b7af2e.9a129",
        "type": "json",
        "z": "f7442446.0c97f8",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 2030,
        "y": 2520,
        "wires": [
            [
                "8fbb369c.6dd1a8"
            ]
        ]
    },
    {
        "id": "8fbb369c.6dd1a8",
        "type": "function",
        "z": "f7442446.0c97f8",
        "name": "set image8",
        "func": "const image8 = msg.payload.image;\nmsg.payload = {image8};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2190,
        "y": 2520,
        "wires": [
            [
                "61361a6d.ebaa34"
            ]
        ]
    },
    {
        "id": "e5b2b671.96d008",
        "type": "switch",
        "z": "f7442446.0c97f8",
        "name": "pass thru unless errored",
        "property": "payload.error",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            },
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1130,
        "y": 2560,
        "wires": [
            [
                "b47f691c.cd7ef8"
            ],
            [
                "89d1d1c8.26f65"
            ]
        ]
    },
    {
        "id": "89d1d1c8.26f65",
        "type": "function",
        "z": "f7442446.0c97f8",
        "name": "or image8 (default)",
        "func": "const image8 = \"https://cryptocracy.io/assets/images/cryptocracy_clear.png\";\nmsg.payload = {image8};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2210,
        "y": 2580,
        "wires": [
            [
                "61361a6d.ebaa34"
            ]
        ]
    },
    {
        "id": "b9b227ab.e939e8",
        "type": "function",
        "z": "f7442446.0c97f8",
        "name": "get contract 9 url (testnet)",
        "func": "const nettype = \"stacks-node-api.testnet.stacks.co\"; // or use mainnet\nconst contract = global.get(\"ftcontractnames[9][0]\"); // or use ft1contract etc\nmsg.url = \"https://\" + nettype + \"/extended/v1/contract/\" + contract;// prior was /assets\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 2680,
        "wires": [
            [
                "4b06dd42.f51734"
            ]
        ]
    },
    {
        "id": "d35647b.9fdeab8",
        "type": "http request",
        "z": "f7442446.0c97f8",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "persist": false,
        "authType": "",
        "x": 810,
        "y": 2680,
        "wires": [
            [
                "1ccad6b.959d429"
            ]
        ]
    },
    {
        "id": "1ccad6b.959d429",
        "type": "json",
        "z": "f7442446.0c97f8",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 950,
        "y": 2680,
        "wires": [
            [
                "654fa05e.5d9e9"
            ]
        ]
    },
    {
        "id": "80e53f18.b8fba",
        "type": "function",
        "z": "f7442446.0c97f8",
        "name": "token meta 9",
        "func": "const str = msg.payload.source_code;\nconst res = str.split(\"get-token-uri\");\nconst res2 = res[1].split(\"some u\\\"\");\nconst res3 = res2[1].split(\".json\");\n\nmsg.url = res3[0] + \".json\";\nmsg.payload = res3[0] + \".json\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 2640,
        "wires": [
            [
                "e56bd4c.37aa328"
            ]
        ]
    },
    {
        "id": "e56bd4c.37aa328",
        "type": "http request",
        "z": "f7442446.0c97f8",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "persist": false,
        "authType": "",
        "x": 1830,
        "y": 2640,
        "wires": [
            [
                "9915242f.8e9b98"
            ]
        ]
    },
    {
        "id": "9915242f.8e9b98",
        "type": "json",
        "z": "f7442446.0c97f8",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 2030,
        "y": 2640,
        "wires": [
            [
                "d2bbd68c.1d4cf8"
            ]
        ]
    },
    {
        "id": "d2bbd68c.1d4cf8",
        "type": "function",
        "z": "f7442446.0c97f8",
        "name": "set image9",
        "func": "const image9 = msg.payload.image;\nmsg.payload = {image9};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2190,
        "y": 2640,
        "wires": [
            [
                "61361a6d.ebaa34"
            ]
        ]
    },
    {
        "id": "654fa05e.5d9e9",
        "type": "switch",
        "z": "f7442446.0c97f8",
        "name": "pass thru unless errored",
        "property": "payload.error",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            },
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1130,
        "y": 2680,
        "wires": [
            [
                "1274a026.8ee01"
            ],
            [
                "3f17a712.87fc98"
            ]
        ]
    },
    {
        "id": "3f17a712.87fc98",
        "type": "function",
        "z": "f7442446.0c97f8",
        "name": "or image9 (default)",
        "func": "const image9 = \"https://cryptocracy.io/assets/images/cryptocracy_clear.png\";\nmsg.payload = {image9};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2210,
        "y": 2720,
        "wires": [
            [
                "61361a6d.ebaa34"
            ]
        ]
    },
    {
        "id": "30825d45.75b282",
        "type": "debug",
        "z": "f7442446.0c97f8",
        "name": "join images debugger",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3300,
        "y": 1580,
        "wires": []
    },
    {
        "id": "46ecd87f.4f44b8",
        "type": "inject",
        "z": "f7442446.0c97f8",
        "name": "get images",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 1320,
        "y": 860,
        "wires": [
            [
                "265f6e52.b3b642"
            ]
        ]
    },
    {
        "id": "93bdcff4.29b0c",
        "type": "switch",
        "z": "f7442446.0c97f8",
        "name": "error if undefined",
        "property": "url",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            },
            {
                "t": "cont",
                "v": "/contract/undefined",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 590,
        "y": 1640,
        "wires": [
            [
                "e8c4dd6d.c35da"
            ],
            [
                "ad0c52b9.07955",
                "1a60cd26.d74763"
            ]
        ]
    },
    {
        "id": "ec431e72.dc554",
        "type": "debug",
        "z": "f7442446.0c97f8",
        "d": true,
        "name": "balance debugger",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1710,
        "y": 740,
        "wires": []
    },
    {
        "id": "ceaef61c.5ceab8",
        "type": "switch",
        "z": "f7442446.0c97f8",
        "name": "error if undefined",
        "property": "url",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            },
            {
                "t": "cont",
                "v": "/contract/undefined",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 590,
        "y": 1760,
        "wires": [
            [
                "33301f96.99394"
            ],
            [
                "8ee0d8a0.bb9c78",
                "d1516889.068bc8"
            ]
        ]
    },
    {
        "id": "1ce38732.df7f69",
        "type": "switch",
        "z": "f7442446.0c97f8",
        "name": "error if undefined",
        "property": "url",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            },
            {
                "t": "cont",
                "v": "/contract/undefined",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 590,
        "y": 1880,
        "wires": [
            [
                "31d060a7.7758b"
            ],
            [
                "be8368f5.8612d8"
            ]
        ]
    },
    {
        "id": "f1068bdf.868c28",
        "type": "switch",
        "z": "f7442446.0c97f8",
        "name": "error if undefined",
        "property": "url",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            },
            {
                "t": "cont",
                "v": "/contract/undefined",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 590,
        "y": 2000,
        "wires": [
            [
                "74b018a.a9fd5e8"
            ],
            [
                "b5a46201.258c4"
            ]
        ]
    },
    {
        "id": "31d44d99.a947d2",
        "type": "switch",
        "z": "f7442446.0c97f8",
        "name": "error if undefined",
        "property": "url",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            },
            {
                "t": "cont",
                "v": "/contract/undefined",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 590,
        "y": 2100,
        "wires": [
            [
                "2a473c70.8999e4"
            ],
            [
                "307f543a.8222ac"
            ]
        ]
    },
    {
        "id": "493e33b7.e9649c",
        "type": "switch",
        "z": "f7442446.0c97f8",
        "name": "error if undefined",
        "property": "url",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            },
            {
                "t": "cont",
                "v": "/contract/undefined",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 590,
        "y": 2240,
        "wires": [
            [
                "33ddc782.741778"
            ],
            [
                "4063f524.742d9c"
            ]
        ]
    },
    {
        "id": "445c798e.dc2918",
        "type": "switch",
        "z": "f7442446.0c97f8",
        "name": "error if undefined",
        "property": "url",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            },
            {
                "t": "cont",
                "v": "/contract/undefined",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 590,
        "y": 2360,
        "wires": [
            [
                "f8a9fe02.d1481"
            ],
            [
                "af10197.3dac0e8"
            ]
        ]
    },
    {
        "id": "b5570a77.3da428",
        "type": "switch",
        "z": "f7442446.0c97f8",
        "name": "error if undefined",
        "property": "url",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            },
            {
                "t": "cont",
                "v": "/contract/undefined",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 590,
        "y": 2480,
        "wires": [
            [
                "4a5fd447.fd0ddc"
            ],
            [
                "32303503.c617ca"
            ]
        ]
    },
    {
        "id": "b415f6ad.f383c8",
        "type": "switch",
        "z": "f7442446.0c97f8",
        "name": "error if undefined",
        "property": "url",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            },
            {
                "t": "cont",
                "v": "/contract/undefined",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 590,
        "y": 2600,
        "wires": [
            [
                "94ea7f22.b4fcd"
            ],
            [
                "89d1d1c8.26f65"
            ]
        ]
    },
    {
        "id": "4b06dd42.f51734",
        "type": "switch",
        "z": "f7442446.0c97f8",
        "name": "error if undefined",
        "property": "url",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            },
            {
                "t": "cont",
                "v": "/contract/undefined",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 590,
        "y": 2720,
        "wires": [
            [
                "d35647b.9fdeab8"
            ],
            [
                "3f17a712.87fc98"
            ]
        ]
    },
    {
        "id": "37a2f1db.c0530e",
        "type": "debug",
        "z": "de33bfc8.0ee0f",
        "name": "fail debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 300,
        "wires": []
    },
    {
        "id": "74d18929.496f68",
        "type": "comment",
        "z": "53028f3b.590b5",
        "name": "To Do >>",
        "info": "",
        "x": 140,
        "y": 2680,
        "wires": []
    },
    {
        "id": "dd7d7181.20503",
        "type": "ui_form",
        "z": "354f3ac2.1ff636",
        "name": "Send Fungible Token Form",
        "label": "",
        "group": "93894c51.e61b",
        "order": 4,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Destination",
                "value": "ftdestination",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Amount",
                "value": "ftamount",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Memo",
                "value": "ftmemo",
                "type": "text",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "ftdestination": "",
            "ftamount": "",
            "ftmemo": ""
        },
        "payload": "",
        "submit": "Send",
        "cancel": "Clear",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "x": 920,
        "y": 140,
        "wires": [
            [
                "fa279be1.263c98"
            ]
        ]
    },
    {
        "id": "c2421421.6d6648",
        "type": "comment",
        "z": "354f3ac2.1ff636",
        "name": "Relative to Send Fungible Tokens",
        "info": "String in the format `{principaladdress}.{contractName}::{assetName}`",
        "x": 250,
        "y": 100,
        "wires": []
    },
    {
        "id": "f52099d4.4ac718",
        "type": "ui_template",
        "z": "354f3ac2.1ff636",
        "group": "93894c51.e61b",
        "name": "Contract ID",
        "order": 3,
        "width": "13",
        "height": "1",
        "format": "<small>Contract ID: {{msg.contractid}}</small>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 870,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "e2b1a75c.aaca48",
        "type": "ui_ui_control",
        "z": "f7442446.0c97f8",
        "name": "ui change",
        "events": "change",
        "x": 3460,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "c6824f85.d802",
        "type": "function",
        "z": "f7442446.0c97f8",
        "name": "pass to FungibleTokens Tab",
        "func": "const contractid = msg.payload;\n\n\nmsg.contractid = contractid;\nmsg.payload = {\"tab\":\"FungibleTokens\"};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3240,
        "y": 1080,
        "wires": [
            [
                "e2b1a75c.aaca48",
                "42d2dffd.c86f6"
            ]
        ]
    },
    {
        "id": "3dc05ac5.d24776",
        "type": "debug",
        "z": "f7442446.0c97f8",
        "d": true,
        "name": "Token Transfer Debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2920,
        "y": 1000,
        "wires": []
    },
    {
        "id": "21191574.322f4a",
        "type": "switch",
        "z": "f7442446.0c97f8",
        "name": "route per topic",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "transfer",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "history",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 2940,
        "y": 1080,
        "wires": [
            [
                "c6824f85.d802"
            ],
            [],
            []
        ]
    },
    {
        "id": "42d2dffd.c86f6",
        "type": "link out",
        "z": "f7442446.0c97f8",
        "name": "pass to FungibleTokens Send",
        "links": [
            "3d193dfe.477ca2"
        ],
        "x": 3435,
        "y": 1080,
        "wires": []
    },
    {
        "id": "3d193dfe.477ca2",
        "type": "link in",
        "z": "354f3ac2.1ff636",
        "name": "get from My Tokens Transfer Button",
        "links": [
            "42d2dffd.c86f6"
        ],
        "x": 135,
        "y": 180,
        "wires": [
            [
                "f52099d4.4ac718",
                "c35cef52.20fb7",
                "4c0e306f.7a523"
            ]
        ]
    },
    {
        "id": "54ce071a.5107a8",
        "type": "function",
        "z": "354f3ac2.1ff636",
        "name": "token uri json",
        "func": "const str = msg.payload.source_code;\nconst res = str.split(\"get-token-uri\");\nconst res2 = res[1].split(\"some u\\\"\");\nconst res3 = res2[1].split(\".json\");\n\nmsg.url = res3[0] + \".json\";\nmsg.payload = res3[0] + \".json\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 260,
        "wires": [
            [
                "3ce0e55.0ba2f1a"
            ]
        ]
    },
    {
        "id": "2f3e9dc4.9bbfe2",
        "type": "function",
        "z": "354f3ac2.1ff636",
        "name": "get contract (mainnet)",
        "func": "const nettype = \"stacks-node-api.mainnet.stacks.co\"; // or use testnet\nconst contract = msg.contractid;//\n\nmsg.url = \"https://\" + nettype + \"/extended/v1/contract/\" + contract;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "2aa51c54.0fba34",
        "type": "http request",
        "z": "354f3ac2.1ff636",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 510,
        "y": 220,
        "wires": [
            [
                "f4c95423.f57588"
            ]
        ]
    },
    {
        "id": "f4c95423.f57588",
        "type": "json",
        "z": "354f3ac2.1ff636",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 670,
        "y": 220,
        "wires": [
            [
                "54ce071a.5107a8",
                "d686bf14.520f5"
            ]
        ]
    },
    {
        "id": "1a54b8d8.b10777",
        "type": "debug",
        "z": "354f3ac2.1ff636",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1670,
        "y": 100,
        "wires": []
    },
    {
        "id": "3ce0e55.0ba2f1a",
        "type": "http request",
        "z": "354f3ac2.1ff636",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "persist": false,
        "authType": "",
        "x": 1030,
        "y": 260,
        "wires": [
            [
                "69479a11.52ffe4"
            ]
        ]
    },
    {
        "id": "69479a11.52ffe4",
        "type": "json",
        "z": "354f3ac2.1ff636",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1170,
        "y": 260,
        "wires": [
            [
                "6e4d847b.3fe2cc"
            ]
        ]
    },
    {
        "id": "6e4d847b.3fe2cc",
        "type": "ui_template",
        "z": "354f3ac2.1ff636",
        "group": "93894c51.e61b",
        "name": "Token Meta",
        "order": 2,
        "width": "13",
        "height": "4",
        "format": "<h3>Send Fungible Tokens</h3>\n<div align=\"center\"><img src=\"{{msg.payload.image}}\" width=\"96\" height=\"96\">\n</div>\n<h4>{{msg.payload.name}}</h4>\n<p>{{msg.payload.description}}</p>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 2250,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "32ccff.f8ff1302",
        "type": "ui_template",
        "z": "42c07592.8d970c",
        "group": "be1bffc8.e254c",
        "name": "Results by Name (Found) Avatar",
        "order": 1,
        "width": "6",
        "height": "6",
        "format": "<div style=\"position: relative; width: 284px; height: 284px;\" align=\"center\">\n<img src=\"https://raw.githubusercontent.com/cryptocracy/deruptars/main/bg/{{msg.bg}}_bg.png\" alt=\"\" style=\"position: absolute; top: 0; left: 0;\">\n<img src=\"https://raw.githubusercontent.com/cryptocracy/deruptars/main/skin/{{msg.skin}}_skin.png\" alt=\"\" style=\"position: absolute; top: 0; left: 0;\">\n<img src=\"https://raw.githubusercontent.com/cryptocracy/deruptars/main/eyes/{{msg.eyes}}_eyes.png\" alt=\"\" style=\"position: absolute; top: 0; left: 0;\">\n<img src=\"https://raw.githubusercontent.com/cryptocracy/deruptars/main/teeth/{{msg.teeth}}_teeth.png\" alt=\"\" style=\"position: absolute; top: 0; left: 0;\">\n<img src=\"https://raw.githubusercontent.com/cryptocracy/deruptars/main/lips/{{msg.lips}}_lips.png\" alt=\"\" style=\"position: absolute; top: 0; left: 0;\">\n<img src=\"https://raw.githubusercontent.com/cryptocracy/deruptars/main/hair/{{msg.hair}}_hair.png\" alt=\"\" style=\"position: absolute; top: 0; left: 0;\">\n<img src=\"https://raw.githubusercontent.com/cryptocracy/deruptars/main/hat/{{msg.hat}}_hat.png\" alt=\"\" style=\"position: absolute; top: 0; left: 0;\">\n<img src=\"https://raw.githubusercontent.com/cryptocracy/deruptars/main/chest/{{msg.chest}}_chest.png\" alt=\"\" style=\"position: absolute; top: 0; left: 0;\">\n</div>\n\n\n\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 1670,
        "y": 2800,
        "wires": [
            []
        ]
    },
    {
        "id": "140f3230.5c18ae",
        "type": "debug",
        "z": "613e85c9.c6210c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 3270,
        "y": 1480,
        "wires": []
    },
    {
        "id": "c89ec016.dea9a",
        "type": "file in",
        "z": "613e85c9.c6210c",
        "name": "Get Local Clarity Contract",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 3670,
        "y": 1520,
        "wires": [
            [
                "6830e8ef.6ff088"
            ]
        ]
    },
    {
        "id": "6830e8ef.6ff088",
        "type": "switch",
        "z": "613e85c9.c6210c",
        "name": "if stxprivkey is empty error",
        "property": "stxprivkey",
        "propertyType": "global",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 3950,
        "y": 1520,
        "wires": [
            [
                "1ba46fb1.2d646",
                "41ca1f9a.a55ae"
            ],
            [
                "9a5dfc76.4cab8"
            ]
        ]
    },
    {
        "id": "9a5dfc76.4cab8",
        "type": "ui_toast",
        "z": "613e85c9.c6210c",
        "position": "top left",
        "displayTime": "3",
        "highlight": "red",
        "sendall": true,
        "outputs": 0,
        "ok": "Mainnet",
        "cancel": "Testnet",
        "raw": false,
        "topic": "Error",
        "name": "Missing: stxprivkey",
        "x": 3970,
        "y": 1560,
        "wires": []
    },
    {
        "id": "aef264b9.8f1ff8",
        "type": "delay",
        "z": "613e85c9.c6210c",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 3460,
        "y": 1520,
        "wires": [
            [
                "c89ec016.dea9a"
            ]
        ]
    },
    {
        "id": "4cd59253.d496fc",
        "type": "ui_template",
        "z": "613e85c9.c6210c",
        "group": "7e7643fd.e4b96c",
        "name": "TX Info (mainnet)",
        "order": 5,
        "width": 0,
        "height": 0,
        "format": "<a href=\"https://explorer.stacks.co/txid/{{msg.blockchain}}?chain=mainnet\" target=\"_blank\">{{msg.blockchain}}</a>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 1850,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "8f55186f.617848",
        "type": "switch",
        "z": "613e85c9.c6210c",
        "name": "nettype switch",
        "property": "nettype",
        "propertyType": "global",
        "rules": [
            {
                "t": "cont",
                "v": "testnet",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "mainnet",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 4240,
        "y": 1580,
        "wires": [
            [],
            [
                "ca9d3abd.0d70f8"
            ],
            [
                "47a4f12d.f3f42"
            ]
        ]
    },
    {
        "id": "1ba46fb1.2d646",
        "type": "function",
        "z": "613e85c9.c6210c",
        "name": "deploy nft-trait to network (testnet)",
        "func": "const nftname = \"nft-trait\";\n\nconst claritybody = msg.payload; //gathered from the contents of the clarity contract via prior node\n\nconst senderKey = global.get('stxprivkey');\n\n// for testnet, use `StacksTestnet()`\nconst network = new stacksNetwork.StacksTestnet();\n\nconst txOptions = {\n  contractName: nftname,\n  codeBody: claritybody,\n  senderKey,\n  network,\n};\n\n\nconst transaction = await stacksTransactions.makeContractDeploy(txOptions);\n\nconst broadcastTxn = await stacksTransactions.broadcastTransaction(transaction, network);\n\nmsg.payload = transaction;\n\nmsg.blockchain = \"0x\" + broadcastTxn;\nmsg.txoptions = txOptions;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "BigNum",
                "module": "bn.js"
            },
            {
                "var": "stacksNetwork",
                "module": "@stacks/network"
            },
            {
                "var": "stacksTransactions",
                "module": "@stacks/transactions"
            }
        ],
        "x": 4540,
        "y": 1500,
        "wires": [
            [
                "d10341b1.5e999",
                "82a2dcd7.0af3c"
            ]
        ]
    },
    {
        "id": "ca9d3abd.0d70f8",
        "type": "function",
        "z": "613e85c9.c6210c",
        "name": "deploy nft-trait to network (mainnet)",
        "func": "const nftname = \"nft-trait\";\n\nconst claritybody = msg.payload; //gathered from the contents of the clarity contract via prior node\n\nconst senderKey = global.get('stxprivkey');\n\n// for testnet, use `StacksTestnet()`\nconst network = new stacksNetwork.StacksMainnet();\n\nconst txOptions = {\n  contractName: nftname,\n  codeBody: claritybody,\n  senderKey,\n  network,\n};\n\n\nconst transaction = await stacksTransactions.makeContractDeploy(txOptions);\n\nconst broadcastTxn = await stacksTransactions.broadcastTransaction(transaction, network);\n\nmsg.payload = transaction;\n\nmsg.blockchain = \"0x\" + broadcastTxn;\nmsg.txoptions = txOptions;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "BigNum",
                "module": "bn.js"
            },
            {
                "var": "stacksNetwork",
                "module": "@stacks/network"
            },
            {
                "var": "stacksTransactions",
                "module": "@stacks/transactions"
            }
        ],
        "x": 4540,
        "y": 1580,
        "wires": [
            [
                "485e949d.18937c"
            ]
        ]
    },
    {
        "id": "47a4f12d.f3f42",
        "type": "ui_toast",
        "z": "613e85c9.c6210c",
        "position": "top left",
        "displayTime": "3",
        "highlight": "red",
        "sendall": true,
        "outputs": 0,
        "ok": "Mainnet",
        "cancel": "Testnet",
        "raw": false,
        "topic": "Error",
        "name": "Missing: nettype",
        "x": 4480,
        "y": 1620,
        "wires": []
    },
    {
        "id": "41ca1f9a.a55ae",
        "type": "ui_toast",
        "z": "613e85c9.c6210c",
        "position": "top right",
        "displayTime": "3",
        "highlight": "green",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "Almost There...",
        "name": "Attempting to Create and Deploy Interface.",
        "x": 4570,
        "y": 1460,
        "wires": []
    },
    {
        "id": "485e949d.18937c",
        "type": "debug",
        "z": "613e85c9.c6210c",
        "name": "debug mainnet trait",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4820,
        "y": 1580,
        "wires": []
    },
    {
        "id": "d10341b1.5e999",
        "type": "debug",
        "z": "613e85c9.c6210c",
        "name": "debug testnet trait",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4880,
        "y": 1500,
        "wires": []
    },
    {
        "id": "12e0a8e6.69a7a7",
        "type": "ui_template",
        "z": "613e85c9.c6210c",
        "group": "91c07e82.a5ad1",
        "name": "TX Info (testnet)",
        "order": 3,
        "width": 0,
        "height": 0,
        "format": "<a href=\"https://explorer.stacks.co/txid/{{msg.blockchain}}?chain=testnet\" target=\"_blank\">{{msg.blockchain}}</a>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 1820,
        "y": 1220,
        "wires": [
            []
        ]
    },
    {
        "id": "f4d0ce35.ce184",
        "type": "ui_template",
        "z": "613e85c9.c6210c",
        "group": "91c07e82.a5ad1",
        "name": "TX Info (mainnet)",
        "order": 4,
        "width": 0,
        "height": 0,
        "format": "<a href=\"https://explorer.stacks.co/txid/{{msg.blockchain}}?chain=mainnet\" target=\"_blank\">{{msg.blockchain}}</a>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 1830,
        "y": 1400,
        "wires": [
            []
        ]
    },
    {
        "id": "dc7aeb7a.41c8d8",
        "type": "function",
        "z": "613e85c9.c6210c",
        "name": "setup clarity nft contract file (TESTNET)",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 1260,
        "wires": [
            [
                "cb1012de.505c1"
            ]
        ]
    },
    {
        "id": "269f01d.fc031fe",
        "type": "function",
        "z": "613e85c9.c6210c",
        "name": "setup clarity nft contract file (Mainnet)",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1220,
        "wires": [
            []
        ]
    },
    {
        "id": "cb1012de.505c1",
        "type": "file",
        "z": "613e85c9.c6210c",
        "name": "create local .clar",
        "filename": "",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "ascii",
        "x": 760,
        "y": 1260,
        "wires": [
            [
                "f683ed5e.7a351",
                "92ab9000.0caf1"
            ]
        ]
    },
    {
        "id": "92ab9000.0caf1",
        "type": "delay",
        "z": "613e85c9.c6210c",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 980,
        "y": 1260,
        "wires": [
            [
                "129bfeee.54c0c1"
            ]
        ]
    },
    {
        "id": "f683ed5e.7a351",
        "type": "debug",
        "z": "613e85c9.c6210c",
        "name": "debug contract write",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 1220,
        "wires": []
    },
    {
        "id": "129bfeee.54c0c1",
        "type": "file in",
        "z": "613e85c9.c6210c",
        "name": "Get Local Clarity Contract",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 1210,
        "y": 1260,
        "wires": [
            [
                "988740f2.dcd"
            ]
        ]
    },
    {
        "id": "988740f2.dcd",
        "type": "function",
        "z": "613e85c9.c6210c",
        "name": "deploy nft-mint to network (testnet)",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 1260,
        "wires": [
            [
                "98b6dd2b.bb668",
                "12e0a8e6.69a7a7"
            ]
        ]
    },
    {
        "id": "1298ff7b.9bca51",
        "type": "function",
        "z": "613e85c9.c6210c",
        "name": "deploy nft-mint to network (mainnet)",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 1360,
        "wires": [
            [
                "f4d0ce35.ce184",
                "cc65e099.1d8df"
            ]
        ]
    },
    {
        "id": "41686cf5.bf7394",
        "type": "switch",
        "z": "613e85c9.c6210c",
        "name": "nettype switch",
        "property": "nettype",
        "propertyType": "global",
        "rules": [
            {
                "t": "cont",
                "v": "testnet",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "mainnet",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 1240,
        "y": 1360,
        "wires": [
            [
                "1298ff7b.9bca51"
            ],
            [],
            [
                "c17935ba.43e018"
            ]
        ]
    },
    {
        "id": "c17935ba.43e018",
        "type": "ui_toast",
        "z": "613e85c9.c6210c",
        "position": "top left",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "Mainnet",
        "cancel": "Testnet",
        "raw": false,
        "topic": "Missing: nettype",
        "name": "Net Type Not Set",
        "x": 1470,
        "y": 1420,
        "wires": []
    },
    {
        "id": "cc65e099.1d8df",
        "type": "debug",
        "z": "613e85c9.c6210c",
        "name": "debug mainnet mint nft form",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1870,
        "y": 1360,
        "wires": []
    },
    {
        "id": "98b6dd2b.bb668",
        "type": "debug",
        "z": "613e85c9.c6210c",
        "name": "debug testnet mint nft form",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1860,
        "y": 1260,
        "wires": []
    },
    {
        "id": "5f87b0d3.057bc",
        "type": "comment",
        "z": "613e85c9.c6210c",
        "name": "NEEDS WRITTEN STILL",
        "info": "",
        "x": 1490,
        "y": 1220,
        "wires": []
    },
    {
        "id": "2dd12a2e.df7c36",
        "type": "comment",
        "z": "613e85c9.c6210c",
        "name": "NEEDS WRITTEN STILL (Imp ref inside this)",
        "info": "(impl-trait 'SP2PABAF9FTAJYNFZH93XENAJ8FVY99RRM50D2JG9.nft-trait.nft-trait)",
        "x": 470,
        "y": 1180,
        "wires": []
    },
    {
        "id": "76afe9bf.d0a898",
        "type": "debug",
        "z": "613e85c9.c6210c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "url",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3300,
        "y": 1820,
        "wires": []
    },
    {
        "id": "fdb02834.ff6838",
        "type": "json",
        "z": "613e85c9.c6210c",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 3610,
        "y": 1780,
        "wires": [
            [
                "4df1ef8e.8ee57",
                "9676473a.e1d848"
            ]
        ]
    },
    {
        "id": "4df1ef8e.8ee57",
        "type": "switch",
        "z": "613e85c9.c6210c",
        "name": "switch 2",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "istype",
                "v": "object",
                "vt": "object"
            },
            {
                "t": "istype",
                "v": "string",
                "vt": "string"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 3780,
        "y": 1780,
        "wires": [
            [
                "1ebd675e.db3439"
            ],
            [
                "15f7028e.6150ed"
            ]
        ]
    },
    {
        "id": "1ebd675e.db3439",
        "type": "change",
        "z": "613e85c9.c6210c",
        "name": "enable form",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Interface Contract Detected, Proceed to Minting",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3970,
        "y": 1760,
        "wires": [
            [
                "403d616b.ff861"
            ]
        ]
    },
    {
        "id": "15f7028e.6150ed",
        "type": "change",
        "z": "613e85c9.c6210c",
        "name": "disable form ",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Please Wait for Interface Confirmation",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3970,
        "y": 1800,
        "wires": [
            [
                "24415682.cae87a"
            ]
        ]
    },
    {
        "id": "9676473a.e1d848",
        "type": "debug",
        "z": "613e85c9.c6210c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 3770,
        "y": 1740,
        "wires": []
    },
    {
        "id": "c0339c87.a4fe",
        "type": "function",
        "z": "613e85c9.c6210c",
        "name": "url to call to check if nft-trait exists (testnet)",
        "func": "const nettype = \"stacks-node-api.testnet.stacks.co\"; // or use testnet\nconst testnetdepositaddress = global.get(\"testnetdepositaddress\");\nconst nftname = \"nft-trait\";//global.get(\"xnftname\");\n/// get with global xnftname or with \"nft-trait\"\n\nmsg.url = \"https://\" + nettype + \"/v2/contracts/interface/\" + testnetdepositaddress + \"/\" + nftname;\n\nmsg.stx = testnetdepositaddress; \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3010,
        "y": 1780,
        "wires": [
            [
                "76afe9bf.d0a898",
                "87667ca4.49726"
            ]
        ]
    },
    {
        "id": "fb19d75a.bd3608",
        "type": "function",
        "z": "613e85c9.c6210c",
        "name": "url to call to check if nft-trait exists (mainnet)",
        "func": "const nettype = \"stacks-node-api.mainnet.stacks.co\"; // or use testnet\nconst depositaddress = global.get(\"depositaddress\");\nconst nftname = \"nft-trait\";//global.get(\"xnftname\");\n/// get with global xnftname or with \"nft-trait\"\n\nmsg.url = \"https://\" + nettype + \"/v2/contracts/interface/\" + depositaddress + \"/\" + nftname;\nmsg.stx = depositaddress; \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3010,
        "y": 1740,
        "wires": [
            []
        ]
    },
    {
        "id": "238dce32.2ba2b2",
        "type": "function",
        "z": "613e85c9.c6210c",
        "name": "show Mint NFT Form",
        "func": "msg.payload = {\n  \"group\": {\n    \"hide\": [\n      \"Minting_MintNav\",\n      \"Minting_MintNFT\",\n      \"Minting_MintNFT_Trait\",\n      \"Minting_MintFT_Form\",\n      \"Minting_MintFT_Trait\"\n    ],\n    \"show\": [\n      \"Minting_MintNFT_Form\"\n    ],\n    \"focus\": true\n  }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4440,
        "y": 1760,
        "wires": [
            [
                "d1296b43.1d1f48"
            ]
        ]
    },
    {
        "id": "53d3b917.3bc4b8",
        "type": "function",
        "z": "613e85c9.c6210c",
        "name": "show Mint NFT Trait",
        "func": "msg.payload = {\n  \"group\": {\n    \"hide\": [\n      \"Minting_MintNav\",\n      \"Minting_MintNFT\",\n      \"Minting_MintFT_Trait\",\n      \"Minting_MintNFT_Form\",\n      \"Minting_MintFT_Form\"\n    ],\n    \"show\": [\n      \"Minting_MintNFT_Trait\"\n    ],\n    \"focus\": true\n  }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4440,
        "y": 1840,
        "wires": [
            [
                "248b914d.bd790e"
            ]
        ]
    },
    {
        "id": "d1296b43.1d1f48",
        "type": "ui_ui_control",
        "z": "613e85c9.c6210c",
        "name": "",
        "events": "all",
        "x": 4620,
        "y": 1760,
        "wires": [
            []
        ]
    },
    {
        "id": "248b914d.bd790e",
        "type": "ui_ui_control",
        "z": "613e85c9.c6210c",
        "name": "",
        "events": "all",
        "x": 4620,
        "y": 1840,
        "wires": [
            []
        ]
    },
    {
        "id": "403d616b.ff861",
        "type": "ui_toast",
        "z": "613e85c9.c6210c",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 4230,
        "y": 1760,
        "wires": [
            [
                "238dce32.2ba2b2"
            ]
        ]
    },
    {
        "id": "24415682.cae87a",
        "type": "ui_toast",
        "z": "613e85c9.c6210c",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 4230,
        "y": 1840,
        "wires": [
            [
                "53d3b917.3bc4b8"
            ]
        ]
    },
    {
        "id": "f2cf2d2d.7382b",
        "type": "ui_button",
        "z": "613e85c9.c6210c",
        "name": "",
        "group": "de35938.a16f97",
        "order": 4,
        "width": "6",
        "height": "1",
        "passthru": false,
        "label": "Check for NFT Trait Contract (testnet)",
        "tooltip": "Manually check to see if your NFT Trait Contract exists and is confirmed.",
        "color": "",
        "bgcolor": "",
        "icon": "fa-refresh",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 2670,
        "y": 1780,
        "wires": [
            [
                "c0339c87.a4fe"
            ]
        ]
    },
    {
        "id": "87667ca4.49726",
        "type": "http request",
        "z": "613e85c9.c6210c",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 3310,
        "y": 1780,
        "wires": [
            [
                "3b0f7e9e.111c42",
                "da8b7a.66d46488"
            ]
        ]
    },
    {
        "id": "3b0f7e9e.111c42",
        "type": "debug",
        "z": "613e85c9.c6210c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 3530,
        "y": 1740,
        "wires": []
    },
    {
        "id": "da8b7a.66d46488",
        "type": "switch",
        "z": "613e85c9.c6210c",
        "name": "switch 1",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            },
            {
                "t": "eq",
                "v": "No contract interface data found",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 3480,
        "y": 1840,
        "wires": [
            [
                "fdb02834.ff6838"
            ],
            [
                "24415682.cae87a"
            ]
        ]
    },
    {
        "id": "9d9f09c0.f80998",
        "type": "file",
        "z": "613e85c9.c6210c",
        "name": "create local .clar",
        "filename": "",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "ascii",
        "x": 3280,
        "y": 1520,
        "wires": [
            [
                "aef264b9.8f1ff8"
            ]
        ]
    },
    {
        "id": "ab7c01a5.083eb",
        "type": "function",
        "z": "354f3ac2.1ff636",
        "name": "call ft-transfer to network (mainnet) (BETA VERSION)",
        "func": "//reference https://www.npmjs.com/package/@stacks/transactions\n\n//Network\nconst network = new stacksNetwork.StacksMainnet(); // or for testnet, use `StacksTestnet()`\n\n//Contract Asset Info\nconst tempcontractid = global.get('tempcontractid'); //get the temporarily contract id\nconst ftname = tempcontractid.split(\".\")[1]; //remove everything prior and including \".\"\nconst ftaddress = tempcontractid.split(\".\")[0]; //remove everything after and including \".\"\nconst ftinfo = stacksTransactions.createAssetInfo(ftaddress, ftname, ftname); //set AssetInfo for type property\n\n//Sender\nconst senderkey = global.get('stxprivkey'); //get private key\nconst ftsender = global.get('depositaddress'); //or use depositaddress for mainnet\n\n//Amount, Destination, and Memo\nconst ftamount = msg.payload.ftamount; //pass in amount to send\nconst ftdestination = msg.payload.ftdestination; //pass in destination address\nconst ftmemo = msg.payload.ftmemo;//pass in the memo\n\n//Post Conditions for safety\nconst postConditionAddress = ftsender;\nconst postConditionCode = stacksTransactions.FungibleConditionCode.Equal;\nconst postConditionAmount = new BigNum(ftamount); //requires BigNum\nconst postConditionAssetInfo = ftinfo;//Problem like something to do with thi postConditionAssetInfo\n\nconst postConditions = [\n  stacksTransactions.makeStandardFungiblePostCondition(postConditionAddress, postConditionCode, postConditionAmount, postConditionAssetInfo),\n];\n\n//Transaction Options -the memo still needs encoded correctly\nconst txOptions = {\n  contractAddress: ftaddress,\n  contractName: ftname,\n  functionName: 'transfer',\n  functionArgs: [\n      stacksTransactions.uintCV(ftamount),\n      stacksTransactions.standardPrincipalCV(ftsender),\n      stacksTransactions.standardPrincipalCV(ftdestination),\n      stacksTransactions.someCV(stacksTransactions.bufferCVFromString(ftmemo))\n      ],\n  senderKey: senderkey,\n  validateWithAbi: true,\n  network,\n  postConditions,\n  anchorMode: stacksTransactions.AnchorMode.Any,\n};\n\n//Transaction Broadcast to Network\nconst transaction = await stacksTransactions.makeContractCall(txOptions);\nconst broadcastTxn = await stacksTransactions.broadcastTransaction(transaction, network);\n\n//Passed along Outputs for UI\nmsg.payload = transaction;\nmsg.blockchain = \"0x\" + broadcastTxn;//the transaction id\nmsg.txoptions = txOptions;//the tx options\nmsg.ftcontractid = tempcontractid;//full contract id\nmsg.ftinfo = ftinfo;\nmsg.ftname = ftname;//contract name\nmsg.ftaddress = ftaddress;//contract address\nmsg.ftsender = ftsender; //contract caller\nmsg.ftamount = ftamount; //amount to send\nmsg.ftdestination = ftdestination; //where to send\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "BigNum",
                "module": "bn.js"
            },
            {
                "var": "stacksNetwork",
                "module": "@stacks/network"
            },
            {
                "var": "stacksTransactions",
                "module": "@stacks/transactions"
            },
            {
                "var": "BufferCV",
                "module": "@stacks/transactions"
            }
        ],
        "x": 1320,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "c35cef52.20fb7",
        "type": "link out",
        "z": "354f3ac2.1ff636",
        "name": "to set Global (tempcontractid)",
        "links": [
            "b1b2b358.b4efb"
        ],
        "x": 215,
        "y": 140,
        "wires": []
    },
    {
        "id": "c19862aa.75779",
        "type": "change",
        "z": "e83b2318.6f5c6",
        "name": "set global.tempcontractid",
        "rules": [
            {
                "t": "move",
                "p": "contractid",
                "pt": "msg",
                "to": "tempcontractid",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 550,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "b1b2b358.b4efb",
        "type": "link in",
        "z": "e83b2318.6f5c6",
        "name": "to bind Global (tempcontractid)",
        "links": [
            "c35cef52.20fb7"
        ],
        "x": 155,
        "y": 1080,
        "wires": [
            [
                "c19862aa.75779"
            ]
        ]
    },
    {
        "id": "8bd31a2c.72f948",
        "type": "comment",
        "z": "354f3ac2.1ff636",
        "name": "Post-Conditions Explained",
        "info": "# Transaction Post-Conditions\nA key use-case of smart contracts is to allow programmatic control over the assets in one or more accounts. However, where there is programmatic control, there are bound to be bugs. \nIn the world of smart contract programming, bugs (intentional or not) can have severe consequences to the user's well-being. In particular, bugs can destroy a user's assets and cause them to lose wealth. \nTransaction post-conditions are a feature meant to limit the damage a bug can do in terms of destroying a user's assets.\n\n**Post-conditions are intended to be used to force a transaction to abort if the transaction would cause a principal to send an asset in a way that is not to the user's liking.** \n### Example A: \nA user may append a post-condition saying that upon successful execution, their account's STX balance should have decreased by no more than 1 STX (excluding the fee). \nIf this is not the case, then the transaction would abort and the account would only pay the transaction fee of processing it. \n### Example B:\nA user purchasing a BNS name may append a post-condition saying that upon successful execution, the seller will have sent the BNS name. \nIf it did not, then the transaction aborts, the account is not billed for the name, and the selling account receives no payment.\n\nEach transaction includes a field that describes zero or more **post-conditions that must _ALL_ be true when the transaction finishes running.** Each post-condition is a quad that encodes the following information:\n\n * The **principal** that sent the asset. It can be a standard or contract address.\n * The **asset name**, i.e., the name of one of the assets in the originating account's asset map.\n * The **comparator**, (described below).\n * The **literal**, an integer or boolean value used to compare instances of the asset against via the condition. The type of literal depends on both the type of asset (fungible or non-fungible) and the comparator.\n\nThe Stacks blockchain supports the following two types of comparators:\n\n**Fungible asset changes** -- that is, a question of how much of a fungible asset was sent by a given account when the transaction ran. \nThe post-condition can assert that the quantity of tokens increased, decreased, or stayed the same.\n\n**Non-fungible asset state** -- that is, a question of whether or not an account sent a non-fungible asset when the transaction ran.\n\nIn addition, the Stacks blockchain supports an \"**allow**\" or \"**deny**\" mode for evaluating post-conditions: \nin \"**allow**\" mode, other asset transfers not covered by the post-conditions are permitted, \nbut in \"**deny**\" mode, no other asset transfers are permitted besides those named in the post-conditions.\n\n**Post-conditions are meant to be added by the user (or by the user's wallet software) at the moment they sign with their origin account. \nBecause the user defines the post-conditions, the user has the power to protect themselves from buggy or malicious smart contracts proactively, so even undiscovered bugs cannot steal or destroy their assets if they are guarded with post-conditions.**\n\nWell-designed wallets would provide an intuitive user interface for encoding post-conditions, as well as provide a set of recommended mitigations based on whether or not the transaction would interact with a known-buggy smart contract.\n\nPost-conditions may be used in conjunction with only contract-calls and smart contract instantiation transaction payloads.\n\n## **Post-Condition Limitations**\nPost-conditions do not consider who _currently_ owns an asset when the transaction finishes, nor do they consider the _sequence_ of owners an asset had during its execution. \nIt only encodes _who sent_ an asset, and _how much_. \n\nThis information is much cheaper to track, and requires no I/O to process (processing time is O(n) in the number of post-conditions). \n\nUsers who want richer post-conditions are encouraged to deploy their own proxy contracts for making such queries.",
        "x": 990,
        "y": 80,
        "wires": []
    },
    {
        "id": "3020941e.39f2dc",
        "type": "function",
        "z": "354f3ac2.1ff636",
        "name": "pass to History Tab",
        "func": "const ftxid = msg.blockchain;\n\n\nmsg.ftxid = ftxid;\nmsg.payload = {\"tab\":\"History\"};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2050,
        "y": 180,
        "wires": [
            [
                "49d8750f.46997c"
            ]
        ]
    },
    {
        "id": "49d8750f.46997c",
        "type": "ui_ui_control",
        "z": "354f3ac2.1ff636",
        "name": "ui change",
        "events": "change",
        "x": 2240,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "aedcd473.b0f298",
        "type": "ui_template",
        "z": "354f3ac2.1ff636",
        "group": "93894c51.e61b",
        "name": "Fungible Token TX ID",
        "order": 4,
        "width": "13",
        "height": "1",
        "format": "Most Recent TX: {{msg.blockchain}}",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 1720,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "48af1254.6c5ddc",
        "type": "ui_toast",
        "z": "354f3ac2.1ff636",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "Acknowledged",
        "cancel": "",
        "raw": true,
        "topic": "Pending",
        "name": "",
        "x": 1870,
        "y": 180,
        "wires": [
            [
                "3020941e.39f2dc"
            ]
        ]
    },
    {
        "id": "52f29bb6.d47464",
        "type": "function",
        "z": "354f3ac2.1ff636",
        "name": "popup format",
        "func": "var ftname = msg.ftname;\nvar ftamount = msg.ftamount;\nvar ftdestination = msg.ftdestination;\nmsg.payload = ftamount + \" of \" + ftname + \" to \" + \"<br><small><small>\" + ftdestination + \"</small></small>\"; \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 180,
        "wires": [
            [
                "48af1254.6c5ddc"
            ]
        ]
    },
    {
        "id": "49a99107.00da3",
        "type": "debug",
        "z": "f7442446.0c97f8",
        "d": true,
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1290,
        "y": 780,
        "wires": []
    },
    {
        "id": "69801746.039c78",
        "type": "function",
        "z": "f7442446.0c97f8",
        "name": "token uri splitter",
        "func": "const str = msg.payload.source_code;\nconst res = str.split(\"get-token-uri\");\n\nmsg.payload = res;\nmsg.payload.source_code = str;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1360,
        "y": 1580,
        "wires": [
            [
                "250795a.6d3b56a"
            ]
        ]
    },
    {
        "id": "250795a.6d3b56a",
        "type": "switch",
        "z": "f7442446.0c97f8",
        "name": "if contains",
        "property": "payload[1]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "some u",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "ok none",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 1520,
        "y": 1580,
        "wires": [
            [
                "9ac930a1.55f4",
                "2599de5c.7dc032"
            ],
            [
                "1a60cd26.d74763"
            ],
            [
                "1a60cd26.d74763"
            ]
        ]
    },
    {
        "id": "1a60cd26.d74763",
        "type": "function",
        "z": "f7442446.0c97f8",
        "name": "or set image0 (default)",
        "func": "const image0 = \"https://cryptocracy.io/assets/images/cryptocracy_clear.png\";\nmsg.payload = {image0};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2220,
        "y": 1640,
        "wires": [
            [
                "61361a6d.ebaa34"
            ]
        ]
    },
    {
        "id": "9ac930a1.55f4",
        "type": "function",
        "z": "f7442446.0c97f8",
        "name": "token meta 0",
        "func": "const str = msg.payload.source_code;\nconst res = str.split(\"get-token-uri\");\nconst res2 = res[1].split(\"some u\\\"\");\nconst res3 = res2[1].split(\".json\");\n\nmsg.url = res3[0] + \".json\";\nmsg.payload = res3[0] + \".json\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 1560,
        "wires": [
            [
                "595e2ea1.c15cd"
            ]
        ]
    },
    {
        "id": "595e2ea1.c15cd",
        "type": "http request",
        "z": "f7442446.0c97f8",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "persist": false,
        "authType": "",
        "x": 1850,
        "y": 1560,
        "wires": [
            [
                "5fa839f3.776d68"
            ]
        ]
    },
    {
        "id": "5fa839f3.776d68",
        "type": "json",
        "z": "f7442446.0c97f8",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 2030,
        "y": 1560,
        "wires": [
            [
                "ca8dcb99.2d3178"
            ]
        ]
    },
    {
        "id": "ca8dcb99.2d3178",
        "type": "function",
        "z": "f7442446.0c97f8",
        "name": "set image0",
        "func": "const image0 = msg.payload.image;\nmsg.payload = {image0};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2190,
        "y": 1560,
        "wires": [
            [
                "61361a6d.ebaa34"
            ]
        ]
    },
    {
        "id": "f94a9f4e.4aa3",
        "type": "function",
        "z": "f7442446.0c97f8",
        "name": "set image1",
        "func": "const image1 = msg.payload.image;\nmsg.payload = {image1};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2190,
        "y": 1680,
        "wires": [
            [
                "61361a6d.ebaa34"
            ]
        ]
    },
    {
        "id": "d1516889.068bc8",
        "type": "function",
        "z": "f7442446.0c97f8",
        "name": "or image1 (default)",
        "func": "const image1 = \"https://cryptocracy.io/assets/images/cryptocracy_clear.png\";\nmsg.payload = {image1};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2210,
        "y": 1760,
        "wires": [
            [
                "61361a6d.ebaa34"
            ]
        ]
    },
    {
        "id": "9ee4696e.6030b8",
        "type": "function",
        "z": "f7442446.0c97f8",
        "name": "token meta 1",
        "func": "const str = msg.payload.source_code;\nconst res = str.split(\"get-token-uri\");\nconst res2 = res[1].split(\"some u\\\"\");\nconst res3 = res2[1].split(\".json\");\n\nmsg.url = res3[0] + \".json\";\nmsg.payload = res3[0] + \".json\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 1680,
        "wires": [
            [
                "fb594fb2.89134"
            ]
        ]
    },
    {
        "id": "8052aca3.fec73",
        "type": "function",
        "z": "f7442446.0c97f8",
        "name": "token uri splitter",
        "func": "const str = msg.payload.source_code;\nconst res = str.split(\"get-token-uri\");\n\nmsg.payload = res;\nmsg.payload.source_code = str;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1360,
        "y": 1700,
        "wires": [
            [
                "a249c47f.41ae68"
            ]
        ]
    },
    {
        "id": "a249c47f.41ae68",
        "type": "switch",
        "z": "f7442446.0c97f8",
        "name": "if contains",
        "property": "payload[1]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "some u",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "ok none",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 1520,
        "y": 1700,
        "wires": [
            [
                "9ee4696e.6030b8",
                "2599de5c.7dc032"
            ],
            [
                "d1516889.068bc8"
            ],
            [
                "d1516889.068bc8"
            ]
        ]
    },
    {
        "id": "fb594fb2.89134",
        "type": "http request",
        "z": "f7442446.0c97f8",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "persist": false,
        "authType": "",
        "x": 1850,
        "y": 1680,
        "wires": [
            [
                "6a7e5a67.737bd4"
            ]
        ]
    },
    {
        "id": "6a7e5a67.737bd4",
        "type": "json",
        "z": "f7442446.0c97f8",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 2030,
        "y": 1680,
        "wires": [
            [
                "f94a9f4e.4aa3"
            ]
        ]
    },
    {
        "id": "2599de5c.7dc032",
        "type": "debug",
        "z": "f7442446.0c97f8",
        "name": "some",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload[1]",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1790,
        "y": 1420,
        "wires": []
    },
    {
        "id": "2a8e7b97.61ab04",
        "type": "function",
        "z": "f7442446.0c97f8",
        "name": "token uri splitter",
        "func": "const str = msg.payload.source_code;\nconst res = str.split(\"get-token-uri\");\n\nmsg.payload = res;\nmsg.payload.source_code = str;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1360,
        "y": 1820,
        "wires": [
            [
                "dd5f68ea.58ae68"
            ]
        ]
    },
    {
        "id": "dd5f68ea.58ae68",
        "type": "switch",
        "z": "f7442446.0c97f8",
        "name": "if contains",
        "property": "payload[1]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "some u",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "ok none",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 1520,
        "y": 1820,
        "wires": [
            [
                "5d68bd24.fdd954"
            ],
            [
                "be8368f5.8612d8"
            ],
            [
                "be8368f5.8612d8"
            ]
        ]
    },
    {
        "id": "57c27740.ce7d48",
        "type": "function",
        "z": "f7442446.0c97f8",
        "name": "token uri splitter",
        "func": "const str = msg.payload.source_code;\nconst res = str.split(\"get-token-uri\");\n\nmsg.payload = res;\nmsg.payload.source_code = str;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1360,
        "y": 1940,
        "wires": [
            [
                "28eaf145.c66c6e"
            ]
        ]
    },
    {
        "id": "28eaf145.c66c6e",
        "type": "switch",
        "z": "f7442446.0c97f8",
        "name": "if contains",
        "property": "payload[1]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "some u",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "ok none",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 1520,
        "y": 1940,
        "wires": [
            [
                "989a09f4.675c18"
            ],
            [
                "b5a46201.258c4"
            ],
            [
                "b5a46201.258c4"
            ]
        ]
    },
    {
        "id": "d8bc754f.50dd28",
        "type": "function",
        "z": "f7442446.0c97f8",
        "name": "token uri splitter",
        "func": "const str = msg.payload.source_code;\nconst res = str.split(\"get-token-uri\");\n\nmsg.payload = res;\nmsg.payload.source_code = str;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1360,
        "y": 2040,
        "wires": [
            [
                "cd06907a.d3d24"
            ]
        ]
    },
    {
        "id": "cd06907a.d3d24",
        "type": "switch",
        "z": "f7442446.0c97f8",
        "name": "if contains",
        "property": "payload[1]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "some u",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "ok none",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 1520,
        "y": 2040,
        "wires": [
            [
                "9cf9e16b.93a78"
            ],
            [
                "307f543a.8222ac"
            ],
            [
                "307f543a.8222ac"
            ]
        ]
    },
    {
        "id": "d4f6ab82.c39208",
        "type": "function",
        "z": "f7442446.0c97f8",
        "name": "token uri splitter",
        "func": "const str = msg.payload.source_code;\nconst res = str.split(\"get-token-uri\");\n\nmsg.payload = res;\nmsg.payload.source_code = str;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1360,
        "y": 2180,
        "wires": [
            [
                "8212c738.43cd38"
            ]
        ]
    },
    {
        "id": "8212c738.43cd38",
        "type": "switch",
        "z": "f7442446.0c97f8",
        "name": "if contains",
        "property": "payload[1]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "some u",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "ok none",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 1520,
        "y": 2180,
        "wires": [
            [
                "4f695cd6.030794"
            ],
            [
                "4063f524.742d9c"
            ],
            [
                "4063f524.742d9c"
            ]
        ]
    },
    {
        "id": "4de52a5.6f4c2d4",
        "type": "function",
        "z": "f7442446.0c97f8",
        "name": "token uri splitter",
        "func": "const str = msg.payload.source_code;\nconst res = str.split(\"get-token-uri\");\n\nmsg.payload = res;\nmsg.payload.source_code = str;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1360,
        "y": 2300,
        "wires": [
            [
                "ebf344da.933108"
            ]
        ]
    },
    {
        "id": "ebf344da.933108",
        "type": "switch",
        "z": "f7442446.0c97f8",
        "name": "if contains",
        "property": "payload[1]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "some u",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "ok none",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 1520,
        "y": 2300,
        "wires": [
            [
                "7538e879.7ec088"
            ],
            [
                "af10197.3dac0e8"
            ],
            [
                "af10197.3dac0e8"
            ]
        ]
    },
    {
        "id": "b5c1fab6.2374c8",
        "type": "function",
        "z": "f7442446.0c97f8",
        "name": "token uri splitter",
        "func": "const str = msg.payload.source_code;\nconst res = str.split(\"get-token-uri\");\n\nmsg.payload = res;\nmsg.payload.source_code = str;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1360,
        "y": 2420,
        "wires": [
            [
                "8ffe71a4.09c38"
            ]
        ]
    },
    {
        "id": "8ffe71a4.09c38",
        "type": "switch",
        "z": "f7442446.0c97f8",
        "name": "if contains",
        "property": "payload[1]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "some u",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "ok none",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 1520,
        "y": 2420,
        "wires": [
            [
                "5fa44ea0.92cbb"
            ],
            [
                "32303503.c617ca"
            ],
            [
                "32303503.c617ca"
            ]
        ]
    },
    {
        "id": "b47f691c.cd7ef8",
        "type": "function",
        "z": "f7442446.0c97f8",
        "name": "token uri splitter",
        "func": "const str = msg.payload.source_code;\nconst res = str.split(\"get-token-uri\");\n\nmsg.payload = res;\nmsg.payload.source_code = str;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1360,
        "y": 2540,
        "wires": [
            [
                "b4db631e.fff13"
            ]
        ]
    },
    {
        "id": "b4db631e.fff13",
        "type": "switch",
        "z": "f7442446.0c97f8",
        "name": "if contains",
        "property": "payload[1]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "some u",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "ok none",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 1520,
        "y": 2540,
        "wires": [
            [
                "54b396fa.a16838"
            ],
            [
                "89d1d1c8.26f65"
            ],
            [
                "89d1d1c8.26f65"
            ]
        ]
    },
    {
        "id": "1274a026.8ee01",
        "type": "function",
        "z": "f7442446.0c97f8",
        "name": "token uri splitter",
        "func": "const str = msg.payload.source_code;\nconst res = str.split(\"get-token-uri\");\n\nmsg.payload = res;\nmsg.payload.source_code = str;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1360,
        "y": 2660,
        "wires": [
            [
                "928e5268.b0f5b"
            ]
        ]
    },
    {
        "id": "928e5268.b0f5b",
        "type": "switch",
        "z": "f7442446.0c97f8",
        "name": "if contains",
        "property": "payload[1]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "some u",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "ok none",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 1520,
        "y": 2660,
        "wires": [
            [
                "80e53f18.b8fba"
            ],
            [
                "3f17a712.87fc98"
            ],
            [
                "3f17a712.87fc98"
            ]
        ]
    },
    {
        "id": "3291508.a4250b",
        "type": "link in",
        "z": "f7442446.0c97f8",
        "name": "",
        "links": [],
        "x": 1175,
        "y": 880,
        "wires": [
            [
                "37de726.b25348e"
            ]
        ]
    },
    {
        "id": "37de726.b25348e",
        "type": "function",
        "z": "f7442446.0c97f8",
        "name": "default names",
        "func": "msg.payload.names = \"undefined\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1320,
        "y": 900,
        "wires": [
            [
                "7440f9a1.036a58"
            ]
        ]
    },
    {
        "id": "d686bf14.520f5",
        "type": "switch",
        "z": "354f3ac2.1ff636",
        "name": "pass thru unless errored",
        "property": "payload.error",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            },
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 910,
        "y": 320,
        "wires": [
            [
                "28c6a1bc.a2301e"
            ],
            [
                "7ad371e1.f4d23"
            ]
        ]
    },
    {
        "id": "28c6a1bc.a2301e",
        "type": "function",
        "z": "354f3ac2.1ff636",
        "name": "token uri splitter",
        "func": "const str = msg.payload.source_code;\nconst res = str.split(\"get-token-uri\");\n\nmsg.payload = res;\nmsg.payload.source_code = str;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 320,
        "wires": [
            [
                "ad12e4a6.f7f758"
            ]
        ]
    },
    {
        "id": "ad12e4a6.f7f758",
        "type": "switch",
        "z": "354f3ac2.1ff636",
        "name": "if contains",
        "property": "payload[1]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "some u",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "ok none",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 1320,
        "y": 320,
        "wires": [
            [
                "87675205.df446"
            ],
            [
                "7ad371e1.f4d23"
            ],
            [
                "7ad371e1.f4d23"
            ]
        ]
    },
    {
        "id": "87675205.df446",
        "type": "function",
        "z": "354f3ac2.1ff636",
        "name": "token meta",
        "func": "const str = msg.payload.source_code;\nconst res = str.split(\"get-token-uri\");\nconst res2 = res[1].split(\"some u\\\"\");\nconst res3 = res2[1].split(\".json\");\n\nmsg.url = res3[0] + \".json\";\nmsg.payload = res3[0] + \".json\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1610,
        "y": 300,
        "wires": [
            [
                "b2373730.d2f1d8"
            ]
        ]
    },
    {
        "id": "b2373730.d2f1d8",
        "type": "http request",
        "z": "354f3ac2.1ff636",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "persist": false,
        "authType": "",
        "x": 1610,
        "y": 340,
        "wires": [
            [
                "1c427453.07d54c"
            ]
        ]
    },
    {
        "id": "1c427453.07d54c",
        "type": "json",
        "z": "354f3ac2.1ff636",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1630,
        "y": 380,
        "wires": [
            [
                "96269271.10e5c",
                "6e4d847b.3fe2cc"
            ]
        ]
    },
    {
        "id": "96269271.10e5c",
        "type": "function",
        "z": "354f3ac2.1ff636",
        "name": "set image",
        "func": "const image = msg.payload.image;\nmsg.payload = {image};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1800,
        "y": 420,
        "wires": [
            [
                "6e4d847b.3fe2cc"
            ]
        ]
    },
    {
        "id": "7ad371e1.f4d23",
        "type": "function",
        "z": "354f3ac2.1ff636",
        "name": "or set image (default)",
        "func": "const image = \"https://cryptocracy.io/assets/images/cryptocracy_clear.png\";\nmsg.payload = {image};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1780,
        "y": 480,
        "wires": [
            [
                "6e4d847b.3fe2cc"
            ]
        ]
    },
    {
        "id": "adf9d941.6283a8",
        "type": "comment",
        "z": "354f3ac2.1ff636",
        "name": "Relative to Passing in a Generic Token Image Icon",
        "info": "",
        "x": 990,
        "y": 380,
        "wires": []
    },
    {
        "id": "15a35900.23f2f7",
        "type": "comment",
        "z": "354f3ac2.1ff636",
        "name": "Relative to Passing Token Meta Data",
        "info": "",
        "x": 940,
        "y": 220,
        "wires": []
    },
    {
        "id": "3f0031d4.563bbe",
        "type": "ui_dropdown",
        "z": "4dc5ddec.703f44",
        "name": "Wallet Setup",
        "label": "Setup Wallet by:",
        "tooltip": "If you select wrong, just hit Default to come back here.",
        "place": "Select Intention...",
        "group": "8720d2fe.9f3dd",
        "order": 4,
        "width": "7",
        "height": "1",
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Generating a New STX Wallet",
                "value": "generate",
                "type": "str"
            },
            {
                "label": "Importing an Existing STX Wallet",
                "value": "import",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "x": 110,
        "y": 320,
        "wires": [
            [
                "415d6d6b.b0a034"
            ]
        ]
    },
    {
        "id": "5bb46608.098308",
        "type": "ui_form",
        "z": "4dc5ddec.703f44",
        "name": "",
        "label": "Provide a Secret Key",
        "group": "7355c581.62669c",
        "order": 1,
        "width": 13,
        "height": 1,
        "options": [
            {
                "label": "Secret Key Phrase",
                "value": "secretKey",
                "type": "password",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "secretKey": ""
        },
        "payload": "",
        "submit": "Import",
        "cancel": "",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "x": 140,
        "y": 440,
        "wires": [
            [
                "20174e79.162132"
            ]
        ]
    },
    {
        "id": "20174e79.162132",
        "type": "function",
        "z": "4dc5ddec.703f44",
        "name": "import wallet",
        "func": "const password = msg.payload.password;\n\nlet secretKey = msg.payload.secretKey;\n\nif (secretKey) {\n    \n    const isValid = bip39.validateMnemonic(secretKey);\n    \n    if (!isValid) throw new Error(secretKey + ' is not a valid bip39 mnemonic key')\n    \n} else secretKey = stacksWalletSdk.generateSecretKey();\n\nconst wallet = await stacksWalletSdk.generateWallet({secretKey, password});\n\nmsg.payload = {secretKey, password, wallet};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "stacksWalletSdk",
                "module": "@stacks/wallet-sdk"
            },
            {
                "var": "bip39",
                "module": "bip39"
            }
        ],
        "x": 510,
        "y": 440,
        "wires": [
            [
                "6a569224.80b86c",
                "7dc1b3fe.2ad0dc",
                "12bb6bd0.955fa4"
            ]
        ]
    },
    {
        "id": "6a569224.80b86c",
        "type": "debug",
        "z": "4dc5ddec.703f44",
        "name": "Wallet Import Debugger",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 480,
        "wires": []
    },
    {
        "id": "d8f57f63.b6fe6",
        "type": "function",
        "z": "4dc5ddec.703f44",
        "name": "generate wallet",
        "func": "const password = msg.payload.password;\n\nconst secretKey = stacksWalletSdk.generateSecretKey();\n\nconst wallet = await stacksWalletSdk.generateWallet({secretKey, password});\n\nmsg.payload = {secretKey, password, wallet};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "stacksWalletSdk",
                "module": "@stacks/wallet-sdk"
            },
            {
                "var": "bip39",
                "module": "bip39"
            }
        ],
        "x": 520,
        "y": 520,
        "wires": [
            [
                "7dc1b3fe.2ad0dc",
                "12bb6bd0.955fa4",
                "6a569224.80b86c"
            ]
        ]
    },
    {
        "id": "28ad1208.26b80e",
        "type": "function",
        "z": "4dc5ddec.703f44",
        "name": "hide Import / show Generate group",
        "func": "msg.payload = {\n  \"group\": {\n    \"hide\": [\n      \"Setup_Import\",\n      \"Setup_Default\"\n    ],\n    \"show\": [\n      \"Setup_DefaultBTN\",        \n      \"Setup_Generate\"\n    ],\n    \"focus\": true\n  }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 340,
        "wires": [
            [
                "782f78f4.b42e58"
            ]
        ]
    },
    {
        "id": "db06b32e.3b44d",
        "type": "function",
        "z": "4dc5ddec.703f44",
        "name": "hide Generate / show Import group",
        "func": "msg.payload = {\n  \"group\": {\n    \"hide\": [\n      \"Setup_Generate\",\n      \"Setup_Default\"\n    ],\n    \"show\": [\n      \"Setup_DefaultBTN\",\n      \"Setup_Import\"\n    ],\n    \"focus\": true\n  }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 300,
        "wires": [
            [
                "782f78f4.b42e58"
            ]
        ]
    },
    {
        "id": "782f78f4.b42e58",
        "type": "ui_ui_control",
        "z": "4dc5ddec.703f44",
        "name": "ui change",
        "events": "change",
        "x": 860,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "415d6d6b.b0a034",
        "type": "switch",
        "z": "4dc5ddec.703f44",
        "name": "switch",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "import",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "generate",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "select",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 270,
        "y": 320,
        "wires": [
            [
                "db06b32e.3b44d"
            ],
            [
                "28ad1208.26b80e"
            ],
            [
                "daa607c8.884ac8"
            ],
            []
        ]
    },
    {
        "id": "c978fb4f.91c278",
        "type": "debug",
        "z": "4dc5ddec.703f44",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 140,
        "wires": []
    },
    {
        "id": "7fd85854.a573b8",
        "type": "function",
        "z": "4dc5ddec.703f44",
        "name": "get keys globals",
        "func": "var secretkey = global.get(\"secretkey\");\n\nmsg.payload = secretkey;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 640,
        "wires": [
            [
                "6b1857b7.0b8e88"
            ]
        ]
    },
    {
        "id": "6b1857b7.0b8e88",
        "type": "ui_template",
        "z": "4dc5ddec.703f44",
        "group": "f5175a88.b9ffd8",
        "name": "Keys",
        "order": 1,
        "width": 13,
        "height": 2,
        "format": "<h4>Secret Key:</h4>\n<small><small><small>{{msg.payload}}</small></small></small>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 750,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "88aeaf17.9a95a",
        "type": "link in",
        "z": "4dc5ddec.703f44",
        "name": "Pass from Call Keys",
        "links": [
            "12bb6bd0.955fa4"
        ],
        "x": 215,
        "y": 640,
        "wires": [
            [
                "7fd85854.a573b8",
                "66f604a.4e112fc",
                "2e0eac29.e3fe34"
            ]
        ]
    },
    {
        "id": "7dc1b3fe.2ad0dc",
        "type": "link out",
        "z": "4dc5ddec.703f44",
        "name": "pass to Globals",
        "links": [
            "747f392.a83a0c8"
        ],
        "x": 735,
        "y": 440,
        "wires": []
    },
    {
        "id": "12bb6bd0.955fa4",
        "type": "link out",
        "z": "4dc5ddec.703f44",
        "name": "Pass to Call Keys",
        "links": [
            "88aeaf17.9a95a"
        ],
        "x": 735,
        "y": 520,
        "wires": []
    },
    {
        "id": "6d6b89b8.98a768",
        "type": "inject",
        "z": "4dc5ddec.703f44",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 560,
        "wires": [
            [
                "d8f57f63.b6fe6"
            ]
        ]
    },
    {
        "id": "28224f6f.928d1",
        "type": "ui_form",
        "z": "4dc5ddec.703f44",
        "name": "",
        "label": "Provide a Password",
        "group": "5cbf4d91.159b54",
        "order": 1,
        "width": 13,
        "height": 1,
        "options": [
            {
                "label": "Password",
                "value": "password",
                "type": "password",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "password": ""
        },
        "payload": "",
        "submit": "Generate",
        "cancel": "",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "x": 140,
        "y": 520,
        "wires": [
            [
                "d8f57f63.b6fe6"
            ]
        ]
    },
    {
        "id": "daa607c8.884ac8",
        "type": "function",
        "z": "4dc5ddec.703f44",
        "name": "Show Setup Default Group Only",
        "func": "msg.payload = {\n  \"group\": {\n    \"hide\": [\n      \"Setup_DefaultBTN\",        \n      \"Setup_Generate\",\n      \"Setup_Import\",\n      \"Setup_Keys\"\n    ],\n    \"show\": [\n      \"Setup_Default\"\n    ],\n    \"focus\": true\n  }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 380,
        "wires": [
            [
                "782f78f4.b42e58"
            ]
        ]
    },
    {
        "id": "c8bd0bee.487f58",
        "type": "inject",
        "z": "4dc5ddec.703f44",
        "name": "Default Wallet to Setup Step",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 380,
        "wires": [
            [
                "daa607c8.884ac8"
            ]
        ]
    },
    {
        "id": "66f604a.4e112fc",
        "type": "function",
        "z": "4dc5ddec.703f44",
        "name": "Show Keys Only",
        "func": "msg.payload = {\n  \"group\": {\n    \"hide\": [\n      \"Setup_Generate\",\n      \"Setup_Import\",\n      \"Setup_Default\"\n    ],\n    \"show\": [\n      \"Setup_DefaultBTN\",        \n      \"Setup_Keys\"      \n    ],\n    \"focus\": true\n  }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 680,
        "wires": [
            [
                "aba2b13c.a502b"
            ]
        ]
    },
    {
        "id": "aba2b13c.a502b",
        "type": "ui_ui_control",
        "z": "4dc5ddec.703f44",
        "name": "ui change",
        "events": "change",
        "x": 760,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "3a5da428.056b4c",
        "type": "function",
        "z": "4dc5ddec.703f44",
        "name": "Hide All Tabs",
        "func": "msg.payload = {\n   \"tabs\":{\n      \"hide\":[\n          \"Wallet\",\n          \"Feed\",\n          \"Minting\",\n          \"Assets\",\n          \"History\"\n          ],\n   }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 180,
        "wires": [
            [
                "824b1d4f.6255",
                "c978fb4f.91c278"
            ]
        ]
    },
    {
        "id": "824b1d4f.6255",
        "type": "ui_ui_control",
        "z": "4dc5ddec.703f44",
        "name": "ui change",
        "events": "change",
        "x": 760,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "78fba074.e1589",
        "type": "inject",
        "z": "4dc5ddec.703f44",
        "name": "Hide All Tabs",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "2",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 180,
        "wires": [
            [
                "3a5da428.056b4c",
                "daa607c8.884ac8"
            ]
        ]
    },
    {
        "id": "2523be24.ba8752",
        "type": "function",
        "z": "4dc5ddec.703f44",
        "name": "Show All Tabs",
        "func": "msg.payload = {\n   \"tabs\":{\n      \"show\":[\n          \"Wallet\",\n          \"Feed\",\n          \"Minting\",\n          \"Assets\",\n          \"History\"\n          ],\n   }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 140,
        "wires": [
            [
                "824b1d4f.6255",
                "c978fb4f.91c278"
            ]
        ]
    },
    {
        "id": "bdfe4f3.ca8abb",
        "type": "inject",
        "z": "4dc5ddec.703f44",
        "name": "Debug Show All Tabs",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "2",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 140,
        "wires": [
            [
                "2523be24.ba8752"
            ]
        ]
    },
    {
        "id": "2e0eac29.e3fe34",
        "type": "function",
        "z": "4dc5ddec.703f44",
        "name": "Show All Tabs",
        "func": "msg.payload = {\n   \"tabs\":{\n      \"show\":[\n          \"Wallet\",\n          \"Feed\",\n          \"Minting\",\n          \"Assets\",\n          \"History\"\n          ],\n   }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 720,
        "wires": [
            [
                "aba2b13c.a502b"
            ]
        ]
    },
    {
        "id": "19df7ed4.1da1d1",
        "type": "ui_button",
        "z": "4dc5ddec.703f44",
        "name": "Default BTN",
        "group": "5b3b110d.6e9d4",
        "order": 2,
        "width": "2",
        "height": "1",
        "passthru": false,
        "label": "Default",
        "tooltip": "",
        "color": "White",
        "bgcolor": "Red",
        "icon": "fa-refresh",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 150,
        "y": 180,
        "wires": [
            [
                "3a5da428.056b4c",
                "daa607c8.884ac8"
            ]
        ]
    },
    {
        "id": "1a84a33b.5749ed",
        "type": "ui_template",
        "z": "4dc5ddec.703f44",
        "group": "8720d2fe.9f3dd",
        "name": "Setup Welcome Mat",
        "order": 2,
        "width": "13",
        "height": "5",
        "format": "<style>\n    img {\n      border-radius: 50%;\n    }\n</style>\n<div style=\"height: 250px;\" align=\"center\">\n<img src=\"https://dapparatus.io/assets/images/dapparatus_clear.png\" width=\"250\"><br/>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 150,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "3daa146a.19817c",
        "type": "function",
        "z": "613e85c9.c6210c",
        "name": "create ft-trait.clar",
        "func": "msg.payload =   \"(define-trait ft-trait\\n\" +\n                \"  (\\n\" +\n                \"    ;; Transfer from the caller to a new principal\\n\" +\n                \"    (transfer (uint principal principal (optional (buff 34))) (response bool uint))\\n\" +\n                \"\\n\" +\n                \"    ;; human readable name of the token\\n\" +\n                \"    (get-name () (response (string-ascii 32) uint))\\n\" +\n                \"\\n\" +\n                \"    ;; ticker symbol or empty if none\\n\" +\n                \"    (get-symbol () (response (string-ascii 32) uint))\\n\" +\n                \"\\n\" +\n                \"    ;; number of decimals used\\n\" +\n                \"    (get-decimals () (response uint uint))\\n\" +\n                \"\\n\" +\n                \"    ;; balance of the passed principal\\n\" +\n                \"    (get-balance-of (principal) (response uint uint))\\n\" +\n                \"\\n\" +\n                \"    ;; current total supply\\n\" +\n                \"    (get-total-supply () (response uint uint))\\n\" +\n                \"\\n\" +\n                \"    ;; optional URI that represents metadata of this token\\n\" +\n                \"    (get-token-uri () (response (optional (string-utf8 256)) uint))\\n\" +\n                \"  )\\n\" +\n                \")\";\n               \nmsg.filename = \"ft-trait.clar\"; // name the contract same as input custom token name\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2910,
        "y": 440,
        "wires": [
            [
                "fd034cb3.87179"
            ]
        ]
    },
    {
        "id": "fd034cb3.87179",
        "type": "file",
        "z": "613e85c9.c6210c",
        "name": "create local .clar",
        "filename": "",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "ascii",
        "x": 3240,
        "y": 440,
        "wires": [
            [
                "2dde65db.c0dc6a"
            ]
        ]
    },
    {
        "id": "2dde65db.c0dc6a",
        "type": "delay",
        "z": "613e85c9.c6210c",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 3440,
        "y": 440,
        "wires": [
            [
                "91685e83.d8d6b"
            ]
        ]
    },
    {
        "id": "91685e83.d8d6b",
        "type": "file in",
        "z": "613e85c9.c6210c",
        "name": "Get Local Clarity Contract",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 3650,
        "y": 440,
        "wires": [
            [
                "ba7b8087.4192e"
            ]
        ]
    },
    {
        "id": "ba7b8087.4192e",
        "type": "switch",
        "z": "613e85c9.c6210c",
        "name": "if stxprivkey is empty error",
        "property": "stxprivkey",
        "propertyType": "global",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 3930,
        "y": 440,
        "wires": [
            [
                "e621671b.60f598",
                "fbd5eebb.f19ae"
            ],
            [
                "7ec3e210.2678bc"
            ]
        ]
    },
    {
        "id": "15d47871.1c8f28",
        "type": "ui_template",
        "z": "613e85c9.c6210c",
        "group": "93f1cccf.344e5",
        "name": "TX Info (Mainnet)",
        "order": 8,
        "width": 0,
        "height": 0,
        "format": "{{msg.blockchain}} (Mainnet)",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 4670,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "7cbaf4df.fec5fc",
        "type": "ui_button",
        "z": "613e85c9.c6210c",
        "name": "",
        "group": "93f1cccf.344e5",
        "order": 3,
        "width": "6",
        "height": "1",
        "passthru": false,
        "label": "Deploy FT Interface Contract (Mainnet)",
        "tooltip": "THIS IS REQUIRED ONCE (for Fungible Tokens Minting)",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 2650,
        "y": 440,
        "wires": [
            [
                "3daa146a.19817c"
            ]
        ]
    },
    {
        "id": "835932f9.c2976",
        "type": "debug",
        "z": "613e85c9.c6210c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "url",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3280,
        "y": 940,
        "wires": []
    },
    {
        "id": "7c9c8214.551dfc",
        "type": "json",
        "z": "613e85c9.c6210c",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 3590,
        "y": 900,
        "wires": [
            [
                "3936ff8e.ad2a3",
                "fd512c74.052b4"
            ]
        ]
    },
    {
        "id": "3936ff8e.ad2a3",
        "type": "switch",
        "z": "613e85c9.c6210c",
        "name": "switch 2",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "istype",
                "v": "object",
                "vt": "object"
            },
            {
                "t": "istype",
                "v": "string",
                "vt": "string"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 3760,
        "y": 900,
        "wires": [
            [
                "5ae3fc3f.3862f4"
            ],
            [
                "9db38dfd.2fcbd"
            ]
        ]
    },
    {
        "id": "5ae3fc3f.3862f4",
        "type": "change",
        "z": "613e85c9.c6210c",
        "name": "enable form",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Interface Contract Detected, Proceed to Minting",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3950,
        "y": 880,
        "wires": [
            [
                "ba1b9031.869fd"
            ]
        ]
    },
    {
        "id": "9db38dfd.2fcbd",
        "type": "change",
        "z": "613e85c9.c6210c",
        "name": "disable form ",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Please Wait for Interface Confirmation",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3950,
        "y": 920,
        "wires": [
            [
                "776d31fd.e7c1f"
            ]
        ]
    },
    {
        "id": "fd512c74.052b4",
        "type": "debug",
        "z": "613e85c9.c6210c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 3770,
        "y": 860,
        "wires": []
    },
    {
        "id": "5bee0476.bd3d5c",
        "type": "function",
        "z": "613e85c9.c6210c",
        "name": "show Mint FT Form",
        "func": "msg.payload = {\n  \"group\": {\n    \"hide\": [\n      \"Minting_MintNav\",\n      \"Minting_MintNFT\",\n      \"Minting_MintNFT_Trait\",\n      \"Minting_MintNFT_Form\",\n      \"Minting_MintFT_Trait\"\n    ],\n    \"show\": [\n      \"Minting_MintFT_Form\"\n    ],\n    \"focus\": true\n  }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4410,
        "y": 880,
        "wires": [
            [
                "9162ee43.c4fef"
            ]
        ]
    },
    {
        "id": "eb27829b.46cc2",
        "type": "function",
        "z": "613e85c9.c6210c",
        "name": "show Mint FT Trait",
        "func": "msg.payload = {\n  \"group\": {\n    \"hide\": [\n      \"Minting_MintNav\",\n      \"Minting_MintNFT\",\n      \"Minting_MintNFT_Trait\",\n      \"Minting_MintNFT_Form\",\n      \"Minting_MintFT_Form\"\n    ],\n    \"show\": [\n      \"Minting_MintFT_Trait\"\n    ],\n    \"focus\": true\n  }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4410,
        "y": 960,
        "wires": [
            [
                "33d97294.046d1e"
            ]
        ]
    },
    {
        "id": "9162ee43.c4fef",
        "type": "ui_ui_control",
        "z": "613e85c9.c6210c",
        "name": "",
        "events": "all",
        "x": 4600,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "33d97294.046d1e",
        "type": "ui_ui_control",
        "z": "613e85c9.c6210c",
        "name": "",
        "events": "all",
        "x": 4600,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "ba1b9031.869fd",
        "type": "ui_toast",
        "z": "613e85c9.c6210c",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 4210,
        "y": 880,
        "wires": [
            [
                "5bee0476.bd3d5c"
            ]
        ]
    },
    {
        "id": "776d31fd.e7c1f",
        "type": "ui_toast",
        "z": "613e85c9.c6210c",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 4210,
        "y": 960,
        "wires": [
            [
                "eb27829b.46cc2"
            ]
        ]
    },
    {
        "id": "237b31dc.f8722e",
        "type": "http request",
        "z": "613e85c9.c6210c",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 3290,
        "y": 900,
        "wires": [
            [
                "9a54a59c.eacac8",
                "21bf5931.ff6426"
            ]
        ]
    },
    {
        "id": "9a54a59c.eacac8",
        "type": "debug",
        "z": "613e85c9.c6210c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 3470,
        "y": 860,
        "wires": []
    },
    {
        "id": "21bf5931.ff6426",
        "type": "switch",
        "z": "613e85c9.c6210c",
        "name": "switch 1",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            },
            {
                "t": "eq",
                "v": "No contract interface data found",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 3460,
        "y": 960,
        "wires": [
            [
                "7c9c8214.551dfc"
            ],
            [
                "776d31fd.e7c1f"
            ]
        ]
    },
    {
        "id": "5cb1010a.23a41",
        "type": "function",
        "z": "f7442446.0c97f8",
        "d": true,
        "name": "get assets url (mainnet)",
        "func": "const nettype = \"stacks-node-api.mainnet.stacks.co\"; // or use testnet\nconst principal = global.get(\"depositaddress\"); // or use testnetdepositaddress for testnet\n\nmsg.url = \"https://\" + nettype + \"/extended/v1/address/\" + principal + \"/balances\";// prior was /assets\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 960,
        "wires": [
            [
                "2d53e6be.0db00a"
            ]
        ]
    },
    {
        "id": "7300fe54.a4ee5",
        "type": "function",
        "z": "f7442446.0c97f8",
        "name": "get contract 0 url (mainnet)",
        "func": "const nettype = \"stacks-node-api.mainnet.stacks.co\"; // or use testnet\nconst contract = global.get(\"ftcontractnames[0][0]\"); //\nmsg.url = \"https://\" + nettype + \"/extended/v1/contract/\" + contract;// prior was /assets\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 1640,
        "wires": [
            []
        ]
    },
    {
        "id": "e567ccf5.e74bf",
        "type": "function",
        "z": "f7442446.0c97f8",
        "name": "get contract 1 url (mainnet)",
        "func": "const nettype = \"stacks-node-api.mainnet.stacks.co\"; // or use testnet\nconst contract = global.get(\"ftcontractnames[1][0]\"); //\nmsg.url = \"https://\" + nettype + \"/extended/v1/contract/\" + contract;// prior was /assets\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 1760,
        "wires": [
            []
        ]
    },
    {
        "id": "2bb2d853.b61cc8",
        "type": "function",
        "z": "f7442446.0c97f8",
        "name": "get contract 2 url (mainnet)",
        "func": "const nettype = \"stacks-node-api.mainnet.stacks.co\"; // or use testnet\nconst contract = global.get(\"ftcontractnames[2][0]\"); //\nmsg.url = \"https://\" + nettype + \"/extended/v1/contract/\" + contract;// prior was /assets\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 1880,
        "wires": [
            []
        ]
    },
    {
        "id": "265daa08.c3e116",
        "type": "function",
        "z": "f7442446.0c97f8",
        "name": "get contract 3 url (mainnet)",
        "func": "const nettype = \"stacks-node-api.mainnet.stacks.co\"; // or use testnet\nconst contract = global.get(\"ftcontractnames[3][0]\"); //\nmsg.url = \"https://\" + nettype + \"/extended/v1/contract/\" + contract;// prior was /assets\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 2000,
        "wires": [
            []
        ]
    },
    {
        "id": "d2999417.33d3b8",
        "type": "function",
        "z": "f7442446.0c97f8",
        "name": "get contract 4 url (mainnet)",
        "func": "const nettype = \"stacks-node-api.mainnet.stacks.co\"; // or use testnet\nconst contract = global.get(\"ftcontractnames[4][0]\"); //\nmsg.url = \"https://\" + nettype + \"/extended/v1/contract/\" + contract;// prior was /assets\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 2100,
        "wires": [
            []
        ]
    },
    {
        "id": "b2e000fe.c54c9",
        "type": "function",
        "z": "f7442446.0c97f8",
        "name": "get contract 5 url (mainnet)",
        "func": "const nettype = \"stacks-node-api.mainnet.stacks.co\"; // or use testnet\nconst contract = global.get(\"ftcontractnames[5][0]\"); //\nmsg.url = \"https://\" + nettype + \"/extended/v1/contract/\" + contract;// prior was /assets\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 2240,
        "wires": [
            []
        ]
    },
    {
        "id": "94ac4d22.7deab",
        "type": "function",
        "z": "f7442446.0c97f8",
        "name": "get contract 6 url (mainnet)",
        "func": "const nettype = \"stacks-node-api.mainnet.stacks.co\"; // or use testnet\nconst contract = global.get(\"ftcontractnames[6][0]\"); //\nmsg.url = \"https://\" + nettype + \"/extended/v1/contract/\" + contract;// prior was /assets\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 2360,
        "wires": [
            []
        ]
    },
    {
        "id": "106e6c2.0cc6094",
        "type": "function",
        "z": "f7442446.0c97f8",
        "name": "get contract 7 url (mainnet)",
        "func": "const nettype = \"stacks-node-api.mainnet.stacks.co\"; // or use testnet\nconst contract = global.get(\"ftcontractnames[7][0]\"); //\nmsg.url = \"https://\" + nettype + \"/extended/v1/contract/\" + contract;// prior was /assets\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 2480,
        "wires": [
            []
        ]
    },
    {
        "id": "6a40f95d.4e31a8",
        "type": "function",
        "z": "f7442446.0c97f8",
        "name": "get contract 8 url (mainnet)",
        "func": "const nettype = \"stacks-node-api.mainnet.stacks.co\"; // or use testnet\nconst contract = global.get(\"ftcontractnames[8][0]\"); //\nmsg.url = \"https://\" + nettype + \"/extended/v1/contract/\" + contract;// prior was /assets\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 2600,
        "wires": [
            []
        ]
    },
    {
        "id": "59423230.98fa8c",
        "type": "function",
        "z": "f7442446.0c97f8",
        "name": "get contract 9 url (mainnet)",
        "func": "const nettype = \"stacks-node-api.mainnet.stacks.co\"; // or use testnet\nconst contract = global.get(\"ftcontractnames[9][0]\"); //\nmsg.url = \"https://\" + nettype + \"/extended/v1/contract/\" + contract;// prior was /assets\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 2720,
        "wires": [
            []
        ]
    },
    {
        "id": "cf9bc937.711158",
        "type": "http request",
        "z": "42c07592.8d970c",
        "name": "Get Name",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 710,
        "y": 2280,
        "wires": [
            [
                "b23ec85d.55d538"
            ]
        ]
    },
    {
        "id": "a690cc07.004f",
        "type": "function",
        "z": "42c07592.8d970c",
        "name": "get depositaddress (global)",
        "func": "const depositaddress = global.get(\"depositaddress\");\n\nmsg.payload = depositaddress;\n\nmsg.url = \"https://stacks-node-api.mainnet.stacks.co/v1/addresses/stacks/\" + depositaddress;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 2280,
        "wires": [
            [
                "cf9bc937.711158"
            ]
        ]
    },
    {
        "id": "c5e25f05.bd30e",
        "type": "ui_template",
        "z": "42c07592.8d970c",
        "group": "e5d0847b.1daa38",
        "name": "Deruptar Profile Name",
        "order": 3,
        "width": "7",
        "height": "1",
        "format": "<h3>@{{msg.payload.names[0]}}</h3>\n\n\n\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 1080,
        "y": 2280,
        "wires": [
            []
        ]
    },
    {
        "id": "b23ec85d.55d538",
        "type": "json",
        "z": "42c07592.8d970c",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 870,
        "y": 2280,
        "wires": [
            [
                "c5e25f05.bd30e",
                "21555748.dd9e08"
            ]
        ]
    },
    {
        "id": "21555748.dd9e08",
        "type": "debug",
        "z": "42c07592.8d970c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 2320,
        "wires": []
    },
    {
        "id": "3b5db882.02c418",
        "type": "ui_template",
        "z": "42c07592.8d970c",
        "group": "be1bffc8.e254c",
        "name": "Results by Name (Found) Name",
        "order": 5,
        "width": "7",
        "height": "1",
        "format": "<h3>@{{msg.fqn}}</h3>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 1670,
        "y": 2840,
        "wires": [
            [
                "96347598.2acfc8"
            ]
        ]
    },
    {
        "id": "dd722558.2b5318",
        "type": "link out",
        "z": "42c07592.8d970c",
        "name": "pass to Global (tipjar)",
        "links": [
            "2a9327d3.da9838",
            "afe7d4f3.f51128",
            "71db9c.cffe9464"
        ],
        "x": 1255,
        "y": 2680,
        "wires": []
    },
    {
        "id": "62e646be.9c26b8",
        "type": "function",
        "z": "42c07592.8d970c",
        "name": "set address as tipjar",
        "func": "var tipjar = msg.payload.address;\nmsg.payload = tipjar;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 2680,
        "wires": [
            [
                "dd722558.2b5318"
            ]
        ]
    },
    {
        "id": "2a9327d3.da9838",
        "type": "link in",
        "z": "e83b2318.6f5c6",
        "name": "to bind Global (tipjar)",
        "links": [
            "dd722558.2b5318"
        ],
        "x": 155,
        "y": 940,
        "wires": [
            [
                "864b22e4.71216"
            ]
        ]
    },
    {
        "id": "864b22e4.71216",
        "type": "change",
        "z": "e83b2318.6f5c6",
        "name": "set tipjar",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "tipjar",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 500,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "8ec535fa.ab1a58",
        "type": "link in",
        "z": "42c07592.8d970c",
        "d": true,
        "name": "bind Feed (search found results avatar)",
        "links": [
            "6f6c31b5.bddbc",
            "923b4f39.9ff18"
        ],
        "x": 1475,
        "y": 2680,
        "wires": [
            []
        ]
    },
    {
        "id": "3fd4f9d4.f1dd46",
        "type": "function",
        "z": "42c07592.8d970c",
        "d": true,
        "name": "create a deruptar string",
        "func": "var depositaddress = msg.payload.address; //for search returns\n\nrawaddy = depositaddress.substring(4); //Trim first 4 digits\n\na1 = rawaddy.substr(0,4); // keep next 4 digits\n\nz1 = rawaddy.substring(rawaddy.length - 4); //keep last 4 digits\n\nmsg.payload = a1+z1; // concat both and pass it along\nmsg.deruptar = a1+z1;\nmsg.depositaddress = depositaddress;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1410,
        "y": 2600,
        "wires": [
            []
        ]
    },
    {
        "id": "dc4fdbd1.ca1f98",
        "type": "ui_button",
        "z": "42c07592.8d970c",
        "name": "",
        "group": "be1bffc8.e254c",
        "order": 3,
        "width": "3",
        "height": "1",
        "passthru": false,
        "label": "Send STX",
        "tooltip": "Send STX to this Principal",
        "color": "",
        "bgcolor": "",
        "icon": "fa-send",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 1610,
        "y": 2720,
        "wires": [
            [
                "1f44419e.2fde9e"
            ]
        ]
    },
    {
        "id": "1f44419e.2fde9e",
        "type": "function",
        "z": "42c07592.8d970c",
        "name": "pass to Wallet Tab",
        "func": "msg.payload = {\"tab\":\"Wallet\"};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1870,
        "y": 2720,
        "wires": [
            [
                "f8e9bb79.24bb58"
            ]
        ]
    },
    {
        "id": "f8e9bb79.24bb58",
        "type": "ui_ui_control",
        "z": "42c07592.8d970c",
        "name": "",
        "events": "all",
        "x": 2060,
        "y": 2720,
        "wires": [
            [
                "dc2144f0.744ed8"
            ]
        ]
    },
    {
        "id": "dc2144f0.744ed8",
        "type": "function",
        "z": "42c07592.8d970c",
        "name": "show Send STX group",
        "func": "msg.payload = {\n  \"group\": {\n    \"hide\": [\n      \"Wallet_ImportGen\",\n      \"Wallet_Keys\",\n      \"Wallet_WalletNav\",\n      \"Wallet_Receive\"\n    ],\n    \"show\": [\n      \"Wallet_Send\",\n      \"Wallet_Balance\",\n      \"Wallet_History_Mainnet\",\n      \"Wallet_History_Testnet\"\n    ],\n    \"focus\": true\n  }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2240,
        "y": 2720,
        "wires": [
            [
                "67abfefd.4ada9"
            ]
        ]
    },
    {
        "id": "67abfefd.4ada9",
        "type": "ui_ui_control",
        "z": "42c07592.8d970c",
        "name": "",
        "events": "all",
        "x": 2420,
        "y": 2720,
        "wires": [
            [
                "c02c8e3.5d9fd7"
            ]
        ]
    },
    {
        "id": "c02c8e3.5d9fd7",
        "type": "link out",
        "z": "42c07592.8d970c",
        "name": "Pass to STX Send",
        "links": [
            "6977afc.225a05"
        ],
        "x": 2535,
        "y": 2720,
        "wires": []
    },
    {
        "id": "6977afc.225a05",
        "type": "link in",
        "z": "53028f3b.590b5",
        "name": "Get from Gift STX",
        "links": [
            "c02c8e3.5d9fd7"
        ],
        "x": 175,
        "y": 1860,
        "wires": [
            [
                "ce57065a.7f52d8"
            ]
        ]
    },
    {
        "id": "ce57065a.7f52d8",
        "type": "function",
        "z": "53028f3b.590b5",
        "name": "get tipjar (global)",
        "func": "const tipjar = global.get(\"tipjar\");\n\nmsg.payload = {stxdestination: tipjar, stxnetwork: true};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1860,
        "wires": [
            [
                "c83da5a0.82f8f8"
            ]
        ]
    },
    {
        "id": "95a21aa3.20d1b8",
        "type": "ui_button",
        "z": "613e85c9.c6210c",
        "d": true,
        "name": "",
        "group": "93f1cccf.344e5",
        "order": 5,
        "width": "6",
        "height": "1",
        "passthru": false,
        "label": "Check for FT Trait Contract (Testnet)",
        "tooltip": "Manually check to see if you FT Trait Contract exists and is confirmed.",
        "color": "",
        "bgcolor": "",
        "icon": "fa-refresh",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 2650,
        "y": 700,
        "wires": [
            [
                "f819d63c.3ced18"
            ]
        ]
    },
    {
        "id": "31ccc6d3.5199ea",
        "type": "inject",
        "z": "613e85c9.c6210c",
        "name": "force view form",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 4220,
        "y": 840,
        "wires": [
            [
                "5bee0476.bd3d5c"
            ]
        ]
    },
    {
        "id": "723163e0.c1b44c",
        "type": "function",
        "z": "613e85c9.c6210c",
        "name": "show Mint FT Form",
        "func": "msg.payload = {\n  \"group\": {\n    \"hide\": [\n      \"Minting_MintNav\",\n      \"Minting_MintNFT\",\n      \"Minting_MintNFT_Trait\",\n      \"Minting_MintNFT_Form\",\n      \"Minting_MintFT_Trait\"\n    ],\n    \"show\": [\n      \"Minting_MintFT_Form\"\n    ],\n    \"focus\": true\n  }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 320,
        "wires": [
            [
                "9706e8dc.3274b8"
            ]
        ]
    },
    {
        "id": "f0d77659.2d1208",
        "type": "function",
        "z": "613e85c9.c6210c",
        "name": "show Mint NFT Form",
        "func": "msg.payload = {\n  \"group\": {\n    \"hide\": [\n      \"Minting_MintNav\",\n      \"Minting_MintNFT\",\n      \"Minting_MintNFT_Trait\",\n      \"Minting_MintFT_Form\",\n      \"Minting_MintFT_Trait\"\n    ],\n    \"show\": [\n      \"Minting_MintNFT_Form\"\n    ],\n    \"focus\": true\n  }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 400,
        "wires": [
            [
                "9706e8dc.3274b8"
            ]
        ]
    },
    {
        "id": "8db2ef07.c7d97",
        "type": "comment",
        "z": "613e85c9.c6210c",
        "name": "Relative to Minting Non-Fungible Tokens",
        "info": "",
        "x": 180,
        "y": 1100,
        "wires": []
    },
    {
        "id": "b6397430.6f5a18",
        "type": "comment",
        "z": "613e85c9.c6210c",
        "name": "Relative to Minting Fungible Tokens",
        "info": "",
        "x": 160,
        "y": 600,
        "wires": []
    },
    {
        "id": "86d0b79f.4c5488",
        "type": "file",
        "z": "42c07592.8d970c",
        "name": "append following.json",
        "filename": "following.json",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 3860,
        "y": 2760,
        "wires": [
            []
        ]
    },
    {
        "id": "54209208.f10dac",
        "type": "function",
        "z": "42c07592.8d970c",
        "name": "add follow prefunc",
        "func": "var following = global.get(\"searchinput\");\nvar filecontent = msg.payload;\n\nmsg.searchinput = following;\nmsg.filecontent = filecontent;\nmsg.payload = following;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3330,
        "y": 2760,
        "wires": [
            [
                "23efa4b6.33d88c"
            ]
        ]
    },
    {
        "id": "42cb42ff.22756c",
        "type": "debug",
        "z": "42c07592.8d970c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2890,
        "y": 2700,
        "wires": []
    },
    {
        "id": "8dbf40c7.b43c5",
        "type": "switch",
        "z": "42c07592.8d970c",
        "name": "bool switch",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2950,
        "y": 2820,
        "wires": [
            [
                "8e52579.d972ca8"
            ],
            [
                "fab269de.ff5318"
            ]
        ],
        "outputLabels": [
            "true is equal to adding a follower",
            "false is equal to removing a follower"
        ]
    },
    {
        "id": "8e52579.d972ca8",
        "type": "file in",
        "z": "42c07592.8d970c",
        "name": "get file as string",
        "filename": "following.json",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 3100,
        "y": 2760,
        "wires": [
            [
                "54209208.f10dac"
            ]
        ]
    },
    {
        "id": "23efa4b6.33d88c",
        "type": "switch",
        "z": "42c07592.8d970c",
        "name": "compare input to file",
        "property": "filecontent",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "searchinput",
                "vt": "global"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 3580,
        "y": 2760,
        "wires": [
            [],
            [
                "86d0b79f.4c5488",
                "5d3e5ae8.7040c4"
            ]
        ],
        "outputLabels": [
            "search input found in filecontent already",
            "not found thus add"
        ]
    },
    {
        "id": "96347598.2acfc8",
        "type": "file in",
        "z": "42c07592.8d970c",
        "name": "get file as string",
        "filename": "following.json",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 2000,
        "y": 2840,
        "wires": [
            [
                "9f4f6504.995968"
            ]
        ]
    },
    {
        "id": "9f4f6504.995968",
        "type": "function",
        "z": "42c07592.8d970c",
        "name": "prefunc",
        "func": "var searchinput = global.get(\"searchinput\");\nvar filecontent = msg.payload;\n\nmsg.searchinput = searchinput;\nmsg.filecontent = filecontent;\nmsg.payload = \"compare other props\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2180,
        "y": 2840,
        "wires": [
            [
                "4f7a2c8c.b2f6d4"
            ]
        ]
    },
    {
        "id": "4f7a2c8c.b2f6d4",
        "type": "switch",
        "z": "42c07592.8d970c",
        "name": "compare",
        "property": "filecontent",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "searchinput",
                "vt": "global"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2340,
        "y": 2840,
        "wires": [
            [
                "832de8a6.ae6458"
            ],
            [
                "561faf6b.5900e"
            ]
        ],
        "outputLabels": [
            "search input found in filecontent already",
            "not found thus add"
        ]
    },
    {
        "id": "832de8a6.ae6458",
        "type": "change",
        "z": "42c07592.8d970c",
        "name": "set true",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2500,
        "y": 2820,
        "wires": [
            [
                "840717c1.bd7348"
            ]
        ]
    },
    {
        "id": "561faf6b.5900e",
        "type": "change",
        "z": "42c07592.8d970c",
        "name": "set false",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2480,
        "y": 2880,
        "wires": [
            [
                "840717c1.bd7348"
            ]
        ]
    },
    {
        "id": "fab269de.ff5318",
        "type": "file in",
        "z": "42c07592.8d970c",
        "name": "get file as string",
        "filename": "following.json",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 3100,
        "y": 2880,
        "wires": [
            [
                "f7cff76a.b664f8",
                "9d17c146.bb772"
            ]
        ]
    },
    {
        "id": "f7cff76a.b664f8",
        "type": "function",
        "z": "42c07592.8d970c",
        "name": "remove follow prefunc",
        "func": "var name = global.get(\"searchinput\");//the searched named\nvar filecontent = msg.payload; //the users following list\n\nmsg.searchinput = name;//pass along to compare\nmsg.filecontent = filecontent;//pass along to compare\nmsg.payload = filecontent.replace(name,'');  //filecontent minus name searchinput\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3340,
        "y": 2880,
        "wires": [
            [
                "d1dbb3b9.7a7b6"
            ]
        ]
    },
    {
        "id": "d1dbb3b9.7a7b6",
        "type": "switch",
        "z": "42c07592.8d970c",
        "name": "compare input to file",
        "property": "filecontent",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "searchinput",
                "vt": "global"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 3580,
        "y": 2880,
        "wires": [
            [
                "5d3e5ae8.7040c4",
                "a574eb07.1c04e8"
            ],
            []
        ],
        "outputLabels": [
            "search input found in filecontent already thus remove",
            "not found thus can not remove"
        ]
    },
    {
        "id": "a574eb07.1c04e8",
        "type": "file",
        "z": "42c07592.8d970c",
        "name": "overwrite following.json",
        "filename": "following.json",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 3870,
        "y": 2880,
        "wires": [
            []
        ]
    },
    {
        "id": "9d17c146.bb772",
        "type": "debug",
        "z": "42c07592.8d970c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 3310,
        "y": 2820,
        "wires": []
    },
    {
        "id": "5d3e5ae8.7040c4",
        "type": "debug",
        "z": "42c07592.8d970c",
        "name": "update following debugger",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3880,
        "y": 2820,
        "wires": []
    },
    {
        "id": "455626dc.ed14f8",
        "type": "ui_form",
        "z": "42c07592.8d970c",
        "d": true,
        "name": "Chime Form",
        "label": "",
        "group": "51640c7f.5ee354",
        "order": 1,
        "width": "13",
        "height": "5",
        "options": [
            {
                "label": "Message",
                "value": "stxmemo",
                "type": "text",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "stxmemo": ""
        },
        "payload": "",
        "submit": "Post Chime",
        "cancel": "",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "x": 90,
        "y": 160,
        "wires": [
            [
                "2b85680d.02b5c8"
            ]
        ]
    },
    {
        "id": "d254b10f.e6fea",
        "type": "function",
        "z": "f7442446.0c97f8",
        "name": "get nft_events url (mainnet)",
        "func": "const nettype = \"stacks-node-api.mainnet.stacks.co\"; // or use testnet\nconst principal = global.get(\"depositaddress\"); // or use testnetdepositaddress for testnet\n\nmsg.url = \"https://\" + nettype + \"/extended/v1/address/\" + principal + \"/nft_events\";// to get NFT list of Principal address\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 460,
        "wires": [
            [
                "1caaf12c.cdafaf"
            ]
        ]
    },
    {
        "id": "1caaf12c.cdafaf",
        "type": "http request",
        "z": "f7442446.0c97f8",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "persist": false,
        "authType": "",
        "x": 1010,
        "y": 460,
        "wires": [
            [
                "7adfbc2c.2db574"
            ]
        ]
    },
    {
        "id": "7adfbc2c.2db574",
        "type": "json",
        "z": "f7442446.0c97f8",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1170,
        "y": 460,
        "wires": [
            [
                "3ec0ff84.583e8",
                "5c76db9c.570c14"
            ]
        ]
    },
    {
        "id": "5c76db9c.570c14",
        "type": "debug",
        "z": "f7442446.0c97f8",
        "name": "NFT DEBUG",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1390,
        "y": 500,
        "wires": []
    },
    {
        "id": "9d1dbe2e.9ce11",
        "type": "switch",
        "z": "f7442446.0c97f8",
        "name": "asset switch by type",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "bns::names",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "boom-nfts::boom",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "stacks-punks-v3::stacks-punks",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 1640,
        "y": 460,
        "wires": [
            [
                "b76fc6fd.da7518"
            ],
            [
                "5545088b.387458"
            ],
            [
                "8d0288ae.e94508"
            ],
            [
                "234629b5.289df6"
            ]
        ]
    },
    {
        "id": "230ea4cc.2ff1dc",
        "type": "debug",
        "z": "f7442446.0c97f8",
        "name": "NFT DEBUG",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1610,
        "y": 520,
        "wires": []
    },
    {
        "id": "8d0288ae.e94508",
        "type": "debug",
        "z": "f7442446.0c97f8",
        "name": "Punks DEBUG",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1900,
        "y": 520,
        "wires": []
    },
    {
        "id": "5545088b.387458",
        "type": "debug",
        "z": "f7442446.0c97f8",
        "name": "Boom DEBUG",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1900,
        "y": 480,
        "wires": []
    },
    {
        "id": "b76fc6fd.da7518",
        "type": "debug",
        "z": "f7442446.0c97f8",
        "name": "Names DEBUG",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1900,
        "y": 440,
        "wires": []
    },
    {
        "id": "234629b5.289df6",
        "type": "debug",
        "z": "f7442446.0c97f8",
        "name": "Other DEBUG",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1900,
        "y": 560,
        "wires": []
    },
    {
        "id": "d8bb8f70.0a2b",
        "type": "function",
        "z": "f7442446.0c97f8",
        "name": "pass to AssetsTemplate Tab",
        "func": "const contractid = msg.payload;\n\n\nmsg.contractid = contractid;\nmsg.payload = {\"tab\":\"AssetsTemplate\"};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1660,
        "y": 380,
        "wires": [
            [
                "2c98823d.b1860e"
            ]
        ]
    },
    {
        "id": "2c98823d.b1860e",
        "type": "ui_ui_control",
        "z": "f7442446.0c97f8",
        "name": "ui change",
        "events": "change",
        "x": 1880,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "37cb38c8.7dc0c8",
        "type": "function",
        "z": "42c07592.8d970c",
        "d": true,
        "name": "filter where sender_address is equal to followersdepositaddress (mainnet)",
        "func": "const obj = msg.payload;\nconst depositaddress = global.get(\"followersdepositaddress\"); //global variable needs to be array of principals\n\nconst filtered = obj.filter(by => by.sender_address === depositaddress); // \n\nmsg.payload = filtered;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1920,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "2b85680d.02b5c8",
        "type": "function",
        "z": "42c07592.8d970c",
        "name": "Send STX to a Feed Principal Address (Mainnet)",
        "func": "const network = new stacksNetwork.StacksMainnet(); // or StacksTestnet\nconst senderKey = global.get('stxprivkey'); //get the STX Private Key Stored Globally\n\n// skip automatic fee estimation\nconst fee = new BigNum(180);\nconst memo = msg.payload.stxmemo;\n\nconst txOptions = {\n    recipient: \"SP1T33SDB0Y1GE9WBN0X3G6MZ81XQG2XVNBHMRH1V\",\n    amount : new BigNum(10000),\n    fee,\n    senderKey,\n    network,\n    memo,\n    anchorMode: stacksTransactions.AnchorMode.Any //added to ensure 2.0.1 compatability\n};\n\nconst transaction = await stacksTransactions.makeSTXTokenTransfer(txOptions);\nconst broadcastTxn = await stacksTransactions.broadcastTransaction(transaction, network);\n\nmsg.payload = transaction;\nmsg.blockchain = \"0x\" + broadcastTxn;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "BigNum",
                "module": "bn.js"
            },
            {
                "var": "stacksTransactions",
                "module": "@stacks/transactions"
            },
            {
                "var": "stacksNetwork",
                "module": "@stacks/network"
            }
        ],
        "x": 360,
        "y": 160,
        "wires": [
            [
                "f2015d3.b4632a",
                "4054e8cc.1caa38"
            ]
        ]
    },
    {
        "id": "f2015d3.b4632a",
        "type": "function",
        "z": "42c07592.8d970c",
        "name": "txid to payload",
        "func": "var txid = msg.blockchain;\n\nmsg.payload = txid;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 160,
        "wires": [
            [
                "5072d2ea.5f07ec",
                "c83cafa4.9d688"
            ]
        ]
    },
    {
        "id": "5072d2ea.5f07ec",
        "type": "ui_toast",
        "z": "42c07592.8d970c",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "Show In Feed",
        "cancel": "Send Another Chime",
        "raw": false,
        "topic": "",
        "name": "Transaction ID Popup",
        "x": 960,
        "y": 160,
        "wires": [
            [
                "92552f9a.7d39",
                "bb9252f3.b00b1"
            ]
        ]
    },
    {
        "id": "92552f9a.7d39",
        "type": "switch",
        "z": "42c07592.8d970c",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Show In Feed",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1190,
        "y": 160,
        "wires": [
            [
                "87ac835d.50297"
            ],
            []
        ]
    },
    {
        "id": "bb9252f3.b00b1",
        "type": "debug",
        "z": "42c07592.8d970c",
        "name": "mainnet send debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1380,
        "y": 80,
        "wires": []
    },
    {
        "id": "87ac835d.50297",
        "type": "function",
        "z": "42c07592.8d970c",
        "name": "pass to Feed Tab",
        "func": "msg.payload = {\"tab\":\"Feed\"};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 120,
        "wires": [
            [
                "3bc53968.d44ff6"
            ]
        ]
    },
    {
        "id": "3bc53968.d44ff6",
        "type": "ui_ui_control",
        "z": "42c07592.8d970c",
        "name": "ui change",
        "events": "change",
        "x": 1560,
        "y": 120,
        "wires": [
            [
                "240287b0.ac0568"
            ]
        ]
    },
    {
        "id": "6219a56e.f5e32c",
        "type": "ui_ui_control",
        "z": "42c07592.8d970c",
        "name": "",
        "events": "all",
        "x": 2000,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "240287b0.ac0568",
        "type": "function",
        "z": "42c07592.8d970c",
        "name": "show Feed Feed (hide misc)",
        "func": "msg.payload = {\n  \"group\": {\n    \"hide\": [\n      \"Feed_Profile\",\n      \"Feed_RegisterName\",\n      \"Feed_NewPost\",\n      \"Feed_byContractName\",\n      \"Feed_byTokenName\",\n      \"Feed_byPrincipleAddress\",\n      \"Feed_byTransactionID\",\n      \"Feed_byName\",\n      \"Feed_byChimeDeruptar\"\n    ],\n    \"show\": [\n      \"Feed_Header\",\n      \"Feed_Feed\"\n    ],\n    \"focus\": true\n  }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1780,
        "y": 120,
        "wires": [
            [
                "6219a56e.f5e32c"
            ]
        ]
    },
    {
        "id": "c83cafa4.9d688",
        "type": "debug",
        "z": "42c07592.8d970c",
        "name": "mainnet send debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 120,
        "wires": []
    },
    {
        "id": "4054e8cc.1caa38",
        "type": "debug",
        "z": "42c07592.8d970c",
        "name": "mainnet send debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 120,
        "wires": []
    },
    {
        "id": "b63240a3.7180f",
        "type": "inject",
        "z": "42c07592.8d970c",
        "name": "every 10m check",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 1140,
        "wires": [
            [
                "8e77cb03.8eda78",
                "d0c4fb2c.082848",
                "28edd09c.affd2"
            ]
        ]
    },
    {
        "id": "8e77cb03.8eda78",
        "type": "function",
        "z": "42c07592.8d970c",
        "d": true,
        "name": "get Feed Principal (legacy)",
        "func": "const feedprincipal = \"SP1T33SDB0Y1GE9WBN0X3G6MZ81XQG2XVNBHMRH1V\";//Dapp Feed Principal Address\n\nmsg.payload = feedprincipal;\n\nmsg.url = \"https://stacks-node-api.mainnet.stacks.co/extended/v1/address/\" + feedprincipal + \"/transactions\";\nreturn msg;\n\n\n//feed will derive from contract soon\n//https://explorer.stacks.co/txid/ST1ZG09W7XN7S1WH5F06YN25C5CGK2RE01D6CSA1H.luv",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 840,
        "wires": [
            [
                "60bf58cb.035fe8"
            ]
        ]
    },
    {
        "id": "60bf58cb.035fe8",
        "type": "http request",
        "z": "42c07592.8d970c",
        "name": "Get",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 690,
        "y": 840,
        "wires": [
            [
                "dc1cc465.cc24d8"
            ]
        ]
    },
    {
        "id": "dc1cc465.cc24d8",
        "type": "json",
        "z": "42c07592.8d970c",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 810,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "f5c0cc90.325be",
        "type": "ui_template",
        "z": "42c07592.8d970c",
        "group": "eaf2cbdd.546078",
        "name": "Feed of Chimes",
        "order": 1,
        "width": 13,
        "height": "12",
        "format": "<!DOCTYPE html>\n<html>\n<head>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n<style>\nbody {\n  font-family: 'Asap', sans-serif;\n  font-family: 'Roboto', sans-serif;\n\n}\na {\n  color: #34af07;\n}\n\na:hover {\n  color: Red;\n}\n\n\nimg {\n  max-width:100%;\n}\n.avator {\n  border-radius:100px;\n  width:64px;\n  margin-right: 5px;\n  padding-top: 5px;\n}\n\n\n.chime-wrap {\n  width: 85%;    \n  max-width:100%;\n  color: White;\n  margin: 0 auto;\n  margin-top: 8px;\n  padding: 10px;\n  border-bottom: 1px solid #34af07;\n}\n\n.chime-header {\n  display: flex;\n  align-items:flex-start;\n  font-size:14px;\n}\n.chime-header-info {\n  font-weight:bold;\n}\n.chime-header-info span {\n  font-weight:normal;\n  margin-left: 5px;\n}\n.chime-header-info p {\n  font-weight:normal;\n  margin-top: 5px;\n  \n}\n.chime-img-wrap {\n  padding-left: 30px;\n  width: 50%;\n  max-width: 50%;\n  margin-left: 100px;\n}\n\n.chime-info-counts {\n  display: flex;\n  margin-left: 125px;\n  margin-top: 10px;\n}\n.chime-info-counts div {\n  display: flex;\n  margin-right: 20px;\n}\n.chime-info-counts div svg {\n  margin-right: 10px;\n}\n@media screen and (max-width:100%){\n  body {\n    padding-left: 2px;\n    padding-right: 2px;\n  }\n  .chime-header {\n    flex-direction:column;\n  }\n  .chime-header img {\n    margin-bottom: 10px;\n  }\n  .chime-header-info p {\n    color:Black;\n    margin-bottom: 10px;\n  }\n  .chime-img-wrap {\n    width: 50%;\n    max-width: 50%;\n    margin-left: 100px;\n  }\n  .chime-info-counts {\n  display: flex;\n  margin-left: 0;\n}\n.chime-info-counts div {\n  margin-right: 10px;\n}\n}\n</style>\n</head>\n\n<body>\n<link href=\"https://fonts.googleapis.com/css?family=Asap\" rel=\"stylesheet\">\n<link href=\"https://fonts.googleapis.com/css?family=Roboto\" rel=\"stylesheet\">\n\n\n\n<div class=\"chime-wrap\" ng-repeat=\"obj in msg.payload\">\n  <div class=\"chime-header\">\n    <div style=\"position: relative; width: 120px; height: 120px;\" class=\"avator\" ng-click=\"send({topic:'lookup', payload:obj.sender})\">\n        <img src=\"https://raw.githubusercontent.com/cryptocracy/deruptars/main/bg/{{obj.bg}}_bg.png\" alt=\"\" style=\"position: absolute; top: 0; left: 0;\">\n        <img src=\"https://raw.githubusercontent.com/cryptocracy/deruptars/main/skin/{{obj.skin}}_skin.png\" alt=\"\" style=\"position: absolute; top: 0; left: 0;\">\n        <img src=\"https://raw.githubusercontent.com/cryptocracy/deruptars/main/eyes/{{obj.eyes}}_eyes.png\" alt=\"\" style=\"position: absolute; top: 0; left: 0;\">\n        <img src=\"https://raw.githubusercontent.com/cryptocracy/deruptars/main/teeth/{{obj.teeth}}_teeth.png\" alt=\"\" style=\"position: absolute; top: 0; left: 0;\">\n        <img src=\"https://raw.githubusercontent.com/cryptocracy/deruptars/main/lips/{{obj.lips}}_lips.png\" alt=\"\" style=\"position: absolute; top: 0; left: 0;\">\n        <img src=\"https://raw.githubusercontent.com/cryptocracy/deruptars/main/hair/{{obj.hair}}_hair.png\" alt=\"\" style=\"position: absolute; top: 0; left: 0;\">\n        <img src=\"https://raw.githubusercontent.com/cryptocracy/deruptars/main/hat/{{obj.hat}}_hat.png\" alt=\"\" style=\"position: absolute; top: 0; left: 0;\">\n        <img src=\"https://raw.githubusercontent.com/cryptocracy/deruptars/main/chest/{{obj.chest}}_chest.png\" alt=\"\" style=\"position: absolute; top: 0; left: 0;\">\n    </div>\n<!--    <img src=\"https://raw.githubusercontent.com/cryptocracy/images/master/512x512.png\" alt=\"\" class=\"avator\"> -->\n    <div class=\"chime-header-info\">\n      <small>@{{obj.sender}}</small><span></span><span> </span>\n      <span></span>\n      <h2>{{obj.memo}}</h2>\n    </div>\n  </div>\n  <div class=\"chime-img-wrap\">\n  <img src=\"{{obj.link}}\" alt=\"\" class=\"chime-img\">\n  </div>\n  <div class=\"chime-info-counts\">\n    <div class=\"comments\">\n      <a href=\"\"><i class=\"fa fa-comment\" aria-hidden=\"true\"></i></a>\n      <div class=\"comment-count\">0</div>\n    </div>\n    \n    <div class=\"retweets\">\n      <a href=\"\"><i class=\"fa fa-retweet\" aria-hidden=\"true\"></i></a>\n      <div class=\"rechime-count\">0</div>\n    </div>\n    \n    <div class=\"likes\">\n<!--      <svg class=\"feather feather-heart sc-dnqmqq jxshSx\" xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" aria-hidden=\"true\"><path d=\"M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z\"></path></svg> -->\n      <a ng-click=\"send({topic:'Tip?', payload:obj.memo, chime:obj.idx, idx:obj.idx})\"><i class=\"fa fa-heart\" aria-hidden=\"true\"></i></a>\n      <div class=\"likes-count\">{{obj.likecount}}</div>\n    </div>\n    \n    <div class=\"link\">\n        <a href=\"{{obj.link}}\" target=\"_blank\" title=\"Open External Link\"><i class=\"fa fa-link\" aria-hidden=\"true\"></i></a>\n    </div>\n    \n    <div class=\"idx\">\n        <small><small><small>Chime ID: {{obj.idx}}</small></small></small>\n    </div>\n    \n    <div class=\"tx\">\n        <a href=\"https://explorer.stacks.co/txid/{{obj.txid}}?chain=mainnet\" target=\"_blank\" title=\"View Chime In Explorer\"><i class=\"fa fa-search\" aria-hidden=\"true\"></i></a>\n    </div>\n    \n  </div>\n</div>\n</body>\n</html>\n\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 2160,
        "y": 1440,
        "wires": [
            [
                "a6e8599b.5f8d08",
                "65512d29.a7fb44"
            ]
        ]
    },
    {
        "id": "8dd30082.5b0a1",
        "type": "function",
        "z": "42c07592.8d970c",
        "d": true,
        "name": "DeHex Memo (single)",
        "func": "var rawmemo = msg.payload.results[0].token_transfer.memo;//a raw memo\n\nvar hex  = rawmemo.toString();//force rawmemo to string\n\nvar memo = '';//decode of memo\nfor (var n = 0; n < hex.length; n += 2) {\n\tmemo += String.fromCharCode(parseInt(hex.substr(n, 2), 16));\n}\n\nmsg.payload = memo;//pass along decoded ascii version of memo\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "stacksTransactions",
                "module": "@stacks/transactions"
            }
        ],
        "x": 1760,
        "y": 500,
        "wires": [
            [
                "4dc4d113.bfb6d"
            ]
        ]
    },
    {
        "id": "4dc4d113.bfb6d",
        "type": "debug",
        "z": "42c07592.8d970c",
        "name": "Buidl Chime Debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2030,
        "y": 500,
        "wires": []
    },
    {
        "id": "9b3bee72.a269b",
        "type": "ui_template",
        "z": "42c07592.8d970c",
        "d": true,
        "group": "eaf2cbdd.546078",
        "name": "Default Home Feed BASIC",
        "order": 1,
        "width": 13,
        "height": 8,
        "format": "{{msg.payload.results}}",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 1780,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "15876e21.3350c2",
        "type": "function",
        "z": "42c07592.8d970c",
        "d": true,
        "name": "deduce a memos array (old)",
        "func": "var rawArray = msg.payload.results;\n\n\nvar memos = rawArray.map((obj) => {\n    return obj.token_transfer.memo.toString()\n});\n\n\nmsg.payload = memos;\nmsg.topic = \"memos\";\nreturn msg;\n\n\n//DeHex Memo example:\n/*var rawmemo = msg.payload.results[0].token_transfer.memo;//a raw memo\n\nvar hex  = rawmemo.toString();//force rawmemo to string\n\nvar memo = '';//decode of memo\nfor (var n = 0; n < hex.length; n += 2) {\n\tmemo += String.fromCharCode(parseInt(hex.substr(n, 2), 16));\n}\n\nmsg.payload = memo;//pass along decoded ascii version of memo*/",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1780,
        "y": 940,
        "wires": [
            [
                "3bf81293.d2ed4e"
            ]
        ]
    },
    {
        "id": "70f7a50e.833f6c",
        "type": "debug",
        "z": "42c07592.8d970c",
        "d": true,
        "name": "Chimes Debugger",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1750,
        "y": 680,
        "wires": []
    },
    {
        "id": "be74617e.c219f",
        "type": "ui_template",
        "z": "42c07592.8d970c",
        "d": true,
        "group": "eaf2cbdd.546078",
        "name": "Default Home Feed of Chimes (20 chimes)",
        "order": 1,
        "width": 13,
        "height": 8,
        "format": "<!DOCTYPE html>\n<html>\n<head>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n<style>\nbody {\n  font-family: 'Asap', sans-serif;\n  font-family: 'Roboto', sans-serif;\n\n}\nimg {\n  max-width:100%;\n}\n.avator {\n  border-radius:100px;\n  width:48px;\n  margin-right: 15px;\n}\n\n\n.chime-wrap {\n  max-width:490px;\n  color: White;\n  margin: 0 auto;\n  margin-top: 15px;\n  padding: 30px;\n  border-bottom: 1px solid #0040FF;\n}\n\n.chime-header {\n  display: flex;\n  align-items:flex-start;\n  font-size:14px;\n}\n.chime-header-info {\n  font-weight:bold;\n}\n.chime-header-info span {\n  font-weight:normal;\n  margin-left: 5px;\n}\n.chime-header-info p {\n  font-weight:normal;\n  margin-top: 5px;\n  \n}\n.chime-img-wrap {\n  padding-left: 60px;\n}\n\n.chime-info-counts {\n  display: flex;\n  margin-left: 60px;\n  margin-top: 10px;\n}\n.chime-info-counts div {\n  display: flex;\n  margin-right: 20px;\n}\n.chime-info-counts div svg {\n  margin-right: 10px;\n}\n@media screen and (max-width:430px){\n  body {\n    padding-left: 20px;\n    padding-right: 20px;\n  }\n  .chime-header {\n    flex-direction:column;\n  }\n  .chime-header img {\n    margin-bottom: 10px;\n  }\n  .chime-header-info p {\n    color:Black;\n    margin-bottom: 30px;\n  }\n  .chime-img-wrap {\n    padding-left: 0;\n  }\n  .chime-info-counts {\n  display: flex;\n  margin-left: 0;\n}\n.chime-info-counts div {\n  margin-right: 10px;\n}\n}\n</style>\n</head>\n\n<body>\n<link href=\"https://fonts.googleapis.com/css?family=Asap\" rel=\"stylesheet\">\n<link href=\"https://fonts.googleapis.com/css?family=Roboto\" rel=\"stylesheet\">\n\n\n<!--Chime 0 Start-->\n<div class=\"chime-wrap\">\n  <div class=\"chime-header\">\n    <img src=\"https://raw.githubusercontent.com/cryptocracy/images/master/512x512.png\" alt=\"\" class=\"avator\">\n    <div class=\"chime-header-info\">\n      @PlaceHolder.BTC<span></span><span> <small><small>{{msg.payload.results[0].burn_block_time_iso}}</small></small></span>\n      <p>{{msg.payload.results[0].token_transfer.memo}}</p>\n    </div>\n  </div>\n<!--  <div class=\"chime-img-wrap\">\n    <img src=\"https://pbs.twimg.com/media/Dgti2h0WkAEUPmT.png\" alt=\"\" class=\"chime-img\">\n  </div>-->\n  <div class=\"chime-info-counts\">\n    <div class=\"comments\">\n      <svg class=\"feather feather-message-circle sc-dnqmqq jxshSx\" xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" aria-hidden=\"true\"><path d=\"M21 11.5a8.38 8.38 0 0 1-.9 3.8 8.5 8.5 0 0 1-7.6 4.7 8.38 8.38 0 0 1-3.8-.9L3 21l1.9-5.7a8.38 8.38 0 0 1-.9-3.8 8.5 8.5 0 0 1 4.7-7.6 8.38 8.38 0 0 1 3.8-.9h.5a8.48 8.48 0 0 1 8 8v.5z\"></path></svg>\n      <div class=\"comment-count\">1</div>\n    </div>\n    \n    <div class=\"retweets\">\n      <svg class=\"feather feather-repeat sc-dnqmqq jxshSx\" xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" aria-hidden=\"true\"><polyline points=\"17 1 21 5 17 9\"></polyline><path d=\"M3 11V9a4 4 0 0 1 4-4h14\"></path><polyline points=\"7 23 3 19 7 15\"></polyline><path d=\"M21 13v2a4 4 0 0 1-4 4H3\"></path></svg>\n      <div class=\"retweet-count\">2</div>\n    </div>\n    \n    <div class=\"likes\">\n      <svg class=\"feather feather-heart sc-dnqmqq jxshSx\" xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" aria-hidden=\"true\"><path d=\"M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z\"></path></svg>\n      <div class=\"likes-count\">3</div>\n    </div>\n    \n    <div class=\"message\">\n      <svg class=\"feather feather-send sc-dnqmqq jxshSx\" xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" aria-hidden=\"true\"><line x1=\"22\" y1=\"2\" x2=\"11\" y2=\"13\"></line><polygon points=\"22 2 15 22 11 13 2 9 22 2\"></polygon></svg>\n    </div>\n  </div>\n</div>\n<!--Chime 0 End-->\n\n<!--Chime 1 Start-->\n<div class=\"chime-wrap\">\n  <div class=\"chime-header\">\n    <img src=\"https://raw.githubusercontent.com/cryptocracy/images/master/512x512.png\" alt=\"\" class=\"avator\">\n    <div class=\"chime-header-info\">\n      @PlaceHolder.BTC<span></span><span> <small><small>{{msg.payload.results[1].burn_block_time_iso}}</small></small></span>\n      <p>{{msg.payload.results[1].token_transfer.memo}}</p>\n    </div>\n  </div>\n<!--  <div class=\"chime-img-wrap\">\n    <img src=\"https://pbs.twimg.com/media/Dgti2h0WkAEUPmT.png\" alt=\"\" class=\"chime-img\">\n  </div>-->\n  <div class=\"chime-info-counts\">\n    <div class=\"comments\">\n      <svg class=\"feather feather-message-circle sc-dnqmqq jxshSx\" xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" aria-hidden=\"true\"><path d=\"M21 11.5a8.38 8.38 0 0 1-.9 3.8 8.5 8.5 0 0 1-7.6 4.7 8.38 8.38 0 0 1-3.8-.9L3 21l1.9-5.7a8.38 8.38 0 0 1-.9-3.8 8.5 8.5 0 0 1 4.7-7.6 8.38 8.38 0 0 1 3.8-.9h.5a8.48 8.48 0 0 1 8 8v.5z\"></path></svg>\n      <div class=\"comment-count\">1</div>\n    </div>\n    \n    <div class=\"retweets\">\n      <svg class=\"feather feather-repeat sc-dnqmqq jxshSx\" xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" aria-hidden=\"true\"><polyline points=\"17 1 21 5 17 9\"></polyline><path d=\"M3 11V9a4 4 0 0 1 4-4h14\"></path><polyline points=\"7 23 3 19 7 15\"></polyline><path d=\"M21 13v2a4 4 0 0 1-4 4H3\"></path></svg>\n      <div class=\"retweet-count\">2</div>\n    </div>\n    \n    <div class=\"likes\">\n      <svg class=\"feather feather-heart sc-dnqmqq jxshSx\" xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" aria-hidden=\"true\"><path d=\"M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z\"></path></svg>\n      <div class=\"likes-count\">3</div>\n    </div>\n    \n    <div class=\"message\">\n      <svg class=\"feather feather-send sc-dnqmqq jxshSx\" xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" aria-hidden=\"true\"><line x1=\"22\" y1=\"2\" x2=\"11\" y2=\"13\"></line><polygon points=\"22 2 15 22 11 13 2 9 22 2\"></polygon></svg>\n    </div>\n  </div>\n</div>\n<!--Chime 1 End-->\n\n<!--Chime 2 Start-->\n<div class=\"chime-wrap\">\n  <div class=\"chime-header\">\n    <img src=\"https://raw.githubusercontent.com/cryptocracy/images/master/512x512.png\" alt=\"\" class=\"avator\">\n    <div class=\"chime-header-info\">\n      @PlaceHolder.BTC<span></span><span> <small><small>{{msg.payload.results[2].burn_block_time_iso}}</small></small></span>\n      <p>{{msg.payload.results[2].token_transfer.memo}}</p>\n    </div>\n  </div>\n<!--  <div class=\"chime-img-wrap\">\n    <img src=\"https://pbs.twimg.com/media/Dgti2h0WkAEUPmT.png\" alt=\"\" class=\"chime-img\">\n  </div>-->\n  <div class=\"chime-info-counts\">\n    <div class=\"comments\">\n      <svg class=\"feather feather-message-circle sc-dnqmqq jxshSx\" xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" aria-hidden=\"true\"><path d=\"M21 11.5a8.38 8.38 0 0 1-.9 3.8 8.5 8.5 0 0 1-7.6 4.7 8.38 8.38 0 0 1-3.8-.9L3 21l1.9-5.7a8.38 8.38 0 0 1-.9-3.8 8.5 8.5 0 0 1 4.7-7.6 8.38 8.38 0 0 1 3.8-.9h.5a8.48 8.48 0 0 1 8 8v.5z\"></path></svg>\n      <div class=\"comment-count\">1</div>\n    </div>\n    \n    <div class=\"retweets\">\n      <svg class=\"feather feather-repeat sc-dnqmqq jxshSx\" xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" aria-hidden=\"true\"><polyline points=\"17 1 21 5 17 9\"></polyline><path d=\"M3 11V9a4 4 0 0 1 4-4h14\"></path><polyline points=\"7 23 3 19 7 15\"></polyline><path d=\"M21 13v2a4 4 0 0 1-4 4H3\"></path></svg>\n      <div class=\"retweet-count\">2</div>\n    </div>\n    \n    <div class=\"likes\">\n      <svg class=\"feather feather-heart sc-dnqmqq jxshSx\" xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" aria-hidden=\"true\"><path d=\"M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z\"></path></svg>\n      <div class=\"likes-count\">3</div>\n    </div>\n    \n    <div class=\"message\">\n      <svg class=\"feather feather-send sc-dnqmqq jxshSx\" xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" aria-hidden=\"true\"><line x1=\"22\" y1=\"2\" x2=\"11\" y2=\"13\"></line><polygon points=\"22 2 15 22 11 13 2 9 22 2\"></polygon></svg>\n    </div>\n  </div>\n</div>\n<!--Chime 2 End-->\n\n\n</body>\n</html>\n\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 1830,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "88137d96.fb83",
        "type": "function",
        "z": "42c07592.8d970c",
        "name": "deduce a senders array",
        "func": "var rawArray = msg.payload.results;\n\n\nvar principals = rawArray.map((obj) => {\n    return obj.sender_address.toString()\n});\n\n\nmsg.payload = principals;\nmsg.topic = \"senders\";\nreturn msg;\n\n\n//DeHex Memo example:\n/*var rawmemo = msg.payload.results[0].token_transfer.memo;//a raw memo\n\nvar hex  = rawmemo.toString();//force rawmemo to string\n\nvar memo = '';//decode of memo\nfor (var n = 0; n < hex.length; n += 2) {\n\tmemo += String.fromCharCode(parseInt(hex.substr(n, 2), 16));\n}\n\nmsg.payload = memo;//pass along decoded ascii version of memo*/",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1770,
        "y": 760,
        "wires": [
            [
                "3bf81293.d2ed4e"
            ]
        ]
    },
    {
        "id": "3bf81293.d2ed4e",
        "type": "debug",
        "z": "42c07592.8d970c",
        "d": true,
        "name": "Chime Chunks Debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2120,
        "y": 720,
        "wires": []
    },
    {
        "id": "8abc1729.379588",
        "type": "function",
        "z": "42c07592.8d970c",
        "name": "deduce a txids array",
        "func": "var rawArray = msg.payload.results;\n\n\nvar txids = rawArray.map((obj) => {\n    return obj.tx_id.toString()\n});\n\n\nmsg.payload = txids;\nmsg.topic = \"txids\";\nreturn msg;\n\n\n//DeHex Memo example:\n/*var rawmemo = msg.payload.results[0].token_transfer.memo;//a raw memo\n\nvar hex  = rawmemo.toString();//force rawmemo to string\n\nvar memo = '';//decode of memo\nfor (var n = 0; n < hex.length; n += 2) {\n\tmemo += String.fromCharCode(parseInt(hex.substr(n, 2), 16));\n}\n\nmsg.payload = memo;//pass along decoded ascii version of memo*/",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1760,
        "y": 720,
        "wires": [
            [
                "3bf81293.d2ed4e"
            ]
        ]
    },
    {
        "id": "aedfbd23.ce37d",
        "type": "function",
        "z": "42c07592.8d970c",
        "name": "deduce a times array",
        "func": "var rawArray = msg.payload.results;\n\n\nvar isotime = rawArray.map((obj) => {\n    return obj.burn_block_time_iso.toString()\n});\n\n\nmsg.payload = isotime;\nmsg.topic = \"times\";\nreturn msg;\n\n\n//DeHex Memo example:\n/*var rawmemo = msg.payload.results[0].token_transfer.memo;//a raw memo\n\nvar hex  = rawmemo.toString();//force rawmemo to string\n\nvar memo = '';//decode of memo\nfor (var n = 0; n < hex.length; n += 2) {\n\tmemo += String.fromCharCode(parseInt(hex.substr(n, 2), 16));\n}\n\nmsg.payload = memo;//pass along decoded ascii version of memo*/",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1760,
        "y": 800,
        "wires": [
            [
                "3bf81293.d2ed4e"
            ]
        ]
    },
    {
        "id": "595348d0.ff8358",
        "type": "debug",
        "z": "42c07592.8d970c",
        "d": true,
        "name": "Chimes Array Reconstructed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2200,
        "y": 1540,
        "wires": []
    },
    {
        "id": "192b5a27.e2e4a6",
        "type": "join",
        "z": "42c07592.8d970c",
        "name": "join arrays",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "6",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1510,
        "y": 1440,
        "wires": [
            [
                "1979d565.8b521b"
            ]
        ]
    },
    {
        "id": "fe28f1c6.c1917",
        "type": "function",
        "z": "42c07592.8d970c",
        "d": true,
        "name": "form chimes ",
        "func": "let data = msg.payload\nlet result = []\n\ndata.memos.forEach((el, index) => {\n    result.push(\n        {\n            \"memo\": Buffer.from(data.memos[index].slice(2), \"hex\").toString('ascii'),\n            \"txid\": data.txids[index],\n            \"sender\": data.senders[index],\n            \"time\": data.times[index].substring(0, 19).replace('T', ' ')\n        }\n    )\n})\n\nmsg.payload = result;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "17a4a958.904be7",
        "type": "ui_template",
        "z": "42c07592.8d970c",
        "d": true,
        "group": "eaf2cbdd.546078",
        "name": "Default Home Feed of Chimes (bu)",
        "order": 1,
        "width": 13,
        "height": 8,
        "format": "<!DOCTYPE html>\n<html>\n<head>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n<style>\nbody {\n  font-family: 'Asap', sans-serif;\n  font-family: 'Roboto', sans-serif;\n\n}\nimg {\n  max-width:100%;\n}\n.avator {\n  border-radius:100px;\n  width:48px;\n  margin-right: 15px;\n}\n\n\n.chime-wrap {\n  max-width:490px;\n  color: White;\n  margin: 0 auto;\n  margin-top: 15px;\n  padding: 30px;\n  border-bottom: 1px solid #0040FF;\n}\n\n.chime-header {\n  display: flex;\n  align-items:flex-start;\n  font-size:14px;\n}\n.chime-header-info {\n  font-weight:bold;\n}\n.chime-header-info span {\n  font-weight:normal;\n  margin-left: 5px;\n}\n.chime-header-info p {\n  font-weight:normal;\n  margin-top: 5px;\n  \n}\n.chime-img-wrap {\n  padding-left: 60px;\n}\n\n.chime-info-counts {\n  display: flex;\n  margin-left: 60px;\n  margin-top: 10px;\n}\n.chime-info-counts div {\n  display: flex;\n  margin-right: 20px;\n}\n.chime-info-counts div svg {\n  margin-right: 10px;\n}\n@media screen and (max-width:430px){\n  body {\n    padding-left: 20px;\n    padding-right: 20px;\n  }\n  .chime-header {\n    flex-direction:column;\n  }\n  .chime-header img {\n    margin-bottom: 10px;\n  }\n  .chime-header-info p {\n    color:Black;\n    margin-bottom: 30px;\n  }\n  .chime-img-wrap {\n    padding-left: 0;\n  }\n  .chime-info-counts {\n  display: flex;\n  margin-left: 0;\n}\n.chime-info-counts div {\n  margin-right: 10px;\n}\n}\n</style>\n</head>\n\n<body>\n<link href=\"https://fonts.googleapis.com/css?family=Asap\" rel=\"stylesheet\">\n<link href=\"https://fonts.googleapis.com/css?family=Roboto\" rel=\"stylesheet\">\n\n\n\n<div class=\"chime-wrap\" ng-repeat=\"obj in msg.payload.results\">\n  <div class=\"chime-header\">\n    <img src=\"https://raw.githubusercontent.com/cryptocracy/images/master/512x512.png\" alt=\"\" class=\"avator\">\n    <div class=\"chime-header-info\">\n      @PlaceHolder.BTC<span></span><span> <small><small>{{obj.burn_block_time_iso}}</small></small></span>\n      <p>{{obj.token_transfer.memo}}</p>\n    </div>\n  </div>\n<!--  <div class=\"chime-img-wrap\">\n    <img src=\"https://pbs.twimg.com/media/Dgti2h0WkAEUPmT.png\" alt=\"\" class=\"chime-img\">\n  </div>-->\n  <div class=\"chime-info-counts\">\n    <div class=\"comments\">\n      <svg class=\"feather feather-message-circle sc-dnqmqq jxshSx\" xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" aria-hidden=\"true\"><path d=\"M21 11.5a8.38 8.38 0 0 1-.9 3.8 8.5 8.5 0 0 1-7.6 4.7 8.38 8.38 0 0 1-3.8-.9L3 21l1.9-5.7a8.38 8.38 0 0 1-.9-3.8 8.5 8.5 0 0 1 4.7-7.6 8.38 8.38 0 0 1 3.8-.9h.5a8.48 8.48 0 0 1 8 8v.5z\"></path></svg>\n      <div class=\"comment-count\">1</div>\n    </div>\n    \n    <div class=\"retweets\">\n      <svg class=\"feather feather-repeat sc-dnqmqq jxshSx\" xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" aria-hidden=\"true\"><polyline points=\"17 1 21 5 17 9\"></polyline><path d=\"M3 11V9a4 4 0 0 1 4-4h14\"></path><polyline points=\"7 23 3 19 7 15\"></polyline><path d=\"M21 13v2a4 4 0 0 1-4 4H3\"></path></svg>\n      <div class=\"retweet-count\">2</div>\n    </div>\n    \n    <div class=\"likes\">\n      <svg class=\"feather feather-heart sc-dnqmqq jxshSx\" xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" aria-hidden=\"true\"><path d=\"M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z\"></path></svg>\n      <div class=\"likes-count\">3</div>\n    </div>\n    \n    <div class=\"message\">\n      <svg class=\"feather feather-send sc-dnqmqq jxshSx\" xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" aria-hidden=\"true\"><line x1=\"22\" y1=\"2\" x2=\"11\" y2=\"13\"></line><polygon points=\"22 2 15 22 11 13 2 9 22 2\"></polygon></svg>\n    </div>\n  </div>\n</div>\n</body>\n</html>\n\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 1800,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "1f83c8ac.2cb977",
        "type": "function",
        "z": "42c07592.8d970c",
        "name": "Deruptar Tester",
        "func": "var depositaddress = msg.payload; //for search returns\n\nvar rawaddy = depositaddress.substring(4); //Trim first 4 digits\n\nvar a1 = rawaddy.substr(0,4); // keep next 4 digits\nvar z1 = rawaddy.substring(rawaddy.length - 4); //keep last 4 digits\n\nvar bg = rawaddy.substr(0,1);\nvar skin = rawaddy.substr(1,1);\nvar eyes = rawaddy.substr(2,1);\nvar teeth = rawaddy.substr(3,1);\nvar lips = rawaddy.substr(-4).substr(0,1);\nvar hair = rawaddy.substr(-4).substr(1,1);            \nvar hat = rawaddy.substr(-4).substr(2,1);            \nvar chest = rawaddy.substr(-4).substr(3,1);\n\n\nmsg.bg = bg;\nmsg.skin = skin;\nmsg.eyes = eyes;\nmsg.teeth = teeth;\nmsg.lips = lips;\nmsg.hair = hair;\nmsg.hat = hat;\nmsg.chest = chest;\n\nmsg.payload = a1+z1; // concat both and pass it along\nmsg.deruptar = a1+z1;\nmsg.depositaddress = depositaddress;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1760,
        "wires": [
            [
                "1163a55a.023d5b",
                "db21f272.29bb2"
            ]
        ]
    },
    {
        "id": "1163a55a.023d5b",
        "type": "debug",
        "z": "42c07592.8d970c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 1720,
        "wires": []
    },
    {
        "id": "1979d565.8b521b",
        "type": "function",
        "z": "42c07592.8d970c",
        "name": "form chimes ",
        "func": "let data = msg.payload\nlet result = []\n\ndata.memos.forEach((el, index) => {\n    result.push(\n        {\n            \"memo\": data.memos[index],\n            \"link\": data.links[index],\n            \"txid\": data.txids[index],\n            \"sender\": data.senders[index],\n            \"bg\": data.senders[index].substring(4).substr(0,1),\n            \"skin\": data.senders[index].substring(4).substr(1,1),\n            \"eyes\": data.senders[index].substring(4).substr(2,1),\n            \"teeth\": data.senders[index].substring(4).substr(3,1),\n            \"lips\": data.senders[index].substr(-4).substr(0,1),\n            \"hair\": data.senders[index].substr(-4).substr(1,1),            \n            \"hat\": data.senders[index].substr(-4).substr(2,1),            \n            \"chest\": data.senders[index].substr(-4).substr(3,1),            \n            \"idx\": data.idxs[index],\n            \"likecount\": data.likecounts[index]\n        }\n    )\n})\n\nmsg.payload = result;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1730,
        "y": 1440,
        "wires": [
            [
                "a8c2df12.bf00a",
                "f5c0cc90.325be",
                "595348d0.ff8358"
            ]
        ]
    },
    {
        "id": "a8c2df12.bf00a",
        "type": "debug",
        "z": "42c07592.8d970c",
        "d": true,
        "name": "Deruptar Debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2160,
        "y": 1380,
        "wires": []
    },
    {
        "id": "8d102565.c01f28",
        "type": "ui_template",
        "z": "42c07592.8d970c",
        "d": true,
        "group": "eaf2cbdd.546078",
        "name": "Feed of Chimes",
        "order": 1,
        "width": 13,
        "height": "13",
        "format": "<!DOCTYPE html>\n<html>\n<head>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n<style>\nbody {\n  font-family: 'Asap', sans-serif;\n  font-family: 'Roboto', sans-serif;\n\n}\na {\n  color: #0040FF;\n}\n\na:hover {\n  color: Red;\n}\n\n\nimg {\n  max-width:100%;\n}\n.avator {\n  border-radius:100px;\n  width:48px;\n  margin-right: 5px;\n  padding-top: 5px;\n}\n\n\n.chime-wrap {\n  width: 85%;    \n  max-width:100%;\n  color: White;\n  margin: 0 auto;\n  margin-top: 8px;\n  padding: 10px;\n  border-bottom: 1px solid #0040FF;\n}\n\n.chime-header {\n  display: flex;\n  align-items:flex-start;\n  font-size:14px;\n}\n.chime-header-info {\n  font-weight:bold;\n}\n.chime-header-info span {\n  font-weight:normal;\n  margin-left: 5px;\n}\n.chime-header-info p {\n  font-weight:normal;\n  margin-top: 5px;\n  \n}\n.chime-img-wrap {\n  padding-left: 10px;\n}\n\n.chime-info-counts {\n  display: flex;\n  margin-left: 60px;\n  margin-top: 10px;\n}\n.chime-info-counts div {\n  display: flex;\n  margin-right: 20px;\n}\n.chime-info-counts div svg {\n  margin-right: 10px;\n}\n@media screen and (max-width:100%){\n  body {\n    padding-left: 2px;\n    padding-right: 2px;\n  }\n  .chime-header {\n    flex-direction:column;\n  }\n  .chime-header img {\n    margin-bottom: 10px;\n  }\n  .chime-header-info p {\n    color:Black;\n    margin-bottom: 30px;\n  }\n  .chime-img-wrap {\n    padding-left: 0;\n  }\n  .chime-info-counts {\n  display: flex;\n  margin-left: 0;\n}\n.chime-info-counts div {\n  margin-right: 10px;\n}\n}\n</style>\n</head>\n\n<body>\n<link href=\"https://fonts.googleapis.com/css?family=Asap\" rel=\"stylesheet\">\n<link href=\"https://fonts.googleapis.com/css?family=Roboto\" rel=\"stylesheet\">\n\n\n\n<div class=\"chime-wrap\" ng-repeat=\"obj in msg.payload\">\n  <div class=\"chime-header\">\n    <img src=\"https://raw.githubusercontent.com/cryptocracy/images/master/512x512.png\" alt=\"\" class=\"avator\">\n    <div class=\"chime-header-info\">\n      <small>@{{obj.sender}}</small><span></span><span> </span>\n      <p>{{obj.memo}}</p>\n    </div>\n  </div>\n<!--  <div class=\"chime-img-wrap\">\n    <img src=\"https://pbs.twimg.com/media/Dgti2h0WkAEUPmT.png\" alt=\"\" class=\"chime-img\">\n  </div>-->\n  <div class=\"chime-info-counts\">\n    <div class=\"comments\">\n      <a href=\"\"><i class=\"fa fa-comment\" aria-hidden=\"true\"></i></a>\n      <div class=\"comment-count\">1</div>\n    </div>\n    \n    <div class=\"retweets\">\n      <a href=\"\"><i class=\"fa fa-retweet\" aria-hidden=\"true\"></i></a>\n      <div class=\"rechime-count\">2</div>\n    </div>\n    \n    <div class=\"likes\">\n<!--      <svg class=\"feather feather-heart sc-dnqmqq jxshSx\" xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" aria-hidden=\"true\"><path d=\"M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z\"></path></svg> -->\n      <a href=\"\"><i class=\"fa fa-heart\" aria-hidden=\"true\"></i></a>\n      <div class=\"likes-count\">3</div>\n    </div>\n    \n    <div class=\"tx\">\n        <a href=\"https://explorer.stacks.co/txid/{{obj.txid}}?chain=mainnet\" target=\"_blank\" title=\"{{obj.tx_id}}\"><i class=\"fa fa-search\" aria-hidden=\"true\"></i></a>\n    </div>\n    \n    <div class=\"time\">\n        <small><small><small>{{obj.time}}</small></small></small>\n    </div>\n\n  </div>\n</div>\n</body>\n</html>\n\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 2160,
        "y": 1320,
        "wires": [
            []
        ]
    },
    {
        "id": "a6e8599b.5f8d08",
        "type": "debug",
        "z": "42c07592.8d970c",
        "d": true,
        "name": "Chime Debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "chime",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2460,
        "y": 1440,
        "wires": []
    },
    {
        "id": "65512d29.a7fb44",
        "type": "switch",
        "z": "42c07592.8d970c",
        "name": "Chime Interaction Intent Switch",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "lookup",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Tip?",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "comment",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "rechime",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 2510,
        "y": 1500,
        "wires": [
            [
                "4131bc5f.14c854"
            ],
            [
                "bace3834.62ed48"
            ],
            [],
            [],
            []
        ],
        "outputLabels": [
            "Lookup Author of Chime",
            "Like Author of Chime",
            "Comment Chime",
            "Rechime",
            "Otherwise"
        ]
    },
    {
        "id": "162274d6.37394b",
        "type": "function",
        "z": "42c07592.8d970c",
        "d": true,
        "name": "get author name by principal (mainnet)",
        "func": "const authorprincipal = msg.payload;//Chime Author Principal Address\n\nmsg.payload = authorprincipal;\n\nmsg.url = \"https://stacks-node-api.mainnet.stacks.co/v1/addresses/stacks/\" + authorprincipal;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2910,
        "y": 1420,
        "wires": [
            [
                "48b3fa7d.3fafa4",
                "3463264f.5317ea"
            ]
        ]
    },
    {
        "id": "48b3fa7d.3fafa4",
        "type": "http request",
        "z": "42c07592.8d970c",
        "name": "Get",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 3230,
        "y": 1400,
        "wires": [
            [
                "f8cbebdd.6c7988"
            ]
        ]
    },
    {
        "id": "f8cbebdd.6c7988",
        "type": "json",
        "z": "42c07592.8d970c",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 3350,
        "y": 1400,
        "wires": [
            [
                "4df1cc5b.0e4da4",
                "ce1ef1bd.2f5b6",
                "e40f6f32.ef5d5"
            ]
        ]
    },
    {
        "id": "4df1cc5b.0e4da4",
        "type": "debug",
        "z": "42c07592.8d970c",
        "d": true,
        "name": "Lookup Name by Principal Debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.names[0]",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3620,
        "y": 1440,
        "wires": []
    },
    {
        "id": "ce1ef1bd.2f5b6",
        "type": "function",
        "z": "42c07592.8d970c",
        "name": "pass to Feed Tab",
        "func": "msg.payload = {\"tab\":\"Feed\"};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3570,
        "y": 1400,
        "wires": [
            [
                "25efcccd.889c04"
            ]
        ]
    },
    {
        "id": "25efcccd.889c04",
        "type": "ui_ui_control",
        "z": "42c07592.8d970c",
        "name": "ui change",
        "events": "change",
        "x": 3760,
        "y": 1400,
        "wires": [
            [
                "367c69bb.e3c606"
            ]
        ]
    },
    {
        "id": "367c69bb.e3c606",
        "type": "function",
        "z": "42c07592.8d970c",
        "name": "show Feed byNameperChime (hide rest)",
        "func": "msg.payload = {\n  \"group\": {\n    \"hide\": [\n      \"Feed_Profile\",\n      \"Feed_RegisterName\",\n      \"Feed_NewPost\",\n      \"Feed_byContractName\",\n      \"Feed_byTokenName\",\n      \"Feed_byPrincipleAddress\",\n      \"Feed_byTransactionID\",\n      \"Feed_byName\",\n      \"Feed_Feed\"\n    ],\n    \"show\": [\n      \"Feed_Header\",\n      \"Feed_byChimeDeruptar\"\n    ],\n    \"focus\": true\n  }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4040,
        "y": 1380,
        "wires": [
            [
                "c5d429ac.c93608"
            ]
        ]
    },
    {
        "id": "c5d429ac.c93608",
        "type": "ui_ui_control",
        "z": "42c07592.8d970c",
        "name": "",
        "events": "all",
        "x": 4300,
        "y": 1380,
        "wires": [
            []
        ]
    },
    {
        "id": "846465ab.cb79a8",
        "type": "ui_template",
        "z": "42c07592.8d970c",
        "group": "c7ce017b.3c361",
        "name": "Results by Name (Found) Avatar",
        "order": 1,
        "width": "6",
        "height": "6",
        "format": "<div style=\"position: relative; width: 284px; height: 284px;\" align=\"center\">\n<img src=\"https://raw.githubusercontent.com/cryptocracy/deruptars/main/bg/{{msg.bg}}_bg.png\" alt=\"\" style=\"position: absolute; top: 0; left: 0;\">\n<img src=\"https://raw.githubusercontent.com/cryptocracy/deruptars/main/skin/{{msg.skin}}_skin.png\" alt=\"\" style=\"position: absolute; top: 0; left: 0;\">\n<img src=\"https://raw.githubusercontent.com/cryptocracy/deruptars/main/eyes/{{msg.eyes}}_eyes.png\" alt=\"\" style=\"position: absolute; top: 0; left: 0;\">\n<img src=\"https://raw.githubusercontent.com/cryptocracy/deruptars/main/teeth/{{msg.teeth}}_teeth.png\" alt=\"\" style=\"position: absolute; top: 0; left: 0;\">\n<img src=\"https://raw.githubusercontent.com/cryptocracy/deruptars/main/lips/{{msg.lips}}_lips.png\" alt=\"\" style=\"position: absolute; top: 0; left: 0;\">\n<img src=\"https://raw.githubusercontent.com/cryptocracy/deruptars/main/hair/{{msg.hair}}_hair.png\" alt=\"\" style=\"position: absolute; top: 0; left: 0;\">\n<img src=\"https://raw.githubusercontent.com/cryptocracy/deruptars/main/hat/{{msg.hat}}_hat.png\" alt=\"\" style=\"position: absolute; top: 0; left: 0;\">\n<img src=\"https://raw.githubusercontent.com/cryptocracy/deruptars/main/chest/{{msg.chest}}_chest.png\" alt=\"\" style=\"position: absolute; top: 0; left: 0;\">\n</div>\n\n\n\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 3610,
        "y": 1280,
        "wires": [
            []
        ]
    },
    {
        "id": "e40f6f32.ef5d5",
        "type": "ui_template",
        "z": "42c07592.8d970c",
        "group": "c7ce017b.3c361",
        "name": "Results by Name (Found) Name",
        "order": 4,
        "width": "7",
        "height": "1",
        "format": "<h3>@{{msg.payload.names[0]}}</h3>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 3610,
        "y": 1360,
        "wires": [
            []
        ]
    },
    {
        "id": "cc09eb58.f999a8",
        "type": "ui_template",
        "z": "42c07592.8d970c",
        "group": "c7ce017b.3c361",
        "name": "Results by Name (Found) Info",
        "order": 5,
        "width": "7",
        "height": "2",
        "format": "<small>{{msg.authorprincipal}}</small>\n<p>Bio: {{msg.deruptar}} </p>\n\n\n\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 3610,
        "y": 1320,
        "wires": [
            []
        ]
    },
    {
        "id": "3463264f.5317ea",
        "type": "function",
        "z": "42c07592.8d970c",
        "name": "create a deruptar string",
        "func": "var authorprincipal = msg.payload; //for search returns\n\nvar rawaddy = authorprincipal.substring(4); //Trim first 4 digits\n\nvar a1 = rawaddy.substr(0,4); // keep next 4 digits\nvar z1 = rawaddy.substring(rawaddy.length - 4); //keep last 4 digits\n\nvar bg = rawaddy.substr(0,1);\nvar skin = rawaddy.substr(1,1);\nvar eyes = rawaddy.substr(2,1);\nvar teeth = rawaddy.substr(3,1);\nvar lips = rawaddy.substr(-4).substr(0,1);\nvar hair = rawaddy.substr(-4).substr(1,1);            \nvar hat = rawaddy.substr(-4).substr(2,1);            \nvar chest = rawaddy.substr(-4).substr(3,1);\n\n\nmsg.bg = bg;\nmsg.skin = skin;\nmsg.eyes = eyes;\nmsg.teeth = teeth;\nmsg.lips = lips;\nmsg.hair = hair;\nmsg.hat = hat;\nmsg.chest = chest;\n\nmsg.payload = a1+z1; // concat both and pass it along\nmsg.deruptar = a1+z1;\nmsg.authorprincipal = authorprincipal;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3290,
        "y": 1320,
        "wires": [
            [
                "cc09eb58.f999a8",
                "846465ab.cb79a8",
                "a4a44aae.2990b8"
            ]
        ]
    },
    {
        "id": "74c2e4cd.b7b20c",
        "type": "ui_button",
        "z": "42c07592.8d970c",
        "name": "",
        "group": "c7ce017b.3c361",
        "order": 3,
        "width": "3",
        "height": "1",
        "passthru": false,
        "label": "Send STX",
        "tooltip": "Send STX to this Principal",
        "color": "",
        "bgcolor": "",
        "icon": "fa-send",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 3670,
        "y": 1240,
        "wires": [
            []
        ]
    },
    {
        "id": "a4a44aae.2990b8",
        "type": "debug",
        "z": "42c07592.8d970c",
        "d": true,
        "name": "Lookup Name by Principal Debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3480,
        "y": 1160,
        "wires": []
    },
    {
        "id": "9bc47a10.5344b8",
        "type": "function",
        "z": "42c07592.8d970c",
        "name": "create a deruptar string",
        "func": "var depositaddress = msg.payload.address; //for search returns\n\nvar rawaddy = depositaddress.substring(4); //Trim first 4 digits\n\nvar a1 = rawaddy.substr(0,4); // keep next 4 digits\nvar z1 = rawaddy.substring(rawaddy.length - 4); //keep last 4 digits\n\nvar bg = rawaddy.substr(0,1);\nvar skin = rawaddy.substr(1,1);\nvar eyes = rawaddy.substr(2,1);\nvar teeth = rawaddy.substr(3,1);\nvar lips = rawaddy.substr(-4).substr(0,1);\nvar hair = rawaddy.substr(-4).substr(1,1);            \nvar hat = rawaddy.substr(-4).substr(2,1);            \nvar chest = rawaddy.substr(-4).substr(3,1);\n\n\nmsg.bg = bg;\nmsg.skin = skin;\nmsg.eyes = eyes;\nmsg.teeth = teeth;\nmsg.lips = lips;\nmsg.hair = hair;\nmsg.hat = hat;\nmsg.chest = chest;\n\nmsg.payload = a1+z1; // concat both and pass it along\nmsg.deruptar = a1+z1;\nmsg.depositaddress = depositaddress;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 2820,
        "wires": [
            [
                "32ccff.f8ff1302",
                "4441efbe.eecb4"
            ]
        ]
    },
    {
        "id": "9244e8de.18a838",
        "type": "inject",
        "z": "de33bfc8.0ee0f",
        "name": "inject derp-token.clar file name",
        "props": [
            {
                "p": "clarity",
                "v": "derp-token.clar",
                "vt": "str"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 180,
        "y": 260,
        "wires": [
            [
                "42dfcd26.ec84c4"
            ]
        ]
    },
    {
        "id": "153c9952.0d3f37",
        "type": "inject",
        "z": "de33bfc8.0ee0f",
        "name": "inject hey.clar file name",
        "props": [
            {
                "p": "clarity",
                "v": "hey.clar",
                "vt": "str"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 200,
        "y": 180,
        "wires": [
            [
                "42dfcd26.ec84c4"
            ]
        ]
    },
    {
        "id": "8c2a5876.dacf18",
        "type": "debug",
        "z": "de33bfc8.0ee0f",
        "name": "pass debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 260,
        "wires": []
    },
    {
        "id": "bd97239e.96878",
        "type": "json",
        "z": "de33bfc8.0ee0f",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 690,
        "y": 200,
        "wires": [
            [
                "2ff8e49a.dda6bc"
            ]
        ]
    },
    {
        "id": "56749719.56d248",
        "type": "debug",
        "z": "de33bfc8.0ee0f",
        "name": "other debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 40,
        "wires": []
    },
    {
        "id": "30941a10.d93676",
        "type": "inject",
        "z": "de33bfc8.0ee0f",
        "name": "inject hey-token.clar file name",
        "props": [
            {
                "p": "clarity",
                "v": "hey-token.clar",
                "vt": "str"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 180,
        "y": 220,
        "wires": [
            [
                "42dfcd26.ec84c4"
            ]
        ]
    },
    {
        "id": "5dae0ad7.5e6124",
        "type": "inject",
        "z": "de33bfc8.0ee0f",
        "name": "inject luv-token.clar file name",
        "props": [
            {
                "p": "clarity",
                "v": "luv-token.clar",
                "vt": "str"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 180,
        "y": 40,
        "wires": [
            [
                "42dfcd26.ec84c4"
            ]
        ]
    },
    {
        "id": "b3bf5845.039c78",
        "type": "inject",
        "z": "de33bfc8.0ee0f",
        "name": "inject luv.clar file name",
        "props": [
            {
                "p": "clarity",
                "v": "luv.clar",
                "vt": "str"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 200,
        "y": 80,
        "wires": [
            [
                "42dfcd26.ec84c4"
            ]
        ]
    },
    {
        "id": "199461f0.9566ee",
        "type": "comment",
        "z": "42c07592.8d970c",
        "name": "Relative to Deruptar Avatar String for Profiles",
        "info": "takes in the \"depositaddress\" 0 of the wallet\ncreates 8 digit Avatar String \nread function comments for more info",
        "x": 1850,
        "y": 2160,
        "wires": []
    },
    {
        "id": "540826a.597d9d8",
        "type": "split",
        "z": "42c07592.8d970c",
        "name": "",
        "splt": "1",
        "spltType": "len",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 2050,
        "y": 2200,
        "wires": [
            [
                "afe53f06.8b39a"
            ]
        ]
    },
    {
        "id": "29b8246b.afdadc",
        "type": "function",
        "z": "42c07592.8d970c",
        "name": "create Deruptar string",
        "func": "var depositaddress = global.get(\"depositaddress\"); //for mainnet\n//or get global 'testnetdepositaddress' if on testnet\n\nrawaddy = depositaddress.substring(4); //Trim first 4 digits\n\na1 = rawaddy.substr(0,4); // keep next 4 digits\n\nz1 = rawaddy.substring(rawaddy.length - 4); //keep last 4 digits\n\nmsg.payload = a1+z1; // concat both and pass it along\nmsg.deruptar = a1+z1;\nmsg.depositaddress = depositaddress;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1860,
        "y": 2200,
        "wires": [
            [
                "540826a.597d9d8"
            ]
        ]
    },
    {
        "id": "afe53f06.8b39a",
        "type": "join",
        "z": "42c07592.8d970c",
        "name": "make array",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "8",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 2230,
        "y": 2200,
        "wires": [
            [
                "841d664b.beb798"
            ]
        ]
    },
    {
        "id": "e596310.fa1d8d",
        "type": "link in",
        "z": "42c07592.8d970c",
        "name": "to create Deruptar String for Profile",
        "links": [
            "ff4526e0.2d5308"
        ],
        "x": 1695,
        "y": 2200,
        "wires": [
            [
                "29b8246b.afdadc"
            ]
        ]
    },
    {
        "id": "841d664b.beb798",
        "type": "link out",
        "z": "42c07592.8d970c",
        "name": "pass back to Feed",
        "links": [
            "b20a4bd1.6c0da8"
        ],
        "x": 2355,
        "y": 2200,
        "wires": []
    },
    {
        "id": "33d36b73.fa82e4",
        "type": "function",
        "z": "42c07592.8d970c",
        "name": "36 ^ 8",
        "func": "var sn = 36 * 36 * 36 * 36 * 36 * 36 * 36 * 36;\nmsg.payload = sn;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "BigNum",
                "module": "bn.js"
            }
        ],
        "x": 1890,
        "y": 2400,
        "wires": [
            [
                "6dcced29.ae1b74"
            ]
        ]
    },
    {
        "id": "ca920efa.ee1e4",
        "type": "inject",
        "z": "42c07592.8d970c",
        "name": "get",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1740,
        "y": 2400,
        "wires": [
            [
                "33d36b73.fa82e4"
            ]
        ]
    },
    {
        "id": "6dcced29.ae1b74",
        "type": "debug",
        "z": "42c07592.8d970c",
        "name": "deruptar total count debugger",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2120,
        "y": 2400,
        "wires": []
    },
    {
        "id": "bad6583b.56fa58",
        "type": "function",
        "z": "42c07592.8d970c",
        "name": "create Deruptar string",
        "func": "var depositaddress = global.get(\"tipjar\"); //for search returns\n\nrawaddy = depositaddress.substring(4); //Trim first 4 digits\n\na1 = rawaddy.substr(0,4); // keep next 4 digits\n\nz1 = rawaddy.substring(rawaddy.length - 4); //keep last 4 digits\n\nmsg.payload = a1+z1; // concat both and pass it along\nmsg.deruptar = a1+z1;\nmsg.depositaddress = depositaddress;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1860,
        "y": 2340,
        "wires": [
            [
                "14325ad.b2b30a5"
            ]
        ]
    },
    {
        "id": "14325ad.b2b30a5",
        "type": "split",
        "z": "42c07592.8d970c",
        "name": "",
        "splt": "1",
        "spltType": "len",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 2050,
        "y": 2340,
        "wires": [
            [
                "c34a00f1.faf75"
            ]
        ]
    },
    {
        "id": "c34a00f1.faf75",
        "type": "join",
        "z": "42c07592.8d970c",
        "name": "make array",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "8",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 2230,
        "y": 2340,
        "wires": [
            [
                "923b4f39.9ff18"
            ]
        ]
    },
    {
        "id": "ed3859a.a6b05a8",
        "type": "comment",
        "z": "42c07592.8d970c",
        "name": "Relative to Deruptar Avatar String for Searches",
        "info": "takes in a principal address\ncreates 8 digit Avatar String \nread function comments for more info",
        "x": 1860,
        "y": 2300,
        "wires": []
    },
    {
        "id": "71db9c.cffe9464",
        "type": "link in",
        "z": "42c07592.8d970c",
        "name": "to create Deruptar String for Search",
        "links": [
            "dd722558.2b5318"
        ],
        "x": 1695,
        "y": 2340,
        "wires": [
            [
                "bad6583b.56fa58"
            ]
        ]
    },
    {
        "id": "923b4f39.9ff18",
        "type": "link out",
        "z": "42c07592.8d970c",
        "name": "pass back to Feed (search found results)",
        "links": [
            "8ec535fa.ab1a58"
        ],
        "x": 2355,
        "y": 2340,
        "wires": []
    },
    {
        "id": "a0d072bb.4364f",
        "type": "function",
        "z": "552dd682.f93918",
        "d": true,
        "name": "deploy derp-token to network (mainnet)",
        "func": "const ftname = \"derp-token\";// or \"sip-10-ft-standard\";//gathered from global\n\nconst claritybody = msg.payload; //gathered from the contents of the clarity contract via prior node\n\nconst senderKey = global.get('stxprivkey');\n\n// for testnet, use `StacksTestnet()`\nconst network = new stacksNetwork.StacksMainnet();\n\nconst txOptions = {\n  contractName: ftname,\n  codeBody: claritybody,\n  senderKey,\n  network,\n};\n\n\nconst transaction = await stacksTransactions.makeContractDeploy(txOptions);\n\nconst broadcastTxn = await stacksTransactions.broadcastTransaction(transaction, network);\n\nmsg.payload = transaction;\n\nmsg.blockchain = \"0x\" + broadcastTxn; //tx id\nmsg.txoptions = txOptions;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "BigNum",
                "module": "bn.js"
            },
            {
                "var": "stacksNetwork",
                "module": "@stacks/network"
            },
            {
                "var": "stacksTransactions",
                "module": "@stacks/transactions"
            }
        ],
        "x": 690,
        "y": 340,
        "wires": [
            [
                "3eb8ef94.cfca4"
            ]
        ]
    },
    {
        "id": "17bc745.428118c",
        "type": "inject",
        "z": "552dd682.f93918",
        "name": "Deploy Definitions Contract",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 380,
        "wires": [
            [
                "d12cba64.0b1948"
            ]
        ]
    },
    {
        "id": "d12cba64.0b1948",
        "type": "file in",
        "z": "552dd682.f93918",
        "name": "Get derp-token.clar",
        "filename": "derp-token.clar",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 390,
        "y": 380,
        "wires": [
            [
                "a0d072bb.4364f",
                "28c6098a.89c5a6"
            ]
        ]
    },
    {
        "id": "3eb8ef94.cfca4",
        "type": "debug",
        "z": "552dd682.f93918",
        "name": "Definitions debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 380,
        "wires": []
    },
    {
        "id": "83d54011.8b04f",
        "type": "function",
        "z": "552dd682.f93918",
        "name": "deploy ft-trait to network (testnet)",
        "func": "const ftname = \"ft-trait\";\n\nconst claritybody = msg.payload; //gathered from the contents of the clarity contract via prior node\n\nconst senderKey = global.get('stxprivkey');\n\n// for testnet, use `StacksTestnet()`\nconst network = new stacksNetwork.StacksTestnet();\n\nconst txOptions = {\n  contractName: ftname,\n  codeBody: claritybody,\n  senderKey,\n  network,\n};\n\n\nconst transaction = await stacksTransactions.makeContractDeploy(txOptions);\n\nconst broadcastTxn = await stacksTransactions.broadcastTransaction(transaction, network);\n\nmsg.payload = transaction;\n\nmsg.blockchain = \"0x\" + broadcastTxn;\nmsg.txoptions = txOptions;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "BigNum",
                "module": "bn.js"
            },
            {
                "var": "stacksNetwork",
                "module": "@stacks/network"
            },
            {
                "var": "stacksTransactions",
                "module": "@stacks/transactions"
            }
        ],
        "x": 680,
        "y": 260,
        "wires": [
            [
                "b7e4748b.a6abe8"
            ]
        ]
    },
    {
        "id": "9f79c4ae.16d508",
        "type": "file in",
        "z": "552dd682.f93918",
        "name": "Get ft-trait.clar",
        "filename": "ft-trait.clar",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 380,
        "y": 260,
        "wires": [
            [
                "83d54011.8b04f",
                "4ac15a89.7bcc74"
            ]
        ]
    },
    {
        "id": "b7e4748b.a6abe8",
        "type": "debug",
        "z": "552dd682.f93918",
        "name": "Traits debug",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 260,
        "wires": []
    },
    {
        "id": "386f5dad.070862",
        "type": "inject",
        "z": "552dd682.f93918",
        "name": "Deploy Trait Contract",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 260,
        "wires": [
            [
                "9f79c4ae.16d508"
            ]
        ]
    },
    {
        "id": "28c6098a.89c5a6",
        "type": "function",
        "z": "552dd682.f93918",
        "name": "deploy derp-token to network (testnet)",
        "func": "const ftname = \"derp-token\";// or \"sip-10-ft-standard\";//gathered from global\n\nconst claritybody = msg.payload; //gathered from the contents of the clarity contract via prior node\n\nconst senderKey = global.get('stxprivkey');\n\n// for testnet, use `StacksMainnet()`\nconst network = new stacksNetwork.StacksTestnet();\n\nconst txOptions = {\n  contractName: ftname,\n  codeBody: claritybody,\n  senderKey,\n  network,\n};\n\n\nconst transaction = await stacksTransactions.makeContractDeploy(txOptions);\n\nconst broadcastTxn = await stacksTransactions.broadcastTransaction(transaction, network);\n\nmsg.payload = transaction;\n\nmsg.blockchain = \"0x\" + broadcastTxn; //tx id\nmsg.txoptions = txOptions;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "BigNum",
                "module": "bn.js"
            },
            {
                "var": "stacksNetwork",
                "module": "@stacks/network"
            },
            {
                "var": "stacksTransactions",
                "module": "@stacks/transactions"
            }
        ],
        "x": 690,
        "y": 380,
        "wires": [
            [
                "3eb8ef94.cfca4"
            ]
        ]
    },
    {
        "id": "f5f84493.fc5c08",
        "type": "function",
        "z": "552dd682.f93918",
        "d": true,
        "name": "deploy derp to network (mainnet)",
        "func": "const ftname = \"derp\";// or \"sip-10-ft-standard\";//gathered from global\n\nconst claritybody = msg.payload; //gathered from the contents of the clarity contract via prior node\n\nconst senderKey = global.get('stxprivkey');\n\n// for testnet, use `StacksTestnet()`\nconst network = new stacksNetwork.StacksMainnet();\n\nconst txOptions = {\n  contractName: ftname,\n  codeBody: claritybody,\n  senderKey,\n  network,\n};\n\n\nconst transaction = await stacksTransactions.makeContractDeploy(txOptions);\n\nconst broadcastTxn = await stacksTransactions.broadcastTransaction(transaction, network);\n\nmsg.payload = transaction;\n\nmsg.blockchain = \"0x\" + broadcastTxn; //tx id\nmsg.txoptions = txOptions;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "BigNum",
                "module": "bn.js"
            },
            {
                "var": "stacksNetwork",
                "module": "@stacks/network"
            },
            {
                "var": "stacksTransactions",
                "module": "@stacks/transactions"
            }
        ],
        "x": 680,
        "y": 480,
        "wires": [
            [
                "1b3e3c36.a2bdf4"
            ]
        ]
    },
    {
        "id": "68cc538.ba883ac",
        "type": "inject",
        "z": "552dd682.f93918",
        "name": "Deploy App Contract",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 520,
        "wires": [
            [
                "76c07e9.2a93d8"
            ]
        ]
    },
    {
        "id": "76c07e9.2a93d8",
        "type": "file in",
        "z": "552dd682.f93918",
        "name": "Get derp.clar",
        "filename": "derp.clar",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 370,
        "y": 520,
        "wires": [
            [
                "f5f84493.fc5c08",
                "9b1e8f0e.fe576"
            ]
        ]
    },
    {
        "id": "1b3e3c36.a2bdf4",
        "type": "debug",
        "z": "552dd682.f93918",
        "name": "Contract debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 520,
        "wires": []
    },
    {
        "id": "9b1e8f0e.fe576",
        "type": "function",
        "z": "552dd682.f93918",
        "name": "deploy derp to network (testnet)",
        "func": "const ftname = \"derp\";// or \"sip-10-ft-standard\";//gathered from global\n\nconst claritybody = msg.payload; //gathered from the contents of the clarity contract via prior node\n\nconst senderKey = global.get('stxprivkey');\n\n// for testnet, use `StacksMainnet()`\nconst network = new stacksNetwork.StacksTestnet();\n\nconst txOptions = {\n  contractName: ftname,\n  codeBody: claritybody,\n  senderKey,\n  network,\n};\n\n\nconst transaction = await stacksTransactions.makeContractDeploy(txOptions);\n\nconst broadcastTxn = await stacksTransactions.broadcastTransaction(transaction, network);\n\nmsg.payload = transaction;\n\nmsg.blockchain = \"0x\" + broadcastTxn; //tx id\nmsg.txoptions = txOptions;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "BigNum",
                "module": "bn.js"
            },
            {
                "var": "stacksNetwork",
                "module": "@stacks/network"
            },
            {
                "var": "stacksTransactions",
                "module": "@stacks/transactions"
            }
        ],
        "x": 670,
        "y": 540,
        "wires": [
            [
                "1b3e3c36.a2bdf4"
            ]
        ]
    },
    {
        "id": "4ac15a89.7bcc74",
        "type": "function",
        "z": "552dd682.f93918",
        "d": true,
        "name": "deploy ft-trait to network (mainnet)",
        "func": "const ftname = \"ft-trait\";\n\nconst claritybody = msg.payload; //gathered from the contents of the clarity contract via prior node\n\nconst senderKey = global.get('stxprivkey');\n\n// for testnet, use `StacksTestnet()`\nconst network = new stacksNetwork.StacksMainnet();\n\nconst txOptions = {\n  contractName: ftname,\n  codeBody: claritybody,\n  senderKey,\n  network,\n};\n\n\nconst transaction = await stacksTransactions.makeContractDeploy(txOptions);\n\nconst broadcastTxn = await stacksTransactions.broadcastTransaction(transaction, network);\n\nmsg.payload = transaction;\n\nmsg.blockchain = \"0x\" + broadcastTxn;\nmsg.txoptions = txOptions;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "BigNum",
                "module": "bn.js"
            },
            {
                "var": "stacksNetwork",
                "module": "@stacks/network"
            },
            {
                "var": "stacksTransactions",
                "module": "@stacks/transactions"
            }
        ],
        "x": 680,
        "y": 220,
        "wires": [
            [
                "b7e4748b.a6abe8"
            ]
        ]
    },
    {
        "id": "847c72dd.80eea",
        "type": "comment",
        "z": "552dd682.f93918",
        "name": "Notes About Deployment",
        "info": "These contracts are relative to\ndeploying Contracts for the Feed\nFeed messages \"Chimes\" aught to cost \"Luv\" tokens.\nFeed likes aught to cost \"Luv\" tokens.",
        "x": 400,
        "y": 700,
        "wires": []
    },
    {
        "id": "a87638be.be91f8",
        "type": "function",
        "z": "42c07592.8d970c",
        "name": "Call Send-message Function in On-Chain luv.clar",
        "func": "//reference https://www.npmjs.com/package/@stacks/transactions\n\n//Network\nconst network = new stacksNetwork.StacksTestnet(); // or for testnet, use `StacksTestnet()`\n\n//Contract Asset Info\nconst tempcontractid = \"ST1ZG09W7XN7S1WH5F06YN25C5CGK2RE01D6CSA1H.luv\"; //get the temporarily contract id\nconst ftname = tempcontractid.split(\".\")[1]; //remove everything prior and including \".\"\nconst ftaddress = tempcontractid.split(\".\")[0]; //remove everything after and including \".\"\n//const ftinfo = stacksTransactions.createAssetInfo(ftaddress, ftname, ftname); //set AssetInfo for type property\nconst ftamount = 1;\n\n//Sender\nconst senderkey = global.get('stxprivkey'); //get private key\nconst ftsender = global.get('testnetdepositaddress'); //or use depositaddress for mainnet\n\n//Message and Attachment URL\nconst content = msg.payload.ftmessage;//pass in the memo\nconst attachmentUri = msg.payload.fturl;//pass in the attachment url\n\n//Post Conditions for safety\nconst postConditionAddress = ftsender;\nconst postConditionCode = stacksTransactions.FungibleConditionCode.Equal;\nconst postConditionAmount = new BigNum(1); //requires BigNum\n//const postConditionAssetInfo = ftinfo;//Problem like something to do with thi postConditionAssetInfo\nconst postConditionAssetInfo = stacksTransactions.createAssetInfo(ftaddress, \"luv-token\", \"luv-token\");\n\nconst postConditions = [\n  stacksTransactions.makeStandardFungiblePostCondition(postConditionAddress, postConditionCode, postConditionAmount, postConditionAssetInfo),\n];\n\n//Transaction Options\nconst txOptions = {\n  contractAddress: ftaddress,\n  contractName: ftname,\n  functionName: 'send-message',\n  functionArgs: [\n      stacksTransactions.stringUtf8CV(content),\n      stacksTransactions.someCV(stacksTransactions.stringUtf8CV(attachmentUri))\n      ],\n  senderKey: senderkey,\n  validateWithAbi: true,\n  network,\n  postConditions,\n  anchorMode: stacksTransactions.AnchorMode.Any,\n};\n\n//Transaction Broadcast to Network\nconst transaction = await stacksTransactions.makeContractCall(txOptions);\nconst broadcastTxn = await stacksTransactions.broadcastTransaction(transaction, network);\n\n//Passed along Outputs for UI\nmsg.payload = transaction;\nmsg.blockchain = \"0x\" + broadcastTxn;//the transaction id\nmsg.txoptions = txOptions;//the tx options\nmsg.ftcontractid = tempcontractid;//full contract id\n//msg.ftinfo = ftinfo;\nmsg.ftname = ftname;//contract name\nmsg.ftaddress = ftaddress;//contract address\nmsg.ftsender = ftsender; //contract caller\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "BigNum",
                "module": "bn.js"
            },
            {
                "var": "stacksNetwork",
                "module": "@stacks/network"
            },
            {
                "var": "stacksTransactions",
                "module": "@stacks/transactions"
            },
            {
                "var": "BufferCV",
                "module": "@stacks/transactions"
            }
        ],
        "x": 370,
        "y": 320,
        "wires": [
            [
                "2628d159.71cede",
                "abd704a0.d37428"
            ]
        ]
    },
    {
        "id": "2628d159.71cede",
        "type": "debug",
        "z": "42c07592.8d970c",
        "name": "Debug Send-Message 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 260,
        "wires": []
    },
    {
        "id": "3f46400d.d6415",
        "type": "inject",
        "z": "42c07592.8d970c",
        "name": "Test",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 90,
        "y": 300,
        "wires": [
            [
                "a87638be.be91f8"
            ]
        ]
    },
    {
        "id": "275b670f.f1f9e8",
        "type": "ui_form",
        "z": "42c07592.8d970c",
        "name": "Chime Form",
        "label": "",
        "group": "51640c7f.5ee354",
        "order": 1,
        "width": "13",
        "height": "5",
        "options": [
            {
                "label": "Message",
                "value": "ftmessage",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Attachment URL",
                "value": "fturl",
                "type": "text",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "ftmessage": "",
            "fturl": ""
        },
        "payload": "",
        "submit": "Post Chime",
        "cancel": "",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "x": 90,
        "y": 240,
        "wires": [
            [
                "a87638be.be91f8"
            ]
        ]
    },
    {
        "id": "abd704a0.d37428",
        "type": "function",
        "z": "42c07592.8d970c",
        "name": "txid to payload",
        "func": "var txid = msg.blockchain;\n\nmsg.payload = txid;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 300,
        "wires": [
            [
                "c2fcaf9d.1f753",
                "e1bbab79.9ea778"
            ]
        ]
    },
    {
        "id": "c2fcaf9d.1f753",
        "type": "ui_toast",
        "z": "42c07592.8d970c",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "Show In Feed",
        "cancel": "Send Another Chime",
        "raw": false,
        "topic": "",
        "name": "Transaction ID Popup",
        "x": 960,
        "y": 300,
        "wires": [
            [
                "920f6c4.87a2a9"
            ]
        ]
    },
    {
        "id": "920f6c4.87a2a9",
        "type": "switch",
        "z": "42c07592.8d970c",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Show In Feed",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1190,
        "y": 300,
        "wires": [
            [
                "3c329334.f9946c"
            ],
            []
        ]
    },
    {
        "id": "3c329334.f9946c",
        "type": "function",
        "z": "42c07592.8d970c",
        "name": "pass to Feed Tab",
        "func": "msg.payload = {\"tab\":\"Feed\"};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 260,
        "wires": [
            [
                "a5c63322.02d27"
            ]
        ]
    },
    {
        "id": "a5c63322.02d27",
        "type": "ui_ui_control",
        "z": "42c07592.8d970c",
        "name": "ui change",
        "events": "change",
        "x": 1560,
        "y": 260,
        "wires": [
            [
                "f18e74d1.03a1a8"
            ]
        ]
    },
    {
        "id": "f18e74d1.03a1a8",
        "type": "function",
        "z": "42c07592.8d970c",
        "name": "show Feed Feed (hide misc)",
        "func": "msg.payload = {\n  \"group\": {\n    \"hide\": [\n      \"Feed_Profile\",\n      \"Feed_RegisterName\",\n      \"Feed_NewPost\",\n      \"Feed_byContractName\",\n      \"Feed_byTokenName\",\n      \"Feed_byPrincipleAddress\",\n      \"Feed_byTransactionID\",\n      \"Feed_byName\",\n      \"Feed_byChimeDeruptar\"\n    ],\n    \"show\": [\n      \"Feed_Header\",\n      \"Feed_Feed\"\n    ],\n    \"focus\": true\n  }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1780,
        "y": 260,
        "wires": [
            [
                "eff3cd77.874d6"
            ]
        ]
    },
    {
        "id": "eff3cd77.874d6",
        "type": "ui_ui_control",
        "z": "42c07592.8d970c",
        "name": "",
        "events": "all",
        "x": 2000,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "e1bbab79.9ea778",
        "type": "debug",
        "z": "42c07592.8d970c",
        "name": "Debug Send-Message 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 260,
        "wires": []
    },
    {
        "id": "4c0e306f.7a523",
        "type": "function",
        "z": "354f3ac2.1ff636",
        "name": "get contract (testnet)",
        "func": "const nettype = \"stacks-node-api.testnet.stacks.co\"; // or use mainnet\nconst contract = msg.contractid;//\n\nmsg.url = \"https://\" + nettype + \"/extended/v1/contract/\" + contract;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 260,
        "wires": [
            [
                "2aa51c54.0fba34"
            ]
        ]
    },
    {
        "id": "fa279be1.263c98",
        "type": "function",
        "z": "354f3ac2.1ff636",
        "name": "call ft-transfer to network (testnet) (BETA VERSION)",
        "func": "//reference https://www.npmjs.com/package/@stacks/transactions\n\n//Network\nconst network = new stacksNetwork.StacksTestnet(); // network selection\n\n//Contract Asset Info\nconst tempcontractid = global.get('tempcontractid'); //get the temporarily contract id\nconst ftname = tempcontractid.split(\".\")[1]; //remove everything prior and including \".\"\nconst ftaddress = tempcontractid.split(\".\")[0]; //remove everything after and including \".\"\nconst ftinfo = stacksTransactions.createAssetInfo(ftaddress, ftname, ftname); //set AssetInfo for type property\n\n//Sender\nconst senderkey = global.get('stxprivkey'); //get private key\nconst ftsender = global.get('testnetdepositaddress'); //or use depositaddress for mainnet\n\n//Amount, Destination, and Memo\nconst ftamount = msg.payload.ftamount; //pass in amount to send\nconst ftdestination = msg.payload.ftdestination; //pass in destination address\nconst ftmemo = msg.payload.ftmemo;//pass in the memo\n\n//Post Conditions for safety\nconst postConditionAddress = ftsender;\nconst postConditionCode = stacksTransactions.FungibleConditionCode.Equal;\nconst postConditionAmount = new BigNum(ftamount); //requires BigNum\nconst postConditionAssetInfo = ftinfo;//Problem like something to do with thi postConditionAssetInfo\n\nconst postConditions = [\n  stacksTransactions.makeStandardFungiblePostCondition(postConditionAddress, postConditionCode, postConditionAmount, postConditionAssetInfo),\n];\n\n//Transaction Options -the memo still needs encoded correctly\nconst txOptions = {\n  contractAddress: ftaddress,\n  contractName: ftname,\n  functionName: 'transfer',\n  functionArgs: [\n      stacksTransactions.uintCV(ftamount),\n      stacksTransactions.standardPrincipalCV(ftsender),\n      stacksTransactions.standardPrincipalCV(ftdestination),\n      stacksTransactions.someCV(stacksTransactions.bufferCVFromString(ftmemo))\n      ],\n  senderKey: senderkey,\n  validateWithAbi: true,\n  network,\n  postConditions,\n  anchorMode: stacksTransactions.AnchorMode.Any,\n};\n\n//Transaction Broadcast to Network\nconst transaction = await stacksTransactions.makeContractCall(txOptions);\nconst broadcastTxn = await stacksTransactions.broadcastTransaction(transaction, network);\n\n//Passed along Outputs for UI\nmsg.payload = transaction;\nmsg.blockchain = \"0x\" + broadcastTxn;//the transaction id\nmsg.txoptions = txOptions;//the tx options\nmsg.ftcontractid = tempcontractid;//full contract id\nmsg.ftinfo = ftinfo;\nmsg.ftname = ftname;//contract name\nmsg.ftaddress = ftaddress;//contract address\nmsg.ftsender = ftsender; //contract caller\nmsg.ftamount = ftamount; //amount to send\nmsg.ftdestination = ftdestination; //where to send\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "BigNum",
                "module": "bn.js"
            },
            {
                "var": "stacksNetwork",
                "module": "@stacks/network"
            },
            {
                "var": "stacksTransactions",
                "module": "@stacks/transactions"
            },
            {
                "var": "BufferCV",
                "module": "@stacks/transactions"
            }
        ],
        "x": 1310,
        "y": 180,
        "wires": [
            [
                "1a54b8d8.b10777",
                "aedcd473.b0f298",
                "52f29bb6.d47464"
            ]
        ]
    },
    {
        "id": "d0c4fb2c.082848",
        "type": "function",
        "z": "42c07592.8d970c",
        "d": true,
        "name": "get Feed (Transactions) (Testnet)",
        "func": "\nmsg.payload = \"ST1ZG09W7XN7S1WH5F06YN25C5CGK2RE01D6CSA1H\";\nmsg.url = \"https://stacks-node-api.testnet.stacks.co/extended/v1/address/ST1ZG09W7XN7S1WH5F06YN25C5CGK2RE01D6CSA1H.luv/transactions\";\nreturn msg;\n\n\n//feed derived from contract ST1ZG09W7XN7S1WH5F06YN25C5CGK2RE01D6CSA1H.luv",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 880,
        "wires": [
            [
                "e7844833.8a1cc8"
            ]
        ]
    },
    {
        "id": "e7844833.8a1cc8",
        "type": "http request",
        "z": "42c07592.8d970c",
        "name": "Get",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 690,
        "y": 880,
        "wires": [
            [
                "41283bf6.c14614"
            ]
        ]
    },
    {
        "id": "41283bf6.c14614",
        "type": "json",
        "z": "42c07592.8d970c",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 810,
        "y": 880,
        "wires": [
            [
                "1765a8fe.0029f7"
            ]
        ]
    },
    {
        "id": "7f4d85d9.97202c",
        "type": "function",
        "z": "42c07592.8d970c",
        "name": "deduce a memos array (new)",
        "func": "var rawArray = msg.payload.results;\n\n\nvar memos = rawArray.map((obj) => {\n    return obj.contract_call.function_args[0].repr.toString()\n});\n\n\nmsg.payload = memos;\nmsg.topic = \"memos\";\nreturn msg;\n\n\n//DeHex Memo example:\n/*var rawmemo = msg.payload.results[0].token_transfer.memo;//a raw memo\n\nvar hex  = rawmemo.toString();//force rawmemo to string\n\nvar memo = '';//decode of memo\nfor (var n = 0; n < hex.length; n += 2) {\n\tmemo += String.fromCharCode(parseInt(hex.substr(n, 2), 16));\n}\n\nmsg.payload = memo;//pass along decoded ascii version of memo*/",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1780,
        "y": 840,
        "wires": [
            [
                "3bf81293.d2ed4e"
            ]
        ]
    },
    {
        "id": "8818bab.fd08148",
        "type": "function",
        "z": "42c07592.8d970c",
        "name": "form chimes  (old)",
        "func": "let data = msg.payload\nlet result = []\n\ndata.memos.forEach((el, index) => {\n    result.push(\n        {\n            \"memo\": Buffer.from(data.memos[index].slice(2), \"hex\").toString('ascii'),\n            \"txid\": data.txids[index],\n            \"sender\": data.senders[index],\n            \"bg\": data.senders[index].substring(4).substr(0,1),\n            \"skin\": data.senders[index].substring(4).substr(1,1),\n            \"eyes\": data.senders[index].substring(4).substr(2,1),\n            \"teeth\": data.senders[index].substring(4).substr(3,1),\n            \"lips\": data.senders[index].substr(-4).substr(0,1),\n            \"hair\": data.senders[index].substr(-4).substr(1,1),            \n            \"hat\": data.senders[index].substr(-4).substr(2,1),            \n            \"chest\": data.senders[index].substr(-4).substr(3,1),            \n            \"time\": data.times[index].substring(0, 19).replace('T', ' ')\n        }\n    )\n})\n\nmsg.payload = result;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2390,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "4131bc5f.14c854",
        "type": "function",
        "z": "42c07592.8d970c",
        "name": "get author name by principal (testnet)",
        "func": "const authorprincipal = msg.payload;//Chime Author Principal Address\n\nmsg.payload = authorprincipal;\n\nmsg.url = \"https://stacks-node-api.testnet.stacks.co/v1/addresses/stacks/\" + authorprincipal;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2910,
        "y": 1400,
        "wires": [
            [
                "48b3fa7d.3fafa4",
                "3463264f.5317ea"
            ]
        ]
    },
    {
        "id": "1765a8fe.0029f7",
        "type": "function",
        "z": "42c07592.8d970c",
        "d": true,
        "name": "filter by tx_status is success",
        "func": "const obj = msg.payload.results;\n\nconst results = obj.filter(by => by.tx_status === 'success');\n\nmsg.payload = {results};\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 880,
        "wires": [
            [
                "bc19928c.972da"
            ]
        ]
    },
    {
        "id": "bc19928c.972da",
        "type": "function",
        "z": "42c07592.8d970c",
        "d": true,
        "name": "filter by tx_type is smart_contract",
        "func": "const obj = msg.payload.results;\n\nconst results = obj.filter(by => by.tx_type === 'contract_call');\n\nmsg.payload = {results};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 880,
        "wires": [
            [
                "8dd30082.5b0a1",
                "9b3bee72.a269b",
                "70f7a50e.833f6c",
                "15876e21.3350c2",
                "be74617e.c219f",
                "88137d96.fb83",
                "8abc1729.379588",
                "aedfbd23.ce37d",
                "7f4d85d9.97202c",
                "2cefd0df.f4d72",
                "696d2513.14852c",
                "50f9bd65.6c5b04"
            ]
        ]
    },
    {
        "id": "2cefd0df.f4d72",
        "type": "function",
        "z": "42c07592.8d970c",
        "name": "deduce a links array (new)",
        "func": "var rawArray = msg.payload.results;\n\n\nvar links = rawArray.map((obj) => {\n    return obj.contract_call.function_args[1].repr.toString()\n});\n\n\nmsg.payload = links;\nmsg.topic = \"links\";\nreturn msg;\n\n\n//DeHex Memo example:\n/*var rawmemo = msg.payload.results[0].token_transfer.memo;//a raw memo\n\nvar hex  = rawmemo.toString();//force rawmemo to string\n\nvar memo = '';//decode of memo\nfor (var n = 0; n < hex.length; n += 2) {\n\tmemo += String.fromCharCode(parseInt(hex.substr(n, 2), 16));\n}\n\nmsg.payload = memo;//pass along decoded ascii version of memo*/",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1780,
        "y": 880,
        "wires": [
            [
                "3bf81293.d2ed4e"
            ]
        ]
    },
    {
        "id": "d58e5093.ee56e",
        "type": "debug",
        "z": "42c07592.8d970c",
        "name": "tx status debugger",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.tx_status",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3050,
        "y": 1080,
        "wires": []
    },
    {
        "id": "50f9bd65.6c5b04",
        "type": "function",
        "z": "42c07592.8d970c",
        "name": "use txids array",
        "func": "var rawArray = msg.payload.results;\n\n\nvar txids = rawArray.map((obj) => {\n    return obj.tx_id.toString()\n});\n\n\nmsg.payload = txids;\nmsg.topic = \"txids\";\nreturn msg;\n\n\n//DeHex Memo example:\n/*var rawmemo = msg.payload.results[0].token_transfer.memo;//a raw memo\n\nvar hex  = rawmemo.toString();//force rawmemo to string\n\nvar memo = '';//decode of memo\nfor (var n = 0; n < hex.length; n += 2) {\n\tmemo += String.fromCharCode(parseInt(hex.substr(n, 2), 16));\n}\n\nmsg.payload = memo;//pass along decoded ascii version of memo*/",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1820,
        "y": 1020,
        "wires": [
            [
                "dc291006.2baa4",
                "ba94f036.89c6c"
            ]
        ]
    },
    {
        "id": "696d2513.14852c",
        "type": "function",
        "z": "42c07592.8d970c",
        "name": "use senders array",
        "func": "var rawArray = msg.payload.results;\n\n\nvar principals = rawArray.map((obj) => {\n    return obj.sender_address.toString()\n});\n\n\nmsg.payload = principals;\nmsg.topic = \"senders\";\nreturn msg;\n\n\n//DeHex Memo example:\n/*var rawmemo = msg.payload.results[0].token_transfer.memo;//a raw memo\n\nvar hex  = rawmemo.toString();//force rawmemo to string\n\nvar memo = '';//decode of memo\nfor (var n = 0; n < hex.length; n += 2) {\n\tmemo += String.fromCharCode(parseInt(hex.substr(n, 2), 16));\n}\n\nmsg.payload = memo;//pass along decoded ascii version of memo*/",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1810,
        "y": 1060,
        "wires": [
            [
                "9449e25c.f9be9",
                "193e43f7.9b304c"
            ]
        ]
    },
    {
        "id": "83e96019.3c5ad",
        "type": "debug",
        "z": "42c07592.8d970c",
        "name": "principal to name debugger",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2440,
        "y": 1100,
        "wires": []
    },
    {
        "id": "6e0519a7.f19708",
        "type": "http request",
        "z": "42c07592.8d970c",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "persist": false,
        "authType": "",
        "x": 740,
        "y": 2000,
        "wires": [
            []
        ]
    },
    {
        "id": "dc291006.2baa4",
        "type": "function",
        "z": "42c07592.8d970c",
        "d": true,
        "name": "split array by length",
        "func": "for (i = 0; i < msg.payload.length; i=i+1) {\n    var txid = RED.util.cloneMessage(msg);\n    txid.payload = msg.payload[i];\n    node.send(txid);\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2030,
        "y": 960,
        "wires": [
            [
                "70b61ae4.62a224"
            ]
        ]
    },
    {
        "id": "70b61ae4.62a224",
        "type": "delay",
        "z": "42c07592.8d970c",
        "name": "",
        "pauseType": "rate",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "0.5",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 2190,
        "y": 1020,
        "wires": [
            [
                "a47f54b7.ab1e68"
            ]
        ]
    },
    {
        "id": "9449e25c.f9be9",
        "type": "function",
        "z": "42c07592.8d970c",
        "d": true,
        "name": "split array by length",
        "func": "for (i = 0; i < msg.payload.length; i=i+1) {\n    var senderprincipal = RED.util.cloneMessage(msg);\n    senderprincipal.payload = msg.payload[i];\n    node.send(senderprincipal);\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2030,
        "y": 1120,
        "wires": [
            [
                "d6549545.d319d8"
            ]
        ]
    },
    {
        "id": "d6549545.d319d8",
        "type": "delay",
        "z": "42c07592.8d970c",
        "name": "",
        "pauseType": "rate",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "0.5",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 2190,
        "y": 1060,
        "wires": [
            [
                "3e07b51e.b4b24a",
                "83e96019.3c5ad"
            ]
        ]
    },
    {
        "id": "a47f54b7.ab1e68",
        "type": "function",
        "z": "42c07592.8d970c",
        "d": true,
        "name": "construct Url to call (testnet)",
        "func": "var txid = msg.payload;\n\n//use mainnet if needed\nmsg.url = \"https://stacks-node-api.testnet.stacks.co/extended/v1/tx/\" + txid; \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2440,
        "y": 1020,
        "wires": [
            [
                "ca3315f8.5c0208"
            ]
        ]
    },
    {
        "id": "ca3315f8.5c0208",
        "type": "http request",
        "z": "42c07592.8d970c",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "persist": false,
        "authType": "",
        "x": 2690,
        "y": 1020,
        "wires": [
            [
                "645667da.40f658"
            ]
        ]
    },
    {
        "id": "645667da.40f658",
        "type": "json",
        "z": "42c07592.8d970c",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 2830,
        "y": 1020,
        "wires": [
            [
                "51264a57.0c2074",
                "d58e5093.ee56e",
                "6751f659.36ec38",
                "442535ba.ceb2bc"
            ]
        ]
    },
    {
        "id": "3e07b51e.b4b24a",
        "type": "function",
        "z": "42c07592.8d970c",
        "d": true,
        "name": "construct Url to call (mainnet)",
        "func": "var sender = msg.payload;\n\n//use mainnet if needed\nmsg.url = \"https://stacks-node-api.mainnet.stacks.co/v1/addresses/stacks/\" + sender; \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2440,
        "y": 1060,
        "wires": [
            [
                "3ac120d2.4ad2a"
            ]
        ]
    },
    {
        "id": "3ac120d2.4ad2a",
        "type": "http request",
        "z": "42c07592.8d970c",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "persist": false,
        "authType": "",
        "x": 2690,
        "y": 1060,
        "wires": [
            [
                "d44ca21b.ddb11"
            ]
        ]
    },
    {
        "id": "d44ca21b.ddb11",
        "type": "json",
        "z": "42c07592.8d970c",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 2830,
        "y": 1060,
        "wires": [
            [
                "32101f4d.7d639"
            ]
        ]
    },
    {
        "id": "ba94f036.89c6c",
        "type": "split",
        "z": "42c07592.8d970c",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "txid",
        "x": 1990,
        "y": 1020,
        "wires": [
            [
                "70b61ae4.62a224"
            ]
        ]
    },
    {
        "id": "193e43f7.9b304c",
        "type": "split",
        "z": "42c07592.8d970c",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "sender",
        "x": 1990,
        "y": 1060,
        "wires": [
            [
                "d6549545.d319d8"
            ]
        ]
    },
    {
        "id": "51264a57.0c2074",
        "type": "debug",
        "z": "42c07592.8d970c",
        "name": "tx index debugger",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.tx_index",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3050,
        "y": 1120,
        "wires": []
    },
    {
        "id": "32101f4d.7d639",
        "type": "debug",
        "z": "42c07592.8d970c",
        "name": "principal to name debugger",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3080,
        "y": 1160,
        "wires": []
    },
    {
        "id": "6751f659.36ec38",
        "type": "debug",
        "z": "42c07592.8d970c",
        "name": "tx id debugger",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.tx_id",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3040,
        "y": 1040,
        "wires": []
    },
    {
        "id": "442535ba.ceb2bc",
        "type": "debug",
        "z": "42c07592.8d970c",
        "name": "tx type debugger",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.tx_type",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3050,
        "y": 1020,
        "wires": []
    },
    {
        "id": "ac06ed70.45d37",
        "type": "function",
        "z": "42c07592.8d970c",
        "name": "Call Like-message Function in On-Chain luv.clar",
        "func": "//reference https://www.npmjs.com/package/@stacks/transactions\n\n//Network\nconst network = new stacksNetwork.StacksTestnet(); // or for testnet, use `StacksTestnet()`\n\n//Contract Asset Info\nconst tempcontractid = \"ST1ZG09W7XN7S1WH5F06YN25C5CGK2RE01D6CSA1H.luv\"; //get the temporarily contract id\nconst ftname = tempcontractid.split(\".\")[1]; //remove everything prior and including \".\"\nconst ftaddress = tempcontractid.split(\".\")[0]; //remove everything after and including \".\"\n//const ftinfo = stacksTransactions.createAssetInfo(ftaddress, ftname, ftname); //set AssetInfo for type property\nconst ftamount = 1;\n\n//Sender\nconst senderkey = global.get('stxprivkey'); //get private key\nconst ftsender = global.get('testnetdepositaddress'); //or use depositaddress for mainnet\n\n//Message ID to Like\nconst id = msg.idx;//pass in the ID of the message in question\n\n//Post Conditions for safety\nconst postConditionAddress = ftsender;\nconst postConditionCode = stacksTransactions.FungibleConditionCode.Equal;\nconst postConditionAmount = new BigNum(1); //requires BigNum\n//const postConditionAssetInfo = ftinfo;//Problem like something to do with thi postConditionAssetInfo\nconst postConditionAssetInfo = stacksTransactions.createAssetInfo(ftaddress, \"luv-token\", \"luv-token\");\n\nconst postConditions = [\n  stacksTransactions.makeStandardFungiblePostCondition(postConditionAddress, postConditionCode, postConditionAmount, postConditionAssetInfo),\n];\n\n//Transaction Options\nconst txOptions = {\n  contractAddress: ftaddress,\n  contractName: ftname,\n  functionName: 'like-message',\n  functionArgs: [\n      stacksTransactions.uintCV(id)\n      ],\n  senderKey: senderkey,\n  validateWithAbi: true,\n  network,\n  postConditions,\n  anchorMode: stacksTransactions.AnchorMode.Any,\n};\n\n//Transaction Broadcast to Network\nconst transaction = await stacksTransactions.makeContractCall(txOptions);\nconst broadcastTxn = await stacksTransactions.broadcastTransaction(transaction, network);\n\n//Passed along Outputs for UI\nmsg.payload = transaction;\nmsg.blockchain = \"0x\" + broadcastTxn;//the transaction id\nmsg.txoptions = txOptions;//the tx options\nmsg.ftcontractid = tempcontractid;//full contract id\n//msg.ftinfo = ftinfo;\nmsg.ftname = ftname;//contract name\nmsg.ftaddress = ftaddress;//contract address\nmsg.ftsender = ftsender; //contract caller\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "BigNum",
                "module": "bn.js"
            },
            {
                "var": "stacksNetwork",
                "module": "@stacks/network"
            },
            {
                "var": "stacksTransactions",
                "module": "@stacks/transactions"
            },
            {
                "var": "BufferCV",
                "module": "@stacks/transactions"
            }
        ],
        "x": 3320,
        "y": 1680,
        "wires": [
            [
                "4c420d7b.ff4bc4"
            ]
        ]
    },
    {
        "id": "28edd09c.affd2",
        "type": "function",
        "z": "42c07592.8d970c",
        "name": "get Feed (Events) (Testnet)",
        "func": "\nmsg.payload = \"ST1ZG09W7XN7S1WH5F06YN25C5CGK2RE01D6CSA1H\";\nmsg.url = \"https://stacks-node-api.testnet.stacks.co/extended/v1/contract/ST1ZG09W7XN7S1WH5F06YN25C5CGK2RE01D6CSA1H.luv/events\";\nreturn msg;\n\n\n//feed derived from contract ST1ZG09W7XN7S1WH5F06YN25C5CGK2RE01D6CSA1H.luv",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 1140,
        "wires": [
            [
                "b2226bbe.1f7ed8"
            ]
        ]
    },
    {
        "id": "b2226bbe.1f7ed8",
        "type": "http request",
        "z": "42c07592.8d970c",
        "name": "Get",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 670,
        "y": 1140,
        "wires": [
            [
                "b03da851.222ad8"
            ]
        ]
    },
    {
        "id": "b03da851.222ad8",
        "type": "json",
        "z": "42c07592.8d970c",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 790,
        "y": 1140,
        "wires": [
            [
                "4d19209e.c0ab8",
                "6afdf7d3.9b45c8",
                "9d56d4d4.23d2d8",
                "820fa847.5721d8",
                "8ca7cdf.281973",
                "f40bf464.b48538",
                "9bcd99f9.8fc9b8",
                "a0a1d952.7d5838"
            ]
        ]
    },
    {
        "id": "4d19209e.c0ab8",
        "type": "debug",
        "z": "42c07592.8d970c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.results",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 1080,
        "wires": []
    },
    {
        "id": "6afdf7d3.9b45c8",
        "type": "function",
        "z": "42c07592.8d970c",
        "name": "deduce a txids array",
        "func": "var rawArray = msg.payload.results;\n\n\nvar txids = rawArray.map((obj) => {\n    return obj.tx_id.toString()\n});\n\n\nmsg.payload = txids;\nmsg.topic = \"txids\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 1140,
        "wires": [
            [
                "2e96cb0.2611636",
                "192b5a27.e2e4a6"
            ]
        ]
    },
    {
        "id": "2e96cb0.2611636",
        "type": "debug",
        "z": "42c07592.8d970c",
        "d": true,
        "name": "Chime Chunks Debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1480,
        "y": 1140,
        "wires": []
    },
    {
        "id": "94ddebc2.c10078",
        "type": "comment",
        "z": "42c07592.8d970c",
        "name": "possibly pointless?",
        "info": "",
        "x": 1810,
        "y": 1040,
        "wires": []
    },
    {
        "id": "9d56d4d4.23d2d8",
        "type": "function",
        "z": "42c07592.8d970c",
        "d": true,
        "name": "deduce events logs array",
        "func": "var rawArray = msg.payload.results;\n\n\nvar log = rawArray.map((obj) => {\n    return obj.contract_log.value.repr.toString()\n});\n\n\nmsg.payload = log;\nmsg.topic = \"logs\";\nreturn msg;\n\n\n//DeHex Memo example:\n/*var rawmemo = msg.payload.results[0].token_transfer.memo;//a raw memo\n\nvar hex  = rawmemo.toString();//force rawmemo to string\n\nvar memo = '';//decode of memo\nfor (var n = 0; n < hex.length; n += 2) {\n\tmemo += String.fromCharCode(parseInt(hex.substr(n, 2), 16));\n}\n\nmsg.payload = memo;//pass along decoded ascii version of memo*/",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 1740,
        "wires": [
            []
        ]
    },
    {
        "id": "820fa847.5721d8",
        "type": "function",
        "z": "42c07592.8d970c",
        "name": "deduce a links array (new)",
        "func": "var rawArray = msg.payload.results;\n\n\nvar links = rawArray.map((obj) => {\n    return obj.contract_log.value.repr.toString().substr(31).split('\\(content u\\\"')[0].slice(0, -4)\n});\n\n\nmsg.payload = links;\nmsg.topic = \"links\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 1300,
        "wires": [
            [
                "2e96cb0.2611636",
                "192b5a27.e2e4a6"
            ]
        ]
    },
    {
        "id": "bcc9070e.6ed568",
        "type": "function",
        "z": "42c07592.8d970c",
        "d": true,
        "name": "deduce events logs array",
        "func": "var rawArray = msg.payload.results;\n\n\nvar log = rawArray.map((obj) => {\n    return obj.contract_log.value.repr.toString()\n});\n\n\nmsg.payload = log;\nmsg.topic = \"logs\";\nreturn msg;\n\n\n//DeHex Memo example:\n/*var rawmemo = msg.payload.results[0].token_transfer.memo;//a raw memo\n\nvar hex  = rawmemo.toString();//force rawmemo to string\n\nvar memo = '';//decode of memo\nfor (var n = 0; n < hex.length; n += 2) {\n\tmemo += String.fromCharCode(parseInt(hex.substr(n, 2), 16));\n}\n\nmsg.payload = memo;//pass along decoded ascii version of memo*/",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 1700,
        "wires": [
            []
        ]
    },
    {
        "id": "8ca7cdf.281973",
        "type": "function",
        "z": "42c07592.8d970c",
        "name": "deduce a senders array",
        "func": "var rawArray = msg.payload.results;\n\n\nvar principals = rawArray.map((obj) => {\n    return obj.contract_log.value.repr.toString().split('\\) \\(publisher ')[1].split('\\)\\)')[0]\n});\n\n\nmsg.payload = principals;\nmsg.topic = \"senders\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 1180,
        "wires": [
            [
                "2e96cb0.2611636",
                "192b5a27.e2e4a6"
            ]
        ]
    },
    {
        "id": "e214004c.4cc8d",
        "type": "function",
        "z": "42c07592.8d970c",
        "d": true,
        "name": "deduce a times array (deprecated)",
        "func": "var rawArray = msg.payload.results;\n\n\nvar isotime = rawArray.map((obj) => {\n    return obj.burn_block_time_iso.toString()\n});\n\n\nmsg.payload = isotime;\nmsg.topic = \"times\";\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 1220,
        "wires": [
            []
        ]
    },
    {
        "id": "f40bf464.b48538",
        "type": "function",
        "z": "42c07592.8d970c",
        "name": "deduce a memos array (new)",
        "func": "var rawArray = msg.payload.results;\n\n\nvar memos = rawArray.map((obj) => {\n    return obj.contract_log.value.repr.toString().split('\\(content u\\\"')[1].split('\\\"\\) \\(index')[0]\n});\n\n\nmsg.payload = memos;\nmsg.topic = \"memos\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 1260,
        "wires": [
            [
                "2e96cb0.2611636",
                "192b5a27.e2e4a6"
            ]
        ]
    },
    {
        "id": "9bcd99f9.8fc9b8",
        "type": "function",
        "z": "42c07592.8d970c",
        "name": "deduce idxs array (message id)",
        "func": "var rawArray = msg.payload.results;\n\n\nvar idx = rawArray.map((obj) => {\n    return obj.contract_log.value.repr.toString().split('\\) \\(index u')[1].split('\\) \\(publisher')[0]\n});\n\n\nmsg.payload = idx;\nmsg.topic = \"idxs\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 1340,
        "wires": [
            [
                "2e96cb0.2611636",
                "192b5a27.e2e4a6"
            ]
        ]
    },
    {
        "id": "165da036.f32e9",
        "type": "function",
        "z": "42c07592.8d970c",
        "name": "form chimes ",
        "func": "let data = msg.payload\nlet result = []\n\ndata.memos.forEach((el, index) => {\n    result.push(\n        {\n            \"memo\": data.memos[index].substr(2).slice(0, -1),\n            \"link\": data.links[index].substr(8).slice(0, -2),\n            \"txid\": data.txids[index],\n            \"sender\": data.senders[index],\n            \"bg\": data.senders[index].substring(4).substr(0,1),\n            \"skin\": data.senders[index].substring(4).substr(1,1),\n            \"eyes\": data.senders[index].substring(4).substr(2,1),\n            \"teeth\": data.senders[index].substring(4).substr(3,1),\n            \"lips\": data.senders[index].substr(-4).substr(0,1),\n            \"hair\": data.senders[index].substr(-4).substr(1,1),            \n            \"hat\": data.senders[index].substr(-4).substr(2,1),            \n            \"chest\": data.senders[index].substr(-4).substr(3,1),            \n            \"time\": data.times[index].substring(0, 19).replace('T', ' ')\n        }\n    )\n})\n\nmsg.payload = result;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1750,
        "y": 1400,
        "wires": [
            []
        ]
    },
    {
        "id": "a911e330.1d487",
        "type": "debug",
        "z": "42c07592.8d970c",
        "d": true,
        "name": "Like Message Debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3060,
        "y": 1480,
        "wires": []
    },
    {
        "id": "bace3834.62ed48",
        "type": "ui_toast",
        "z": "42c07592.8d970c",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "Yes Tip 1 Luv",
        "cancel": "Woops Back",
        "raw": false,
        "topic": "",
        "name": "{{msg.chime}}",
        "x": 2820,
        "y": 1540,
        "wires": [
            [
                "ad1a20f8.1b5d6",
                "a911e330.1d487",
                "210f2271.fa500e"
            ]
        ]
    },
    {
        "id": "ad1a20f8.1b5d6",
        "type": "function",
        "z": "42c07592.8d970c",
        "name": "show Feed",
        "func": "msg.payload = {\n  \"group\": {\n    \"hide\": [\n      \"Feed_Profile\",\n      \"Feed_RegisterName\",\n      \"Feed_NewPost\",\n      \"Feed_byContractName\",\n      \"Feed_byTokenName\",\n      \"Feed_byPrincipleAddress\",\n      \"Feed_byTransactionID\",\n      \"Feed_byChimeDeruptar\",      \n      \"Feed_byName\"\n    ],\n    \"show\": [\n      \"Feed_Header\",\n      \"Feed_Feed\"\n    ],\n    \"focus\": true\n  }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3190,
        "y": 1540,
        "wires": [
            [
                "377ee0f6.d5473",
                "a718eb27.e950f8"
            ]
        ]
    },
    {
        "id": "377ee0f6.d5473",
        "type": "ui_ui_control",
        "z": "42c07592.8d970c",
        "name": "",
        "events": "all",
        "x": 3360,
        "y": 1540,
        "wires": [
            []
        ]
    },
    {
        "id": "1d69e6d9.a6a679",
        "type": "link in",
        "z": "42c07592.8d970c",
        "name": "Show Feed Again",
        "links": [
            "a718eb27.e950f8"
        ],
        "x": 235,
        "y": 1180,
        "wires": [
            [
                "28edd09c.affd2"
            ]
        ]
    },
    {
        "id": "a718eb27.e950f8",
        "type": "link out",
        "z": "42c07592.8d970c",
        "name": "Show Feed",
        "links": [
            "1d69e6d9.a6a679"
        ],
        "x": 3335,
        "y": 1580,
        "wires": []
    },
    {
        "id": "210f2271.fa500e",
        "type": "switch",
        "z": "42c07592.8d970c",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Yes Tip 1 Luv",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 3020,
        "y": 1640,
        "wires": [
            [
                "b55e6618.ec2e38",
                "ac06ed70.45d37"
            ],
            [
                "4ed781a6.b8a28"
            ]
        ]
    },
    {
        "id": "4ed781a6.b8a28",
        "type": "debug",
        "z": "42c07592.8d970c",
        "name": "DO NOT TIP",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "idx",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3170,
        "y": 1800,
        "wires": []
    },
    {
        "id": "b55e6618.ec2e38",
        "type": "debug",
        "z": "42c07592.8d970c",
        "name": "TIP THIS ID (msg.idx)",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "idx",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3220,
        "y": 1620,
        "wires": []
    },
    {
        "id": "4c420d7b.ff4bc4",
        "type": "debug",
        "z": "42c07592.8d970c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3610,
        "y": 1680,
        "wires": []
    },
    {
        "id": "9d342eed.e3956",
        "type": "function",
        "z": "42c07592.8d970c",
        "name": "use idxs array",
        "func": "var rawArray = msg.payload.results;\n\n\nvar idx = rawArray.map((obj) => {\n    return obj.contract_log.value.repr.toString().split('\\) \\(index u')[1].split('\\) \\(publisher')[0]\n});\n\n\nmsg.payload = idx;\nmsg.topic = \"idxs\";\nreturn msg;\n\n\n//DeHex Memo example:\n/*var rawmemo = msg.payload.results[0].token_transfer.memo;//a raw memo\n\nvar hex  = rawmemo.toString();//force rawmemo to string\n\nvar memo = '';//decode of memo\nfor (var n = 0; n < hex.length; n += 2) {\n\tmemo += String.fromCharCode(parseInt(hex.substr(n, 2), 16));\n}\n\nmsg.payload = memo;//pass along decoded ascii version of memo*/",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 1660,
        "wires": [
            []
        ]
    },
    {
        "id": "d9b05527.890318",
        "type": "function",
        "z": "42c07592.8d970c",
        "d": true,
        "name": "Call get-like-count (Testnet)",
        "func": "//Network\nconst network = new stacksNetwork.StacksTestnet(); // or for testnet, use `StacksTestnet()`\n\n//Contract Asset Info\nconst tempcontractid = \"ST1ZG09W7XN7S1WH5F06YN25C5CGK2RE01D6CSA1H.luv\"; //get the temporarily contract id\nconst ftname = tempcontractid.split(\".\")[1]; //remove everything prior and including \".\"\nconst ftaddress = tempcontractid.split(\".\")[0]; //remove everything after and including \".\"\n\n//Sender\nconst senderAddress = global.get('testnetdepositaddress'); //or use depositaddress for mainnet\n\n//Message ID to get Like Count of\nconst index = 1;//msg.idx;//pass in the ID of the message in question\n\n\n//Transaction Options\nconst options = {\n  contractAddress: ftaddress,\n  contractName: ftname,\n  functionName: 'get-like-count',\n  readOnlyFunctionArgs: [\n      ftaddress,\n      stacksTransactions.cvToHex(stacksTransactions.uintCV(index)),\n      ],\n  network,\n  senderAddress,\n};\n\n//Read-only contract functions can be called without generating or broadcasting a transaction. \n//Instead it works via a direct API call to a Stacks node.\nconst result = await stacksTransactions.callReadOnlyFunction(options);\n\n//Passed along Outputs for UI\nmsg.payload = result;\nmsg.txoptions = options;//the tx options\nmsg.ftcontractid = tempcontractid;//full contract id\nmsg.ftname = ftname;//contract name\nmsg.ftaddress = ftaddress;//contract address\n//msg.ftsender = ftsender; //contract caller\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "BigNum",
                "module": "bn.js"
            },
            {
                "var": "stacksNetwork",
                "module": "@stacks/network"
            },
            {
                "var": "stacksTransactions",
                "module": "@stacks/transactions"
            },
            {
                "var": "BufferCV",
                "module": "@stacks/transactions"
            }
        ],
        "x": 1100,
        "y": 1840,
        "wires": [
            [
                "7e2a93de.9a0c0c"
            ]
        ]
    },
    {
        "id": "7e2a93de.9a0c0c",
        "type": "debug",
        "z": "42c07592.8d970c",
        "name": "Likes-Count Debugger",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1380,
        "y": 1840,
        "wires": []
    },
    {
        "id": "36ccd46a.01a51c",
        "type": "inject",
        "z": "42c07592.8d970c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 840,
        "y": 1900,
        "wires": [
            [
                "d9b05527.890318",
                "bb72d1cd.e8a37",
                "d6dff8b4.5f4d78"
            ]
        ]
    },
    {
        "id": "6e285c26.642724",
        "type": "ui_button",
        "z": "39deae2a.464912",
        "name": "",
        "group": "13446cb.eebd393",
        "order": 6,
        "width": "5",
        "height": "1",
        "passthru": false,
        "label": "Generate New Wallet",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "Input a Password",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 120,
        "y": 120,
        "wires": [
            [
                "24e8c2b5.bf782e"
            ]
        ]
    },
    {
        "id": "36ca291e.bbc376",
        "type": "ui_button",
        "z": "39deae2a.464912",
        "name": "",
        "group": "13446cb.eebd393",
        "order": 4,
        "width": "5",
        "height": "1",
        "passthru": false,
        "label": "Import Existing Wallet",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "Input a Key Phrase",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 120,
        "y": 240,
        "wires": [
            [
                "f7eeb9dd.c109c8"
            ]
        ]
    },
    {
        "id": "f7eeb9dd.c109c8",
        "type": "ui_toast",
        "z": "39deae2a.464912",
        "position": "prompt",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "Import Wallet",
        "cancel": "Back",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 330,
        "y": 240,
        "wires": [
            [
                "9e339f6f.61562"
            ]
        ]
    },
    {
        "id": "9e339f6f.61562",
        "type": "function",
        "z": "39deae2a.464912",
        "name": "pass to payload.secretKeys",
        "func": "var secretKey = msg.payload;\n\nmsg.payload.secretKey = secretKey;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 240,
        "wires": [
            [
                "b0af355d.6c5e48"
            ]
        ]
    },
    {
        "id": "11ea4e07.ace522",
        "type": "function",
        "z": "53028f3b.590b5",
        "name": "import or generate wallet",
        "func": "const password = msg.payload.password;\n\nlet secretKey = msg.payload.secretKey;\n\nif (secretKey) {\n    \n    const isValid = bip39.validateMnemonic(secretKey);\n    \n    if (!isValid) throw new Error(secretKey + ' is not a valid bip39 mnemonic key')\n    \n} else secretKey = stacksWalletSdk.generateSecretKey();\n\nconst wallet = await stacksWalletSdk.generateWallet({secretKey, password});\n\nmsg.payload = {secretKey, password, wallet};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "stacksWalletSdk",
                "module": "@stacks/wallet-sdk"
            },
            {
                "var": "bip39",
                "module": "bip39"
            }
        ],
        "x": 450,
        "y": 480,
        "wires": [
            [
                "75e4c65c.98eba8",
                "2daab08b.7244f",
                "8636d457.30a4c8",
                "873657ef.83d408",
                "1f2a433e.62aced",
                "9be618dc.c92f28"
            ]
        ]
    },
    {
        "id": "1f2a433e.62aced",
        "type": "link out",
        "z": "53028f3b.590b5",
        "name": "Pass to Call Keys",
        "links": [
            "8d922f76.e3b27"
        ],
        "x": 655,
        "y": 400,
        "wires": []
    },
    {
        "id": "b0af355d.6c5e48",
        "type": "function",
        "z": "39deae2a.464912",
        "name": "import or generate wallet",
        "func": "const password = msg.payload.password;\n\nlet secretKey = msg.payload.secretKey;\n\nif (secretKey) {\n    \n    const isValid = bip39.validateMnemonic(secretKey);\n    \n    if (!isValid) throw new Error(secretKey + ' is not a valid bip39 mnemonic key')\n    \n} else secretKey = stacksWalletSdk.generateSecretKey();\n\nconst wallet = await stacksWalletSdk.generateWallet({secretKey, password});\n\nmsg.payload = {secretKey, password, wallet};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "stacksWalletSdk",
                "module": "@stacks/wallet-sdk"
            },
            {
                "var": "bip39",
                "module": "bip39"
            }
        ],
        "x": 830,
        "y": 180,
        "wires": [
            [
                "525522ea.08a89c",
                "f75cddc.0fe032",
                "3f94a358.c0b12c",
                "9ce10583.e6a738"
            ]
        ]
    },
    {
        "id": "525522ea.08a89c",
        "type": "function",
        "z": "39deae2a.464912",
        "name": "show Wallet group",
        "func": "msg.payload = {\n  \"group\": {\n    \"hide\": [\n      \"DeruptSetup_Intro\"\n    ],\n    \"show\": [\n      \"DeruptKeys_Warning\"\n    ],\n    \"focus\": true\n  }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 180,
        "wires": [
            [
                "d36edcfc.dcecc"
            ]
        ]
    },
    {
        "id": "f75cddc.0fe032",
        "type": "function",
        "z": "39deae2a.464912",
        "name": "generate deposit address 0 (Mainnet)",
        "func": "//var nt = msg.gnt; //set var nt dynamically\nvar nt = 0; // set var nt as Mainnet \n//var nt = 128; // set var nt as TestNet\n\n\nconst obj = {\n    account : msg.payload.wallet.accounts[0],\n    transactionVersion : nt\n};\n\nconst address = stacksWalletSdk.getStxAddress(obj);\n\nmsg.depositaddress = address;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "stacksWalletSdk",
                "module": "@stacks/wallet-sdk"
            }
        ],
        "x": 1210,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "9ce10583.e6a738",
        "type": "function",
        "z": "39deae2a.464912",
        "name": "generate deposit address 0 (Testnet)",
        "func": "//var nt = msg.gnt; //set var nt dynamically\n//var nt = 0; // set var nt as Mainnet \nvar nt = 128; // set var nt as TestNet\n\n\nconst obj = {\n    account : msg.payload.wallet.accounts[0],\n    transactionVersion : nt\n};\n\nconst address = stacksWalletSdk.getStxAddress(obj);\n\nmsg.testnetdepositaddress = address;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "stacksWalletSdk",
                "module": "@stacks/wallet-sdk"
            }
        ],
        "x": 1210,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "3f94a358.c0b12c",
        "type": "debug",
        "z": "39deae2a.464912",
        "name": "Wallet Generate Debugger",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 40,
        "wires": []
    },
    {
        "id": "d36edcfc.dcecc",
        "type": "ui_ui_control",
        "z": "39deae2a.464912",
        "name": "",
        "events": "all",
        "x": 1340,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "5e9db3ae.14589c",
        "type": "function",
        "z": "39deae2a.464912",
        "name": "pass to payload.password",
        "func": "var password = msg.payload;\n\nmsg.payload.password = password;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 120,
        "wires": [
            [
                "b0af355d.6c5e48"
            ]
        ]
    },
    {
        "id": "24e8c2b5.bf782e",
        "type": "ui_toast",
        "z": "39deae2a.464912",
        "position": "prompt",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "Set Password",
        "cancel": "Back",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 330,
        "y": 120,
        "wires": [
            [
                "5e9db3ae.14589c"
            ]
        ]
    },
    {
        "id": "7ff6a822.86c8e8",
        "type": "ui_template",
        "z": "39deae2a.464912",
        "group": "74c7f0f9.45b14",
        "name": "Keys Backup Prompt Warning",
        "order": 2,
        "width": "13",
        "height": "4",
        "format": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<meta name=\"theme-color\" content=\"#34af07\">\n\t<style>\n      .container {\n        display: flex;\n        align-items: center;\n        justify-content: center\n      }\n      img {\n        max-width: 100%\n      }\n      .image {\n        flex-basis: 50%;\n        order: 2;\n      }\n      .text {\n        color: #CD5C5C;\n        padding-right: 10px;\n        font: 10px \"Fira Sans\", serif;\n      }\n    </style>\n</head>\n<body>\n     <div class=\"container\">\n      <div class=\"image\">\n        <img src=\"https://derupt.io/assets/images/derupt_clear_small.png\" width=\"160\" height=\"160\">\n      </div>\n      <div class=\"text\">\n        <h1>MAKE A BACK UP OF YOUR KEYS!</h1>\n      </div>\n    </div>\n</body>\n</html>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 1410,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "51866fee.1c6dd",
        "type": "ui_template",
        "z": "53028f3b.590b5",
        "group": "bec9f54e.163bf8",
        "name": "Setup Wizard",
        "order": 2,
        "width": "13",
        "height": "4",
        "format": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<meta name=\"theme-color\" content=\"#34af07\">\n\t<style>\n      .container {\n        display: flex;\n        align-items: center;\n        justify-content: center\n      }\n      img {\n        max-width: 100%\n      }\n      .image {\n        flex-basis: 50%;\n        order: 2;\n      }\n      .text {\n        color: #CD5C5C;\n        padding-right: 10px;\n        font: 10px \"Fira Sans\", serif;\n      }\n    </style>\n</head>\n<body>\n     <div class=\"container\">\n      <div class=\"image\">\n        <img src=\"https://derupt.io/assets/images/derupt_clear_small.png\" width=\"160\" height=\"160\">\n      </div>\n      <div class=\"text\">\n        <h3>Welcome to the Derupt Setup Wizard!</h3>\n      </div>\n    </div>\n</body>\n</html>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 140,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "b27ce695.bc93b8",
        "type": "inject",
        "z": "42c07592.8d970c",
        "name": "inject principal",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "SP1TA84JTP4YRFWBK7PYKBA33H3YB60XP654RAR7M",
        "payloadType": "str",
        "x": 210,
        "y": 1840,
        "wires": [
            [
                "1f83c8ac.2cb977"
            ]
        ]
    },
    {
        "id": "d3b91ddc.7db72",
        "type": "inject",
        "z": "42c07592.8d970c",
        "name": "inject principal",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "SP9JYG8J36SXDMWY2X5RJSBQZ1FZQW4YDF7SPB51",
        "payloadType": "str",
        "x": 190,
        "y": 1640,
        "wires": [
            [
                "1f83c8ac.2cb977"
            ]
        ]
    },
    {
        "id": "db21f272.29bb2",
        "type": "ui_template",
        "z": "42c07592.8d970c",
        "group": "c8a18e02.7cf15",
        "name": "Deruptar Avatar",
        "order": 1,
        "width": "6",
        "height": "6",
        "format": "<div style=\"position: relative; width: 284px; height: 284px;\" align=\"center\">\n<img src=\"https://raw.githubusercontent.com/cryptocracy/deruptars/main/bg/{{msg.bg}}_bg.png\" alt=\"\" style=\"position: absolute; top: 0; left: 0;\">\n<img src=\"https://raw.githubusercontent.com/cryptocracy/deruptars/main/skin/{{msg.skin}}_skin.png\" alt=\"\" style=\"position: absolute; top: 0; left: 0;\">\n<img src=\"https://raw.githubusercontent.com/cryptocracy/deruptars/main/eyes/{{msg.eyes}}_eyes.png\" alt=\"\" style=\"position: absolute; top: 0; left: 0;\">\n<img src=\"https://raw.githubusercontent.com/cryptocracy/deruptars/main/teeth/{{msg.teeth}}_teeth.png\" alt=\"\" style=\"position: absolute; top: 0; left: 0;\">\n<img src=\"https://raw.githubusercontent.com/cryptocracy/deruptars/main/lips/{{msg.lips}}_lips.png\" alt=\"\" style=\"position: absolute; top: 0; left: 0;\">\n<img src=\"https://raw.githubusercontent.com/cryptocracy/deruptars/main/hair/{{msg.hair}}_hair.png\" alt=\"\" style=\"position: absolute; top: 0; left: 0;\">\n<img src=\"https://raw.githubusercontent.com/cryptocracy/deruptars/main/hat/{{msg.hat}}_hat.png\" alt=\"\" style=\"position: absolute; top: 0; left: 0;\">\n<img src=\"https://raw.githubusercontent.com/cryptocracy/deruptars/main/chest/{{msg.chest}}_chest.png\" alt=\"\" style=\"position: absolute; top: 0; left: 0;\">\n</div>\nBio: {{msg.deruptar}}\n\n\n\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 600,
        "y": 1760,
        "wires": [
            []
        ]
    },
    {
        "id": "909f5c76.e019a",
        "type": "inject",
        "z": "42c07592.8d970c",
        "name": "inject principal",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "SP3YD5XX054TRGFNYGTPB2H44JW70Y5603D7B5Y1V",
        "payloadType": "str",
        "x": 190,
        "y": 1760,
        "wires": [
            [
                "1f83c8ac.2cb977"
            ]
        ]
    },
    {
        "id": "bb72d1cd.e8a37",
        "type": "function",
        "z": "42c07592.8d970c",
        "d": true,
        "name": "Call get-like-count (Testnet)",
        "func": "//Message ID to get Like Count of\nconst index = 1;//msg.idx;//pass in the ID of the message in question\n\n//Contract Call Prep\nconst contractAddress = \"ST1ZG09W7XN7S1WH5F06YN25C5CGK2RE01D6CSA1H\"; //get the temporarily contract id\nconst contractName = 'luv';\nconst functionName = 'get-like-count';\nconst buffer = stacksTransactions.cvToHex(stacksTransactions.uintCV(index));\nconst network = new stacksNetwork.StacksTestnet(); // or for testnet, use `StacksTestnet()`\nconst senderAddress = global.get('testnetdepositaddress');\n\n//Function Options\nconst options = {\n  contractAddress,\n  contractName,\n  functionName,\n  readOnlyfunctionArgs: [contractAddress, buffer],\n  network,\n  senderAddress,\n};\n\n//Read-only contract functions via direct API call to a Stacks node.\nconst result = await stacksTransactions.callReadOnlyFunction(options);\n\n//Passed along Outputs \nmsg.payload = result;\nmsg.txoptions = options;//the tx options\nmsg.ftname = contractName;//contract name\nmsg.ftaddress = contractAddress;//contract address\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "BigNum",
                "module": "bn.js"
            },
            {
                "var": "stacksNetwork",
                "module": "@stacks/network"
            },
            {
                "var": "stacksTransactions",
                "module": "@stacks/transactions"
            },
            {
                "var": "BufferCV",
                "module": "@stacks/transactions"
            }
        ],
        "x": 1100,
        "y": 1880,
        "wires": [
            [
                "7e2a93de.9a0c0c"
            ]
        ]
    },
    {
        "id": "d6dff8b4.5f4d78",
        "type": "function",
        "z": "42c07592.8d970c",
        "name": "Call get-like-count (Testnet)",
        "func": "//Message ID to get Like Count of\nconst mess = 1;//msg.idx;//pass in the ID of the message in question\n\n//Contract Call Basics\nconst contractAddress = \"ST1ZG09W7XN7S1WH5F06YN25C5CGK2RE01D6CSA1H\"; //get the temporarily contract id\nconst contractName = 'luv';\nconst functionName = 'get-like-count';\n//const buffer = stacksTransactions.cvToHex(stacksTransactions.uintCV(index));\nconst network = new stacksNetwork.StacksTestnet(); // or for testnet, use `StacksTestnet()`\nconst senderAddress = global.get('testnetdepositaddress');\n\n//Function Call Options\nconst options = {\n  contractAddress,\n  contractName,\n  functionName,\n  functionArgs: [stacksTransactions.uintCV(mess)],\n  network,\n  senderAddress,\n};\n\n//Read-only contract functions called via a direct API call to a Stacks node.\nconst result = await stacksTransactions.callReadOnlyFunction(options);\n\n//Passed along Outputs for UI\nmsg.payload = result;\nmsg.txoptions = options;//the tx options\nmsg.ftname = contractName;//contract name\nmsg.ftaddress = contractAddress;//contract address\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "BigNum",
                "module": "bn.js"
            },
            {
                "var": "stacksNetwork",
                "module": "@stacks/network"
            },
            {
                "var": "stacksTransactions",
                "module": "@stacks/transactions"
            },
            {
                "var": "BufferCV",
                "module": "@stacks/transactions"
            }
        ],
        "x": 1100,
        "y": 1920,
        "wires": [
            [
                "7e2a93de.9a0c0c"
            ]
        ]
    },
    {
        "id": "b8ca993.ae3f768",
        "type": "debug",
        "z": "42c07592.8d970c",
        "d": true,
        "name": "Message Likes Value",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.value.data.likes.value",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 1400,
        "wires": []
    },
    {
        "id": "a0a1d952.7d5838",
        "type": "function",
        "z": "42c07592.8d970c",
        "name": "deduce idxs array (message id)",
        "func": "var rawArray = msg.payload.results;\n\n\nvar idx = rawArray.map((obj) => {\n    return obj.contract_log.value.repr.toString().split('\\) \\(index u')[1].split('\\) \\(publisher')[0]\n});\n\n\nmsg.payload = idx;\nmsg.topic = \"idxs\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 1320,
        "wires": [
            [
                "dc2512fb.e3ca6"
            ]
        ]
    },
    {
        "id": "dc2512fb.e3ca6",
        "type": "split",
        "z": "42c07592.8d970c",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 710,
        "y": 1360,
        "wires": [
            [
                "e0de6d1d.b2801"
            ]
        ]
    },
    {
        "id": "e0de6d1d.b2801",
        "type": "function",
        "z": "42c07592.8d970c",
        "name": "Call get-like-count (Testnet)",
        "func": "//Message ID to get Like Count of\nconst mess = parseInt(msg.payload);//pass in the ID of the message in question\nconst lina = msg.payload.length;\n\n//Contract Call Basics\nconst contractAddress = \"ST1ZG09W7XN7S1WH5F06YN25C5CGK2RE01D6CSA1H\"; //get the temporarily contract id\nconst contractName = 'luv';\nconst functionName = 'get-like-count';\n//const buffer = stacksTransactions.cvToHex(stacksTransactions.uintCV(index));\nconst network = new stacksNetwork.StacksTestnet(); // or for testnet, use `StacksTestnet()`\nconst senderAddress = global.get('testnetdepositaddress');\n\n//Function Call Options\nconst options = {\n  contractAddress,\n  contractName,\n  functionName,\n  functionArgs: [stacksTransactions.uintCV(mess)],\n  network,\n  senderAddress,\n};\n\n//Read-only contract functions called via a direct API call to a Stacks node.\nconst result = await stacksTransactions.callReadOnlyFunction(options);\n\n//Passed along Outputs for UI\nmsg.payload = result;\nmsg.lina = lina;\nmsg.txoptions = options;//the tx options\nmsg.ftname = contractName;//contract name\nmsg.ftaddress = contractAddress;//contract address\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "BigNum",
                "module": "bn.js"
            },
            {
                "var": "stacksNetwork",
                "module": "@stacks/network"
            },
            {
                "var": "stacksTransactions",
                "module": "@stacks/transactions"
            },
            {
                "var": "BufferCV",
                "module": "@stacks/transactions"
            }
        ],
        "x": 640,
        "y": 1400,
        "wires": [
            [
                "83dc2ae4.facef8",
                "b8ca993.ae3f768"
            ]
        ]
    },
    {
        "id": "83dc2ae4.facef8",
        "type": "join",
        "z": "42c07592.8d970c",
        "name": "",
        "mode": "auto",
        "build": "string",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 710,
        "y": 1440,
        "wires": [
            [
                "c4913099.fef38"
            ]
        ]
    },
    {
        "id": "a8ecfbfb.e49d38",
        "type": "debug",
        "z": "42c07592.8d970c",
        "d": true,
        "name": "Likes Count Array",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1470,
        "y": 1180,
        "wires": []
    },
    {
        "id": "c4913099.fef38",
        "type": "function",
        "z": "42c07592.8d970c",
        "name": "deduce likecount array (message like count)",
        "func": "var rawArray = msg.payload;\n\n\nvar likecount = rawArray.map((obj) => {\n    return obj.value.data.likes.value\n});\n\n\nmsg.payload = likecount;\nmsg.topic = \"likecounts\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 1440,
        "wires": [
            [
                "a8ecfbfb.e49d38",
                "192b5a27.e2e4a6",
                "2e96cb0.2611636"
            ]
        ]
    }
]
